// Code generated by 'ccgo -pkgname=python -export-defines "" -export-enums "" -export-externs X -export-structs S -export-fields "" -export-typedefs "" -trace-translation-units -o internal/python/python_linux_amd64.go -I ./internal/lib -I upstream/tree-sitter/lib/include upstream/tree-sitter-python/src/parser.c internal/python/patch/scanner.c', DO NOT EDIT.

package python

import (
	"math"
	"reflect"
	"sync/atomic"
	"unsafe"

	"modernc.org/libc"
	"modernc.org/libc/sys/types"
)

var _ = math.Pi
var _ reflect.Kind
var _ atomic.Value
var _ unsafe.Pointer
var _ types.Size_t

const (
	ALIAS_COUNT                           = 0
	BIG_ENDIAN                            = 4321
	BYTE_ORDER                            = 1234
	EXIT_FAILURE                          = 1
	EXIT_SUCCESS                          = 0
	EXTERNAL_TOKEN_COUNT                  = 6
	FD_SETSIZE                            = 1024
	FIELD_COUNT                           = 25
	INT16_MAX                             = 32767
	INT16_MIN                             = -32768
	INT32_MAX                             = 2147483647
	INT32_MIN                             = -2147483648
	INT64_MAX                             = 9223372036854775807
	INT64_MIN                             = -9223372036854775808
	INT8_MAX                              = 127
	INT8_MIN                              = -128
	INTMAX_MAX                            = 9223372036854775807
	INTMAX_MIN                            = -9223372036854775808
	INTPTR_MAX                            = 9223372036854775807
	INTPTR_MIN                            = -9223372036854775808
	INT_FAST16_MAX                        = 9223372036854775807
	INT_FAST16_MIN                        = -9223372036854775808
	INT_FAST32_MAX                        = 9223372036854775807
	INT_FAST32_MIN                        = -9223372036854775808
	INT_FAST64_MAX                        = 9223372036854775807
	INT_FAST64_MIN                        = -9223372036854775808
	INT_FAST8_MAX                         = 127
	INT_FAST8_MIN                         = -128
	INT_LEAST16_MAX                       = 32767
	INT_LEAST16_MIN                       = -32768
	INT_LEAST32_MAX                       = 2147483647
	INT_LEAST32_MIN                       = -2147483648
	INT_LEAST64_MAX                       = 9223372036854775807
	INT_LEAST64_MIN                       = -9223372036854775808
	INT_LEAST8_MAX                        = 127
	INT_LEAST8_MIN                        = -128
	LANGUAGE_VERSION                      = 13
	LARGE_STATE_COUNT                     = 101
	LITTLE_ENDIAN                         = 1234
	MAX_ALIAS_SEQUENCE_LENGTH             = 9
	PDP_ENDIAN                            = 3412
	PRODUCTION_ID_COUNT                   = 91
	PTRDIFF_MAX                           = 9223372036854775807
	PTRDIFF_MIN                           = -9223372036854775808
	RAND_MAX                              = 2147483647
	SIG_ATOMIC_MAX                        = 2147483647
	SIG_ATOMIC_MIN                        = -2147483648
	SIZE_MAX                              = 18446744073709551615
	STATE_COUNT                           = 1088
	SYMBOL_COUNT                          = 227
	TOKEN_COUNT                           = 101
	TREE_SITTER_PARSER_H_                 = 0
	TREE_SITTER_SERIALIZATION_BUFFER_SIZE = 1024
	UINT16_MAX                            = 65535
	UINT32_MAX                            = 4294967295
	UINT64_MAX                            = 18446744073709551615
	UINT8_MAX                             = 255
	UINTMAX_MAX                           = 18446744073709551615
	UINTPTR_MAX                           = 18446744073709551615
	UINT_FAST16_MAX                       = 18446744073709551615
	UINT_FAST32_MAX                       = 18446744073709551615
	UINT_FAST64_MAX                       = 18446744073709551615
	UINT_FAST8_MAX                        = 255
	UINT_LEAST16_MAX                      = 65535
	UINT_LEAST32_MAX                      = 4294967295
	UINT_LEAST64_MAX                      = 18446744073709551615
	UINT_LEAST8_MAX                       = 255
	WCHAR_MAX                             = 2147483647
	WCHAR_MIN                             = -2147483648
	WCONTINUED                            = 8
	WEXITED                               = 4
	WINT_MAX                              = 4294967295
	WINT_MIN                              = 0
	WNOHANG                               = 1
	WNOWAIT                               = 0x01000000
	WSTOPPED                              = 2
	WUNTRACED                             = 2
	X_ALLOCA_H                            = 1
	X_ATFILE_SOURCE                       = 1
	X_BITS_BYTESWAP_H                     = 1
	X_BITS_FLOATN_COMMON_H                = 0
	X_BITS_FLOATN_H                       = 0
	X_BITS_PTHREADTYPES_ARCH_H            = 1
	X_BITS_PTHREADTYPES_COMMON_H          = 1
	X_BITS_STDINT_INTN_H                  = 1
	X_BITS_STDINT_UINTN_H                 = 1
	X_BITS_SYSMACROS_H                    = 1
	X_BITS_TYPESIZES_H                    = 1
	X_BITS_TYPES_H                        = 1
	X_BITS_UINTN_IDENTITY_H               = 1
	X_BITS_WCHAR_H                        = 1
	X_BSD_SIZE_T_                         = 0
	X_BSD_SIZE_T_DEFINED_                 = 0
	X_DEFAULT_SOURCE                      = 1
	X_ENDIAN_H                            = 1
	X_FEATURES_H                          = 1
	X_FILE_OFFSET_BITS                    = 64
	X_GCC_SIZE_T                          = 0
	X_GCC_WCHAR_T                         = 0
	X_GCC_WRAP_STDINT_H                   = 0
	X_LP64                                = 1
	X_POSIX_C_SOURCE                      = 200809
	X_POSIX_SOURCE                        = 1
	X_SIZET_                              = 0
	X_SIZE_T                              = 0
	X_SIZE_T_                             = 0
	X_SIZE_T_DECLARED                     = 0
	X_SIZE_T_DEFINED                      = 0
	X_SIZE_T_DEFINED_                     = 0
	X_STDBOOL_H                           = 0
	X_STDC_PREDEF_H                       = 1
	X_STDINT_H                            = 1
	X_STDLIB_H                            = 1
	X_STRUCT_TIMESPEC                     = 1
	X_SYS_CDEFS_H                         = 1
	X_SYS_SELECT_H                        = 1
	X_SYS_SIZE_T_H                        = 0
	X_SYS_SYSMACROS_H                     = 1
	X_SYS_TYPES_H                         = 1
	X_THREAD_SHARED_TYPES_H               = 1
	X_T_SIZE                              = 0
	X_T_SIZE_                             = 0
	X_T_WCHAR                             = 0
	X_T_WCHAR_                            = 0
	X_WCHAR_T                             = 0
	X_WCHAR_T_                            = 0
	X_WCHAR_T_DECLARED                    = 0
	X_WCHAR_T_DEFINED                     = 0
	X_WCHAR_T_DEFINED_                    = 0
	X_WCHAR_T_H                           = 0
	False                                 = 0
	Linux                                 = 1
	True                                  = 1
	Ts_builtin_sym_end                    = 0
	Unix                                  = 1
	WEOF                                  = 4294967295
	X_ASSERT_H                            = 1
	X_ASSERT_H_DECLS                      = 0
	X_BITS_TYPES_LOCALE_T_H               = 1
	X_BITS_TYPES___LOCALE_T_H             = 1
	X_BITS_WCTYPE_WCHAR_H                 = 1
	X_STRINGS_H                           = 1
	X_STRING_H                            = 1
	X_WCTYPE_H                            = 1
	X_WINT_T                              = 1
)

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//     are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// XPG requires a few symbols from <sys/wait.h> being defined.
// Definitions of flag bits for `waitpid' et al.
//    Copyright (C) 1992-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Bits in the third argument to `waitpid'.

// Bits in the fourth argument to `waitid'.

// The following values are used by the `waitid' function.

// The Linux kernel defines these bare, rather than an enum,
//    which causes a conflict if the include order is reversed.

const ( /* waitflags.h:52:1: */
	P_ALL  = 0 // Wait for any child.
	P_PID  = 1 // Wait for specified process.
	P_PGID = 2
)

// The characteristics are stored always in network byte order (big
//    endian).  We define the bit value interpretations here dependent on the
//    machine's byte order.

// Copyright (C) 1992-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

const ( /* wctype-wchar.h:56:1: */
	X__ISwupper  = 0  // UPPERCASE.
	X__ISwlower  = 1  // lowercase.
	X__ISwalpha  = 2  // Alphabetic.
	X__ISwdigit  = 3  // Numeric.
	X__ISwxdigit = 4  // Hexadecimal numeric.
	X__ISwspace  = 5  // Whitespace.
	X__ISwprint  = 6  // Printing.
	X__ISwgraph  = 7  // Graphical.
	X__ISwblank  = 8  // Blank (usually SPC and TAB).
	X__ISwcntrl  = 9  // Control character.
	X__ISwpunct  = 10 // Punctuation.
	X__ISwalnum  = 11 // Alphanumeric.

	X_ISwupper  = 16777216    // UPPERCASE.
	X_ISwlower  = 33554432    // lowercase.
	X_ISwalpha  = 67108864    // Alphabetic.
	X_ISwdigit  = 134217728   // Numeric.
	X_ISwxdigit = 268435456   // Hexadecimal numeric.
	X_ISwspace  = 536870912   // Whitespace.
	X_ISwprint  = 1073741824  // Printing.
	X_ISwgraph  = -2147483648 // Graphical.
	X_ISwblank  = 65536       // Blank (usually SPC and TAB).
	X_ISwcntrl  = 131072      // Control character.
	X_ISwpunct  = 262144      // Punctuation.
	X_ISwalnum  = 524288
)

const ( /* scanner.c:18:1: */
	SingleQuote = 1
	DoubleQuote = 2
	BackQuote   = 4
	Raw         = 8
	Format      = 16
	Triple      = 32
	Bytes       = 64
)

// When possible, define assert so that it does not add extra
//    parentheses around EXPR.  Otherwise, those added parentheses would
//    suppress warnings we'd expect to be detected by gcc's -Wparentheses.
// The first occurrence of EXPR is not evaluated due to the sizeof,
//    but will trigger any pedantic warnings masked by the __extension__
//    for the second occurrence.  The ternary operator is required to
//    support function pointers and bit fields in this context, and to
//    suppress the evaluation of variable length arrays.

// Version 2.4 and later of GCC define a magical variable `__PRETTY_FUNCTION__'
//    which contains the name of the function currently being defined.
//    This is broken in G++ before version 2.6.
//    C9x has a similar variable called __func__, but prefer the GCC one since
//    it demangles C++ function names.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

//	ISO C99 Standard: 7.20 General utilities	<stdlib.h>

const ( /* scanner.c:9:1: */
	NEWLINE        = 0
	INDENT         = 1
	DEDENT         = 2
	STRING_START   = 3
	STRING_CONTENT = 4
	STRING_END     = 5
)

const ( /* parser.c:1623:1: */
	Field_alias        = 1
	Field_alternative  = 2
	Field_argument     = 3
	Field_arguments    = 4
	Field_attribute    = 5
	Field_body         = 6
	Field_cause        = 7
	Field_code         = 8
	Field_condition    = 9
	Field_consequence  = 10
	Field_definition   = 11
	Field_function     = 12
	Field_key          = 13
	Field_left         = 14
	Field_module_name  = 15
	Field_name         = 16
	Field_object       = 17
	Field_operator     = 18
	Field_parameters   = 19
	Field_return_type  = 20
	Field_right        = 21
	Field_subscript    = 22
	Field_superclasses = 23
	Field_type         = 24
	Field_value        = 25
)

//  Lexer Macros

//  Parse Table Macros

const ( /* parser.c:19:1: */
	Sym_identifier                         = 1
	Anon_sym_import                        = 2
	Anon_sym_DOT                           = 3
	Anon_sym_from                          = 4
	Anon_sym___future__                    = 5
	Anon_sym_LPAREN                        = 6
	Anon_sym_RPAREN                        = 7
	Anon_sym_COMMA                         = 8
	Anon_sym_as                            = 9
	Anon_sym_STAR                          = 10
	Anon_sym_print                         = 11
	Anon_sym_GT_GT                         = 12
	Anon_sym_assert                        = 13
	Anon_sym_COLON_EQ                      = 14
	Anon_sym_return                        = 15
	Anon_sym_del                           = 16
	Anon_sym_raise                         = 17
	Anon_sym_pass                          = 18
	Anon_sym_break                         = 19
	Anon_sym_continue                      = 20
	Anon_sym_if                            = 21
	Anon_sym_COLON                         = 22
	Anon_sym_elif                          = 23
	Anon_sym_else                          = 24
	Anon_sym_async                         = 25
	Anon_sym_for                           = 26
	Anon_sym_in                            = 27
	Anon_sym_while                         = 28
	Anon_sym_try                           = 29
	Anon_sym_except                        = 30
	Anon_sym_finally                       = 31
	Anon_sym_with                          = 32
	Anon_sym_def                           = 33
	Anon_sym_DASH_GT                       = 34
	Anon_sym_STAR_STAR                     = 35
	Anon_sym_global                        = 36
	Anon_sym_nonlocal                      = 37
	Anon_sym_exec                          = 38
	Anon_sym_class                         = 39
	Anon_sym_AT                            = 40
	Anon_sym_LBRACK                        = 41
	Anon_sym_RBRACK                        = 42
	Anon_sym_EQ                            = 43
	Anon_sym_not                           = 44
	Anon_sym_and                           = 45
	Anon_sym_or                            = 46
	Anon_sym_PLUS                          = 47
	Anon_sym_DASH                          = 48
	Anon_sym_SLASH                         = 49
	Anon_sym_PERCENT                       = 50
	Anon_sym_SLASH_SLASH                   = 51
	Anon_sym_PIPE                          = 52
	Anon_sym_AMP                           = 53
	Anon_sym_CARET                         = 54
	Anon_sym_LT_LT                         = 55
	Anon_sym_TILDE                         = 56
	Anon_sym_LT                            = 57
	Anon_sym_LT_EQ                         = 58
	Anon_sym_EQ_EQ                         = 59
	Anon_sym_BANG_EQ                       = 60
	Anon_sym_GT_EQ                         = 61
	Anon_sym_GT                            = 62
	Anon_sym_LT_GT                         = 63
	Anon_sym_is                            = 64
	Anon_sym_lambda                        = 65
	Anon_sym_PLUS_EQ                       = 66
	Anon_sym_DASH_EQ                       = 67
	Anon_sym_STAR_EQ                       = 68
	Anon_sym_SLASH_EQ                      = 69
	Anon_sym_AT_EQ                         = 70
	Anon_sym_SLASH_SLASH_EQ                = 71
	Anon_sym_PERCENT_EQ                    = 72
	Anon_sym_STAR_STAR_EQ                  = 73
	Anon_sym_GT_GT_EQ                      = 74
	Anon_sym_LT_LT_EQ                      = 75
	Anon_sym_AMP_EQ                        = 76
	Anon_sym_CARET_EQ                      = 77
	Anon_sym_PIPE_EQ                       = 78
	Anon_sym_yield                         = 79
	Sym_ellipsis                           = 80
	Anon_sym_LBRACE                        = 81
	Anon_sym_RBRACE                        = 82
	Sym_escape_sequence                    = 83
	Sym__not_escape_sequence               = 84
	Aux_sym_format_specifier_token1        = 85
	Sym_type_conversion                    = 86
	Sym_integer                            = 87
	Sym_float                              = 88
	Anon_sym_await                         = 89
	Sym_true                               = 90
	Sym_false                              = 91
	Sym_none                               = 92
	Sym_comment                            = 93
	Sym__semicolon                         = 94
	Sym__newline                           = 95
	Sym__indent                            = 96
	Sym__dedent                            = 97
	Sym__string_start                      = 98
	Sym__string_content                    = 99
	Sym__string_end                        = 100
	Sym_module                             = 101
	Sym__statement                         = 102
	Sym__simple_statements                 = 103
	Sym_import_statement                   = 104
	Sym_import_prefix                      = 105
	Sym_relative_import                    = 106
	Sym_future_import_statement            = 107
	Sym_import_from_statement              = 108
	Sym__import_list                       = 109
	Sym_aliased_import                     = 110
	Sym_wildcard_import                    = 111
	Sym_print_statement                    = 112
	Sym_chevron                            = 113
	Sym_assert_statement                   = 114
	Sym_expression_statement               = 115
	Sym_named_expression                   = 116
	Sym_return_statement                   = 117
	Sym_delete_statement                   = 118
	Sym_raise_statement                    = 119
	Sym_pass_statement                     = 120
	Sym_break_statement                    = 121
	Sym_continue_statement                 = 122
	Sym_if_statement                       = 123
	Sym_elif_clause                        = 124
	Sym_else_clause                        = 125
	Sym_for_statement                      = 126
	Sym_while_statement                    = 127
	Sym_try_statement                      = 128
	Sym_except_clause                      = 129
	Sym_finally_clause                     = 130
	Sym_with_statement                     = 131
	Sym_with_clause                        = 132
	Sym_with_item                          = 133
	Sym_function_definition                = 134
	Sym_parameters                         = 135
	Sym_lambda_parameters                  = 136
	Sym_list_splat                         = 137
	Sym_dictionary_splat                   = 138
	Sym_global_statement                   = 139
	Sym_nonlocal_statement                 = 140
	Sym_exec_statement                     = 141
	Sym_class_definition                   = 142
	Sym_parenthesized_list_splat           = 143
	Sym_argument_list                      = 144
	Sym_decorated_definition               = 145
	Sym_decorator                          = 146
	Sym_block                              = 147
	Sym_expression_list                    = 148
	Sym_dotted_name                        = 149
	Sym__parameters                        = 150
	Sym__patterns                          = 151
	Sym_parameter                          = 152
	Sym_pattern                            = 153
	Sym_tuple_pattern                      = 154
	Sym_list_pattern                       = 155
	Sym_default_parameter                  = 156
	Sym_typed_default_parameter            = 157
	Sym_list_splat_pattern                 = 158
	Sym_dictionary_splat_pattern           = 159
	Sym__expression_within_for_in_clause   = 160
	Sym_expression                         = 161
	Sym_primary_expression                 = 162
	Sym_not_operator                       = 163
	Sym_boolean_operator                   = 164
	Sym_binary_operator                    = 165
	Sym_unary_operator                     = 166
	Sym_comparison_operator                = 167
	Sym_lambda                             = 168
	Sym_lambda_within_for_in_clause        = 169
	Sym_assignment                         = 170
	Sym_augmented_assignment               = 171
	Sym_pattern_list                       = 172
	Sym__right_hand_side                   = 173
	Sym_yield                              = 174
	Sym_attribute                          = 175
	Sym_subscript                          = 176
	Sym_slice                              = 177
	Sym_call                               = 178
	Sym_typed_parameter                    = 179
	Sym_type                               = 180
	Sym_keyword_argument                   = 181
	Sym_list                               = 182
	Sym_set                                = 183
	Sym_tuple                              = 184
	Sym_dictionary                         = 185
	Sym_pair                               = 186
	Sym_list_comprehension                 = 187
	Sym_dictionary_comprehension           = 188
	Sym_set_comprehension                  = 189
	Sym_generator_expression               = 190
	Sym__comprehension_clauses             = 191
	Sym_parenthesized_expression           = 192
	Sym__collection_elements               = 193
	Sym_for_in_clause                      = 194
	Sym_if_clause                          = 195
	Sym_conditional_expression             = 196
	Sym_concatenated_string                = 197
	Sym_string                             = 198
	Sym_interpolation                      = 199
	Sym_format_specifier                   = 200
	Sym_format_expression                  = 201
	Sym_await                              = 202
	Aux_sym_module_repeat1                 = 203
	Aux_sym__simple_statements_repeat1     = 204
	Aux_sym_import_prefix_repeat1          = 205
	Aux_sym__import_list_repeat1           = 206
	Aux_sym_print_statement_repeat1        = 207
	Aux_sym_assert_statement_repeat1       = 208
	Aux_sym_if_statement_repeat1           = 209
	Aux_sym_try_statement_repeat1          = 210
	Aux_sym_with_clause_repeat1            = 211
	Aux_sym_global_statement_repeat1       = 212
	Aux_sym_argument_list_repeat1          = 213
	Aux_sym_decorated_definition_repeat1   = 214
	Aux_sym_dotted_name_repeat1            = 215
	Aux_sym__parameters_repeat1            = 216
	Aux_sym__patterns_repeat1              = 217
	Aux_sym_comparison_operator_repeat1    = 218
	Aux_sym_subscript_repeat1              = 219
	Aux_sym_dictionary_repeat1             = 220
	Aux_sym__comprehension_clauses_repeat1 = 221
	Aux_sym__collection_elements_repeat1   = 222
	Aux_sym_for_in_clause_repeat1          = 223
	Aux_sym_concatenated_string_repeat1    = 224
	Aux_sym_string_repeat1                 = 225
	Aux_sym_format_specifier_repeat1       = 226
)

const ( /* parser.c:4462:1: */
	Ts_external_token__newline        = 0
	Ts_external_token__indent         = 1
	Ts_external_token__dedent         = 2
	Ts_external_token__string_start   = 3
	Ts_external_token__string_content = 4
	Ts_external_token__string_end     = 5
)

const ( /* parser.h:53:1: */
	TSParseActionTypeShift   = 0
	TSParseActionTypeReduce  = 1
	TSParseActionTypeAccept  = 2
	TSParseActionTypeRecover = 3
)

type Ptrdiff_t = int64 /* <builtin>:3:26 */

type Size_t = uint64 /* <builtin>:9:23 */

type Wchar_t = int32 /* <builtin>:15:24 */

type X__int128_t = struct {
	Lo int64
	Hi int64
} /* <builtin>:21:43 */ // must match modernc.org/mathutil.Int128
type X__uint128_t = struct {
	Lo uint64
	Hi uint64
} /* <builtin>:22:44 */ // must match modernc.org/mathutil.Int128

type X__builtin_va_list = uintptr /* <builtin>:46:14 */
type X__float128 = float64        /* <builtin>:47:21 */

// Copyright (C) 1998-2017 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.16  Boolean type and values  <stdbool.h>

// Signal that all the definitions are present.

// Copyright (C) 1997-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

//	ISO C99: 7.18 Integer types <stdint.h>

// Handle feature test macros at the start of a header.
//    Copyright (C) 2016-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// This header is internal to glibc and should not be included outside
//    of glibc headers.  Headers including it must define
//    __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION first.  This header
//    cannot have multiple include guards because ISO C feature test
//    macros depend on the definition of the macro when an affected
//    header is included, not when the first system header is
//    included.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// These are defined by the user (or the compiler)
//    to specify the desired environment:
//
//    __STRICT_ANSI__	ISO Standard C.
//    _ISOC99_SOURCE	Extensions to ISO C89 from ISO C99.
//    _ISOC11_SOURCE	Extensions to ISO C99 from ISO C11.
//    __STDC_WANT_LIB_EXT2__
// 			Extensions to ISO C99 from TR 27431-2:2010.
//    __STDC_WANT_IEC_60559_BFP_EXT__
// 			Extensions to ISO C11 from TS 18661-1:2014.
//    __STDC_WANT_IEC_60559_FUNCS_EXT__
// 			Extensions to ISO C11 from TS 18661-4:2015.
//    __STDC_WANT_IEC_60559_TYPES_EXT__
// 			Extensions to ISO C11 from TS 18661-3:2015.
//
//    _POSIX_SOURCE	IEEE Std 1003.1.
//    _POSIX_C_SOURCE	If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std 1003.2;
// 			if >=199309L, add IEEE Std 1003.1b-1993;
// 			if >=199506L, add IEEE Std 1003.1c-1995;
// 			if >=200112L, all of IEEE 1003.1-2004
// 			if >=200809L, all of IEEE 1003.1-2008
//    _XOPEN_SOURCE	Includes POSIX and XPG things.  Set to 500 if
// 			Single Unix conformance is wanted, to 600 for the
// 			sixth revision, to 700 for the seventh revision.
//    _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
//    _LARGEFILE_SOURCE	Some more functions for correct standard I/O.
//    _LARGEFILE64_SOURCE	Additional functionality from LFS for large files.
//    _FILE_OFFSET_BITS=N	Select default filesystem interface.
//    _ATFILE_SOURCE	Additional *at interfaces.
//    _GNU_SOURCE		All of the above, plus GNU extensions.
//    _DEFAULT_SOURCE	The default set of features (taking precedence over
// 			__STRICT_ANSI__).
//
//    _FORTIFY_SOURCE	Add security hardening to many library functions.
// 			Set to 1 or 2; 2 performs stricter checks than 1.
//
//    _REENTRANT, _THREAD_SAFE
// 			Obsolete; equivalent to _POSIX_C_SOURCE=199506L.
//
//    The `-ansi' switch to the GNU C compiler, and standards conformance
//    options such as `-std=c99', define __STRICT_ANSI__.  If none of
//    these are defined, or if _DEFAULT_SOURCE is defined, the default is
//    to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
//    200809L, as well as enabling miscellaneous functions from BSD and
//    SVID.  If more than one of these are defined, they accumulate.  For
//    example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
//    give you ISO C, 1003.1, and 1003.2, but nothing else.
//
//    These are defined by this file and are used by the
//    header files to decide what to declare or define:
//
//    __GLIBC_USE (F)	Define things from feature set F.  This is defined
// 			to 1 or 0; the subsequent macros are either defined
// 			or undefined, and those tests should be moved to
// 			__GLIBC_USE.
//    __USE_ISOC11		Define ISO C11 things.
//    __USE_ISOC99		Define ISO C99 things.
//    __USE_ISOC95		Define ISO C90 AMD1 (C95) things.
//    __USE_ISOCXX11	Define ISO C++11 things.
//    __USE_POSIX		Define IEEE Std 1003.1 things.
//    __USE_POSIX2		Define IEEE Std 1003.2 things.
//    __USE_POSIX199309	Define IEEE Std 1003.1, and .1b things.
//    __USE_POSIX199506	Define IEEE Std 1003.1, .1b, .1c and .1i things.
//    __USE_XOPEN		Define XPG things.
//    __USE_XOPEN_EXTENDED	Define X/Open Unix things.
//    __USE_UNIX98		Define Single Unix V2 things.
//    __USE_XOPEN2K        Define XPG6 things.
//    __USE_XOPEN2KXSI     Define XPG6 XSI things.
//    __USE_XOPEN2K8       Define XPG7 things.
//    __USE_XOPEN2K8XSI    Define XPG7 XSI things.
//    __USE_LARGEFILE	Define correct standard I/O things.
//    __USE_LARGEFILE64	Define LFS things with separate names.
//    __USE_FILE_OFFSET64	Define 64bit interface as default.
//    __USE_MISC		Define things from 4.3BSD or System V Unix.
//    __USE_ATFILE		Define *at interfaces and AT_* constants for them.
//    __USE_GNU		Define GNU extensions.
//    __USE_FORTIFY_LEVEL	Additional security measures used, according to level.
//
//    The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
//    defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
//    only for compatibility.  All new code should use the other symbols
//    to test for features.
//
//    All macros listed above as possibly being defined by this file are
//    explicitly undefined if they are not explicitly defined.
//    Feature-test macros that are not defined by the user or compiler
//    but are implied by the other feature-test macros defined (or by the
//    lack of any definitions) are defined by the file.
//
//    ISO C feature test macros depend on the definition of the macro
//    when an affected header is included, not when the first system
//    header is included, and so they are handled in
//    <bits/libc-header-start.h>, which does not have a multiple include
//    guard.  Feature test macros that can be handled from the first
//    system header included are handled here.

// Undefine everything, so we get a clean slate.

// Suppress kernel-name space pollution unless user expressedly asks
//    for it.

// Convenience macro to test the version of gcc.
//    Use like this:
//    #if __GNUC_PREREQ (2,8)
//    ... code requiring gcc 2.8 or later ...
//    #endif
//    Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
//    added in 2.0.

// Similarly for clang.  Features added to GCC after version 4.2 may
//    or may not also be available in clang, and clang's definitions of
//    __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
//    features can be queried via __has_extension/__has_feature.

// Whether to use feature set F.

// _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
//    _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
//    issue a warning; the expectation is that the source is being
//    transitioned to use the new macro.

// If _GNU_SOURCE was defined by the user, turn on all the other features.

// If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
//    define _DEFAULT_SOURCE.

// This is to enable the ISO C11 extension.

// This is to enable the ISO C99 extension.

// This is to enable the ISO C90 Amendment 1:1995 extension.

// If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
//    is defined, use POSIX.1-2008 (or another version depending on
//    _XOPEN_SOURCE).

// Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
//    defined in all multithreaded code.  GNU libc has not required this
//    for many years.  We now treat them as compatibility synonyms for
//    _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
//    comprehensive support for multithreaded code.  Using them never
//    lowers the selected level of POSIX conformance, only raises it.

// The function 'gets' existed in C89, but is impossible to use
//    safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
//    compatibility with various implementations of <cstdio>, this test
//    must consider only the value of __cplusplus when compiling C++.

// Get definitions of __STDC_* predefined macros, if the compiler has
//    not preincluded this header automatically.
// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// This macro indicates that the installed library is the GNU C Library.
//    For historic reasons the value now is 6 and this will stay from now
//    on.  The use of this variable is deprecated.  Use __GLIBC__ and
//    __GLIBC_MINOR__ now (see below) when you want to test for a specific
//    GNU C library version and use the values in <gnu/lib-names.h> to get
//    the sonames of the shared libraries.

// Major and minor version number of the GNU C library package.  Use
//    these macros to test for features in specific releases.

// This is here only because every header file already includes this one.
// Copyright (C) 1992-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// We are almost always included from features.h.

// The GNU libc does not support any K&R compilers or the traditional mode
//    of ISO C compilers anymore.  Check for some of the combinations not
//    anymore supported.

// Some user header file might have defined this before.

// All functions, except those with callbacks or those that
//    synchronize memory, are leaf functions.

// GCC can always grok prototypes.  For C++ programs we add throw()
//    to help it optimize the function calls.  But this works only with
//    gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
//    as non-throwing using a function attribute since programs can use
//    the -fexceptions options for C code as well.

// Compilers that are not clang may object to
//        #if defined __clang__ && __has_extension(...)
//    even though they do not need to evaluate the right-hand side of the &&.

// These two macros are not used in glibc anymore.  They are kept here
//    only because some other projects expect the macros to be defined.

// For these things, GCC behaves the ANSI way normally,
//    and the non-ANSI way under -traditional.

// This is not a typedef so `const __ptr_t' does the right thing.

// C++ needs to know that types and declarations are C, not C++.

// Fortify support.

// Support for flexible arrays.
//    Headers that should use flexible arrays only if they're "real"
//    (e.g. only if they won't affect sizeof()) should test
//    #if __glibc_c99_flexarr_available.

// __asm__ ("xyz") is used throughout the headers to rename functions
//    at the assembly language level.  This is wrapped by the __REDIRECT
//    macro, in order to support compilers that can do this some other
//    way.  When compilers don't support asm-names at all, we have to do
//    preprocessor tricks instead (which don't have exactly the right
//    semantics, but it's the best we can do).
//
//    Example:
//    int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid);

//
// #elif __SOME_OTHER_COMPILER__
//
// # define __REDIRECT(name, proto, alias) name proto; 	_Pragma("let " #name " = " #alias)

// GCC has various useful declarations that can be made with the
//    `__attribute__' syntax.  All of the ways we use this do fine if
//    they are omitted for compilers that don't understand it.

// At some point during the gcc 2.96 development the `malloc' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.

// Tell the compiler which arguments to an allocation function
//    indicate the size of the allocation.

// At some point during the gcc 2.96 development the `pure' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.

// This declaration tells the compiler that the value is constant.

// At some point during the gcc 3.1 development the `used' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.

// Since version 3.2, gcc allows marking deprecated functions.

// Since version 4.5, gcc also allows one to specify the message printed
//    when a deprecated function is used.  clang claims to be gcc 4.2, but
//    may also support this feature.

// At some point during the gcc 2.8 development the `format_arg' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.
//    If several `format_arg' attributes are given for the same function, in
//    gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
//    all designated arguments are considered.

// At some point during the gcc 2.97 development the `strfmon' format
//    attribute for functions was introduced.  We don't want to use it
//    unconditionally (although this would be possible) since it
//    generates warnings.

// The nonull function attribute allows to mark pointer parameters which
//    must not be NULL.

// If fortification mode, we warn about unused results of certain
//    function calls which can lead to problems.

// Forces a function to be always inlined.
// The Linux kernel defines __always_inline in stddef.h (283d7573), and
//    it conflicts with this definition.  Therefore undefine it first to
//    allow either header to be included first.

// Associate error messages with the source location of the call site rather
//    than with the source location inside the function.

// GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
//    inline semantics, unless -fgnu89-inline is used.  Using __GNUC_STDC_INLINE__
//    or __GNUC_GNU_INLINE is not a good enough check for gcc because gcc versions
//    older than 4.3 may define these macros and still not guarantee GNU inlining
//    semantics.
//
//    clang++ identifies itself as gcc-4.2, but has support for GNU inlining
//    semantics, that can be checked fot by using the __GNUC_STDC_INLINE_ and
//    __GNUC_GNU_INLINE__ macro definitions.

// GCC 4.3 and above allow passing all anonymous arguments of an
//    __extern_always_inline function to some other vararg function.

// It is possible to compile containing GCC extensions even if GCC is
//    run in pedantic mode if the uses are carefully marked using the
//    `__extension__' keyword.  But this is not generally available before
//    version 2.8.

// __restrict is known in EGCS 1.2 and above.

// ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
//      array_name[restrict]
//    GCC 3.1 supports this.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.
// Properties of long double type.  ldbl-96 version.
//    Copyright (C) 2016-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License  published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// long double is distinct from double, so there is nothing to
//    define here.

// __glibc_macro_warning (MESSAGE) issues warning MESSAGE.  This is
//    intended for use in preprocessor macros.
//
//    Note: MESSAGE must be a _single_ string; concatenation of string
//    literals is not supported.

// Generic selection (ISO C11) is a C-only feature, available in GCC
//    since version 4.9.  Previous versions do not provide generic
//    selection, even though they might set __STDC_VERSION__ to 201112L,
//    when in -std=c11 mode.  Thus, we must check for !defined __GNUC__
//    when testing __STDC_VERSION__ for generic selection support.
//    On the other hand, Clang also defines __GNUC__, so a clang-specific
//    check is required to enable the use of generic selection.

// If we don't have __REDIRECT, prototypes will be missing if
//    __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64].

// Decide whether we can define 'extern inline' functions in headers.

// This is here only because every header file already includes this one.
//    Get the definitions of all the appropriate `__stub_FUNCTION' symbols.
//    <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a stub
//    that will always return failure (and set errno to ENOSYS).
// This file is automatically generated.
//    This file selects the right generated file of `__stub_FUNCTION' macros
//    based on the architecture being compiled for.

// This file is automatically generated.
//    It defines a symbol `__stub_FUNCTION' for each function
//    in the C library which is a stub, meaning it will fail
//    every time called, usually setting errno to ENOSYS.

// ISO/IEC TR 24731-2:2010 defines the __STDC_WANT_LIB_EXT2__
//    macro.

// ISO/IEC TS 18661-1:2014 defines the __STDC_WANT_IEC_60559_BFP_EXT__
//    macro.

// ISO/IEC TS 18661-4:2015 defines the
//    __STDC_WANT_IEC_60559_FUNCS_EXT__ macro.

// ISO/IEC TS 18661-3:2015 defines the
//    __STDC_WANT_IEC_60559_TYPES_EXT__ macro.
// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Convenience types.
type X__u_char = uint8   /* types.h:30:23 */
type X__u_short = uint16 /* types.h:31:28 */
type X__u_int = uint32   /* types.h:32:22 */
type X__u_long = uint64  /* types.h:33:27 */

// Fixed-size types, underlying types depend on word size and compiler.
type X__int8_t = int8     /* types.h:36:21 */
type X__uint8_t = uint8   /* types.h:37:23 */
type X__int16_t = int16   /* types.h:38:26 */
type X__uint16_t = uint16 /* types.h:39:28 */
type X__int32_t = int32   /* types.h:40:20 */
type X__uint32_t = uint32 /* types.h:41:22 */
type X__int64_t = int64   /* types.h:43:25 */
type X__uint64_t = uint64 /* types.h:44:27 */

// quad_t is also 64 bits.
type X__quad_t = int64    /* types.h:52:18 */
type X__u_quad_t = uint64 /* types.h:53:27 */

// Largest integral types.
type X__intmax_t = int64   /* types.h:61:18 */
type X__uintmax_t = uint64 /* types.h:62:27 */

// The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
//    macros for each of the OS types we define below.  The definitions
//    of those macros must use the following macros for underlying types.
//    We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsigned
//    variants of each of the following integer types on this machine.
//
// 	16		-- "natural" 16-bit type (always short)
// 	32		-- "natural" 32-bit type (always int)
// 	64		-- "natural" 64-bit type (long or long long)
// 	LONG32		-- 32-bit type, traditionally long
// 	QUAD		-- 64-bit type, always long long
// 	WORD		-- natural type of __WORDSIZE bits (int or long)
// 	LONGWORD	-- type of __WORDSIZE bits, traditionally long
//
//    We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
//    conventional uses of `long' or `long long' type modifiers match the
//    types we define, even when a less-adorned type would be the same size.
//    This matters for (somewhat) portably writing printf/scanf formats for
//    these types, where using the appropriate l or ll format modifiers can
//    make the typedefs and the formats match up across all GNU platforms.  If
//    we used `long' when it's 64 bits where `long long' is expected, then the
//    compiler would warn about the formats not matching the argument types,
//    and the programmer changing them to shut up the compiler would break the
//    program's portability.
//
//    Here we assume what is presently the case in all the GCC configurations
//    we support: long long is always 64 bits, long is always word/address size,
//    and int is always 32 bits.

// No need to mark the typedef with __extension__.
// bits/typesizes.h -- underlying types for *_t.  Linux/x86-64 version.
//    Copyright (C) 2012-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// See <bits/types.h> for the meaning of these macros.  This file exists so
//    that <bits/types.h> need not vary across different GNU platforms.

// X32 kernel interface is 64-bit.

// Tell the libc code that off_t and off64_t are actually the same type
//    for all ABI purposes, even if possibly expressed as different base types
//    for C type-checking purposes.

// Same for ino_t and ino64_t.

// And for __rlim_t and __rlim64_t.

// Number of descriptors that can fit in an `fd_set'.

type X__dev_t = uint64                     /* types.h:133:25 */ // Type of device numbers.
type X__uid_t = uint32                     /* types.h:134:25 */ // Type of user identifications.
type X__gid_t = uint32                     /* types.h:135:25 */ // Type of group identifications.
type X__ino_t = uint64                     /* types.h:136:25 */ // Type of file serial numbers.
type X__ino64_t = uint64                   /* types.h:137:27 */ // Type of file serial numbers (LFS).
type X__mode_t = uint32                    /* types.h:138:26 */ // Type of file attribute bitmasks.
type X__nlink_t = uint64                   /* types.h:139:27 */ // Type of file link counts.
type X__off_t = int64                      /* types.h:140:25 */ // Type of file sizes and offsets.
type X__off64_t = int64                    /* types.h:141:27 */ // Type of file sizes and offsets (LFS).
type X__pid_t = int32                      /* types.h:142:25 */ // Type of process identifications.
type X__fsid_t = struct{ X__val [2]int32 } /* types.h:143:26 */ // Type of file system IDs.
type X__clock_t = int64                    /* types.h:144:27 */ // Type of CPU usage counts.
type X__rlim_t = uint64                    /* types.h:145:26 */ // Type for resource measurement.
type X__rlim64_t = uint64                  /* types.h:146:28 */ // Type for resource measurement (LFS).
type X__id_t = uint32                      /* types.h:147:24 */ // General type for IDs.
type X__time_t = int64                     /* types.h:148:26 */ // Seconds since the Epoch.
type X__useconds_t = uint32                /* types.h:149:30 */ // Count of microseconds.
type X__suseconds_t = int64                /* types.h:150:31 */ // Signed count of microseconds.

type X__daddr_t = int32 /* types.h:152:27 */ // The type of a disk address.
type X__key_t = int32   /* types.h:153:25 */ // Type of an IPC key.

// Clock ID used in clock and timer functions.
type X__clockid_t = int32 /* types.h:156:29 */

// Timer ID returned by `timer_create'.
type X__timer_t = uintptr /* types.h:159:12 */

// Type to represent block size.
type X__blksize_t = int64 /* types.h:162:29 */

// Types from the Large File Support interface.

// Type to count number of disk blocks.
type X__blkcnt_t = int64   /* types.h:167:28 */
type X__blkcnt64_t = int64 /* types.h:168:30 */

// Type to count file system blocks.
type X__fsblkcnt_t = uint64   /* types.h:171:30 */
type X__fsblkcnt64_t = uint64 /* types.h:172:32 */

// Type to count file system nodes.
type X__fsfilcnt_t = uint64   /* types.h:175:30 */
type X__fsfilcnt64_t = uint64 /* types.h:176:32 */

// Type of miscellaneous file system fields.
type X__fsword_t = int64 /* types.h:179:28 */

type X__ssize_t = int64 /* types.h:181:27 */ // Type of a byte count, or error.

// Signed long type used in system calls.
type X__syscall_slong_t = int64 /* types.h:184:33 */
// Unsigned long type used in system calls.
type X__syscall_ulong_t = uint64 /* types.h:186:33 */

// These few don't really vary by system, they always correspond
//    to one of the other defined types.
type X__loff_t = X__off64_t /* types.h:190:19 */ // Type of file sizes and offsets (LFS).
type X__caddr_t = uintptr   /* types.h:191:14 */

// Duplicates info from stdint.h but this is used in unistd.h.
type X__intptr_t = int64 /* types.h:194:25 */

// Duplicate info from sys/socket.h.
type X__socklen_t = uint32 /* types.h:197:23 */

// C99: An integer type that can be accessed as an atomic entity,
//    even in the presence of asynchronous interrupts.
//    It is not currently necessary for this to be machine-specific.
type X__sig_atomic_t = int32 /* types.h:202:13 */

// wchar_t type related definitions.
//    Copyright (C) 2000-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// The fallback definitions, for when __WCHAR_MAX__ or __WCHAR_MIN__
//    are not defined, give the right value and type as long as both int
//    and wchar_t are 32-bit types.  Adding L'\0' to a constant value
//    ensures that the type is correct; it is necessary to use (L'\0' +
//    0) rather than just L'\0' so that the type in C++ is the promoted
//    version of wchar_t rather than the distinct wchar_t type itself.
//    Because wchar_t in preprocessor #if expressions is treated as
//    intmax_t or uintmax_t, the expression (L'\0' - 1) would have the
//    wrong value for WCHAR_MAX in such expressions and so cannot be used
//    to define __WCHAR_MAX in the unsigned case.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Exact integral types.

// Signed.
// Define intN_t types.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

type Int8_t = X__int8_t   /* stdint-intn.h:24:18 */
type Int16_t = X__int16_t /* stdint-intn.h:25:19 */
type Int32_t = X__int32_t /* stdint-intn.h:26:19 */
type Int64_t = X__int64_t /* stdint-intn.h:27:19 */

// Unsigned.
// Define uintN_t types.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

type Uint8_t = X__uint8_t   /* stdint-uintn.h:24:19 */
type Uint16_t = X__uint16_t /* stdint-uintn.h:25:20 */
type Uint32_t = X__uint32_t /* stdint-uintn.h:26:20 */
type Uint64_t = X__uint64_t /* stdint-uintn.h:27:20 */

// Small types.

// Signed.
type Int_least8_t = int8   /* stdint.h:43:22 */
type Int_least16_t = int16 /* stdint.h:44:20 */
type Int_least32_t = int32 /* stdint.h:45:15 */
type Int_least64_t = int64 /* stdint.h:47:19 */

// Unsigned.
type Uint_least8_t = uint8   /* stdint.h:54:24 */
type Uint_least16_t = uint16 /* stdint.h:55:28 */
type Uint_least32_t = uint32 /* stdint.h:56:23 */
type Uint_least64_t = uint64 /* stdint.h:58:27 */

// Fast types.

// Signed.
type Int_fast8_t = int8   /* stdint.h:68:22 */
type Int_fast16_t = int64 /* stdint.h:70:19 */
type Int_fast32_t = int64 /* stdint.h:71:19 */
type Int_fast64_t = int64 /* stdint.h:72:19 */

// Unsigned.
type Uint_fast8_t = uint8   /* stdint.h:81:24 */
type Uint_fast16_t = uint64 /* stdint.h:83:27 */
type Uint_fast32_t = uint64 /* stdint.h:84:27 */
type Uint_fast64_t = uint64 /* stdint.h:85:27 */

// Types for `void *' pointers.
type Intptr_t = int64   /* stdint.h:97:19 */
type Uintptr_t = uint64 /* stdint.h:100:27 */

// Largest integral types.
type Intmax_t = X__intmax_t   /* stdint.h:111:21 */
type Uintmax_t = X__uintmax_t /* stdint.h:112:22 */

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//     are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// XPG requires a few symbols from <sys/wait.h> being defined.
// Definitions of flag bits for `waitpid' et al.
//    Copyright (C) 1992-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Bits in the third argument to `waitpid'.

// Bits in the fourth argument to `waitid'.

// The following values are used by the `waitid' function.

// The Linux kernel defines these bare, rather than an enum,
//    which causes a conflict if the include order is reversed.

type Idtype_t = uint32 /* waitflags.h:57:3 */
// Definitions of status bits for `wait' et al.
//    Copyright (C) 1992-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Everything extant so far uses these same bits.

// If WIFEXITED(STATUS), the low-order 8 bits of the status.

// If WIFSIGNALED(STATUS), the terminating signal.

// If WIFSTOPPED(STATUS), the signal that stopped the child.

// Nonzero if STATUS indicates normal termination.

// Nonzero if STATUS indicates termination by a signal.

// Nonzero if STATUS indicates the child is stopped.

// Nonzero if STATUS indicates the child continued after a stop.  We only
//    define this if <bits/waitflags.h> provides the WCONTINUED flag bit.

// Nonzero if STATUS indicates the child dumped core.

// Macros for constructing status values.

// Define the macros <sys/wait.h> also would define this way.

// _FloatN API tests for enablement.
// Macros to control TS 18661-3 glibc features on x86.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Defined to 1 if the current compiler invocation provides a
//    floating-point type with the IEEE 754 binary128 format, and this
//    glibc includes corresponding *f128 interfaces for it.  The required
//    libgcc support was added some time after the basic compiler
//    support, for x86_64 and x86.

// Defined to 1 if __HAVE_FLOAT128 is 1 and the type is ABI-distinct
//    from the default float, double and long double types in this glibc.

// Defined to 1 if the current compiler invocation provides a
//    floating-point type with the right format for _Float64x, and this
//    glibc includes corresponding *f64x interfaces for it.

// Defined to 1 if __HAVE_FLOAT64X is 1 and _Float64x has the format
//    of long double.  Otherwise, if __HAVE_FLOAT64X is 1, _Float64x has
//    the format of _Float128, which must be different from that of long
//    double.

// Defined to concatenate the literal suffix to be used with _Float128
//    types, if __HAVE_FLOAT128 is 1.

// Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.

// The remaining of this file provides support for older compilers.

// The type _Float128 exists only since GCC 7.0.

// __builtin_huge_valf128 doesn't exist before GCC 7.0.

// Older GCC has only a subset of built-in functions for _Float128 on
//    x86, and __builtin_infq is not usable in static initializers.
//    Converting a narrower sNaN to _Float128 produces a quiet NaN, so
//    attempts to use _Float128 sNaNs will not work properly with older
//    compilers.

// In math/math.h, __MATH_TG will expand signbit to __builtin_signbit*,
//    e.g.: __builtin_signbitf128, before GCC 6.  However, there has never
//    been a __builtin_signbitf128 in GCC and the type-generic builtin is
//    only available since GCC 6.

// Macros to control TS 18661-3 glibc features where the same
//    definitions are appropriate for all platforms.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Properties of long double type.  ldbl-96 version.
//    Copyright (C) 2016-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License  published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// long double is distinct from double, so there is nothing to
//    define here.

// This header should be included at the bottom of each bits/floatn.h.
//    It defines the following macros for each _FloatN and _FloatNx type,
//    where the same definitions, or definitions based only on the macros
//    in bits/floatn.h, are appropriate for all glibc configurations.

// Defined to 1 if the current compiler invocation provides a
//    floating-point type with the right format for this type, and this
//    glibc includes corresponding *fN or *fNx interfaces for it.

// Defined to 1 if the corresponding __HAVE_<type> macro is 1 and the
//    type is the first with its format in the sequence of (the default
//    choices for) float, double, long double, _Float16, _Float32,
//    _Float64, _Float128, _Float32x, _Float64x, _Float128x for this
//    glibc; that is, if functions present once per floating-point format
//    rather than once per type are present for this type.
//
//    All configurations supported by glibc have _Float32 the same format
//    as float, _Float64 and _Float32x the same format as double, the
//    _Float64x the same format as either long double or _Float128.  No
//    configurations support _Float128x or, as of GCC 7, have compiler
//    support for a type meeting the requirements for _Float128x.

// Defined to 1 if any _FloatN or _FloatNx types that are not
//    ABI-distinct are however distinct types at the C language level (so
//    for the purposes of __builtin_types_compatible_p and _Generic).

// Defined to concatenate the literal suffix to be used with _FloatN
//    or _FloatNx types, if __HAVE_<type> is 1.  The corresponding
//    literal suffixes exist since GCC 7, for C only.

// Defined to a complex type if __HAVE_<type> is 1.

// The remaining of this file provides support for older compilers.

// If double, long double and _Float64 all have the same set of
//    values, TS 18661-3 requires the usual arithmetic conversions on
//    long double and _Float64 to produce _Float64.  For this to be the
//    case when building with a compiler without a distinct _Float64
//    type, _Float64 must be a typedef for long double, not for
//    double.

// Returned by `div'.
type Div_t = struct {
	Quot int32
	Rem  int32
} /* stdlib.h:62:5 */

// Returned by `ldiv'.
type Ldiv_t = struct {
	Quot int64
	Rem  int64
} /* stdlib.h:70:5 */

// Returned by `lldiv'.
type Lldiv_t = struct {
	Quot int64
	Rem  int64
} /* stdlib.h:80:5 */

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

//	POSIX Standard: 2.6 Primitive System Data Types	<sys/types.h>

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

type U_char = X__u_char     /* types.h:33:18 */
type U_short = X__u_short   /* types.h:34:19 */
type U_int = X__u_int       /* types.h:35:17 */
type U_long = X__u_long     /* types.h:36:18 */
type Quad_t = X__quad_t     /* types.h:37:18 */
type U_quad_t = X__u_quad_t /* types.h:38:20 */
type Fsid_t = X__fsid_t     /* types.h:39:18 */

type Loff_t = X__loff_t /* types.h:44:18 */

type Ino_t = X__ino64_t /* types.h:50:19 */

type Dev_t = X__dev_t /* types.h:60:17 */

type Gid_t = X__gid_t /* types.h:65:17 */

type Mode_t = X__mode_t /* types.h:70:18 */

type Nlink_t = X__nlink_t /* types.h:75:19 */

type Uid_t = X__uid_t /* types.h:80:17 */

type Off_t = X__off64_t /* types.h:88:19 */

type Pid_t = X__pid_t /* types.h:98:17 */

type Id_t = X__id_t /* types.h:104:16 */

type Ssize_t = X__ssize_t /* types.h:109:19 */

type Daddr_t = X__daddr_t /* types.h:115:19 */
type Caddr_t = X__caddr_t /* types.h:116:19 */

type Key_t = X__key_t /* types.h:122:17 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Returned by `clock'.
type Clock_t = X__clock_t /* clock_t.h:7:19 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Clock ID used in clock and timer functions.
type Clockid_t = X__clockid_t /* clockid_t.h:7:21 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Returned by `time'.
type Time_t = X__time_t /* time_t.h:7:18 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Timer ID returned by `timer_create'.
type Timer_t = X__timer_t /* timer_t.h:7:19 */

// Copyright (C) 1989-2017 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//    wants us just to define one data type.  So don't define
//    the symbols that indicate this file's entire job has been done.

// This avoids lossage on SunOS but only if stdtypes.h comes first.
//    There's no way to win with the other order!  Sun lossage.

// On 4.3bsd-net2, make sure ansi.h is included, so we have
//    one less case to deal with in the following.
// On FreeBSD 5, machine/ansi.h does not exist anymore...

// In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
//    defined if the corresponding type is *not* defined.
//    FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
//    NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//    Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//    _TYPE_size_t which will typedef size_t.  fixincludes patched the
//    vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//    not defined, and so that defining this macro defines _GCC_SIZE_T.
//    If we find that the macros are still defined at this point, we must
//    invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//    GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//    __WCHAR_TYPE__ have reasonable values.  This can happen if the
//    parts of GCC is compiled by an older compiler, that actually
//    include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Wide character type.
//    Locale-writers should change this as necessary to
//    be big enough to hold unique values not between 0 and 127,
//    and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//     are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// Old compatibility names for C types.
type Ulong = uint64  /* types.h:149:27 */
type Ushort = uint16 /* types.h:150:28 */
type Uint = uint32   /* types.h:151:22 */

// These size-specific names are used by some of the inet code.

// Define intN_t types.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// For GCC 2.7 and later, we can use specific type-size attributes.

type U_int8_t = uint32  /* types.h:178:1 */
type U_int16_t = uint32 /* types.h:179:1 */
type U_int32_t = uint32 /* types.h:180:1 */
type U_int64_t = uint32 /* types.h:181:1 */

type Register_t = int32 /* types.h:183:13 */

// It also defines `fd_set' and the FD_* macros for `select'.
// `fd_set' type and related macros, and `select'/`pselect' declarations.
//    Copyright (C) 1996-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

//	POSIX 1003.1g: 6.2 Select from File Descriptor Sets <sys/select.h>

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Get definition of needed basic types.
// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Get __FD_* definitions.
// Copyright (C) 1997-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Get sigset_t.

type X__sigset_t = struct{ X__val [16]uint64 } /* __sigset_t.h:8:3 */

// A set of signals to be blocked, unblocked, or waited for.
type Sigset_t = X__sigset_t /* sigset_t.h:7:20 */

// Get definition of timer specification structures.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// A time value that is accurate to the nearest
//    microsecond but also has a range of years.
type Stimeval = struct {
	Tv_sec  X__time_t
	Tv_usec X__suseconds_t
} /* struct_timeval.h:8:1 */

// NB: Include guard matches what <linux/time.h> uses.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// POSIX.1b structure for a time value.  This is like a `struct timeval' but
//    has nanoseconds instead of microseconds.
type Stimespec = struct {
	Tv_sec  X__time_t
	Tv_nsec X__syscall_slong_t
} /* struct_timespec.h:9:1 */

type Suseconds_t = X__suseconds_t /* select.h:43:23 */

// The fd_set member is required to be an array of longs.
type X__fd_mask = int64 /* select.h:49:18 */

// Some versions of <linux/posix_types.h> define this macros.
// It's easier to assume 8-bit bytes than to get CHAR_BIT.

// fd_set for select and pselect.
type Fd_set = struct{ X__fds_bits [16]X__fd_mask } /* select.h:70:5 */

// Maximum number of file descriptors in `fd_set'.

// Sometimes the fd_set member is assumed to have this type.
type Fd_mask = X__fd_mask /* select.h:77:19 */

type Blksize_t = X__blksize_t /* types.h:212:21 */

// Types from the Large File Support interface.
type Blkcnt_t = X__blkcnt64_t     /* types.h:232:22 */ // Type to count number of disk blocks.
type Fsblkcnt_t = X__fsblkcnt64_t /* types.h:236:24 */ // Type to count file system blocks.
type Fsfilcnt_t = X__fsfilcnt64_t /* types.h:240:24 */ // Type to count file system inodes.

// Now add the thread types.
// Declaration of common pthread types for all architectures.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// For internal mutex and condition variable definitions.
// Common threading primitives definitions for both POSIX and C11.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Arch-specific definitions.  Each architecture must define the following
//    macros to define the expected sizes of pthread data types:
//
//    __SIZEOF_PTHREAD_ATTR_T        - size of pthread_attr_t.
//    __SIZEOF_PTHREAD_MUTEX_T       - size of pthread_mutex_t.
//    __SIZEOF_PTHREAD_MUTEXATTR_T   - size of pthread_mutexattr_t.
//    __SIZEOF_PTHREAD_COND_T        - size of pthread_cond_t.
//    __SIZEOF_PTHREAD_CONDATTR_T    - size of pthread_condattr_t.
//    __SIZEOF_PTHREAD_RWLOCK_T      - size of pthread_rwlock_t.
//    __SIZEOF_PTHREAD_RWLOCKATTR_T  - size of pthread_rwlockattr_t.
//    __SIZEOF_PTHREAD_BARRIER_T     - size of pthread_barrier_t.
//    __SIZEOF_PTHREAD_BARRIERATTR_T - size of pthread_barrierattr_t.
//
//    Also, the following macros must be define for internal pthread_mutex_t
//    struct definitions (struct __pthread_mutex_s):
//
//    __PTHREAD_COMPAT_PADDING_MID   - any additional members after 'kind'
// 				    and before '__spin' (for 64 bits) or
// 				    '__nusers' (for 32 bits).
//    __PTHREAD_COMPAT_PADDING_END   - any additional members at the end of
// 				    the internal structure.
//    __PTHREAD_MUTEX_LOCK_ELISION   - 1 if the architecture supports lock
// 				    elision or 0 otherwise.
//    __PTHREAD_MUTEX_NUSERS_AFTER_KIND - control where to put __nusers.  The
// 				       preferred value for new architectures
// 				       is 0.
//    __PTHREAD_MUTEX_USE_UNION      - control whether internal __spins and
// 				    __list will be place inside a union for
// 				    linuxthreads compatibility.
// 				    The preferred value for new architectures
// 				    is 0.
//
//    For a new port the preferred values for the required defines are:
//
//    #define __PTHREAD_COMPAT_PADDING_MID
//    #define __PTHREAD_COMPAT_PADDING_END
//    #define __PTHREAD_MUTEX_LOCK_ELISION         0
//    #define __PTHREAD_MUTEX_NUSERS_AFTER_KIND    0
//    #define __PTHREAD_MUTEX_USE_UNION            0
//
//    __PTHREAD_MUTEX_LOCK_ELISION can be set to 1 if the hardware plans to
//    eventually support lock elision using transactional memory.
//
//    The additional macro defines any constraint for the lock alignment
//    inside the thread structures:
//
//    __LOCK_ALIGNMENT - for internal lock/futex usage.
//
//    Same idea but for the once locking primitive:
//
//    __ONCE_ALIGNMENT - for pthread_once_t/once_flag definition.
//
//    And finally the internal pthread_rwlock_t (struct __pthread_rwlock_arch_t)
//    must be defined.
//
// Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Definitions for internal mutex struct.

type S__pthread_rwlock_arch_t = struct {
	X__readers       uint32
	X__writers       uint32
	X__wrphase_futex uint32
	X__writers_futex uint32
	X__pad3          uint32
	X__pad4          uint32
	X__cur_writer    int32
	X__shared        int32
	X__rwelision     int8
	X__pad1          [7]uint8
	X__pad2          uint64
	X__flags         uint32
	__ccgo_pad1      [4]byte
} /* pthreadtypes-arch.h:65:1 */

// Common definition of pthread_mutex_t.

type S__pthread_internal_list = struct {
	X__prev uintptr
	X__next uintptr
} /* thread-shared-types.h:82:9 */

// Common definition of pthread_mutex_t.

type X__pthread_list_t = S__pthread_internal_list /* thread-shared-types.h:86:3 */

// Lock elision support.

type S__pthread_mutex_s = struct {
	X__lock    int32
	X__count   uint32
	X__owner   int32
	X__nusers  uint32
	X__kind    int32
	X__spins   int16
	X__elision int16
	X__list    X__pthread_list_t
} /* thread-shared-types.h:118:1 */

// Common definition of pthread_cond_t.

type S__pthread_cond_s = struct {
	X__0            struct{ X__wseq uint64 }
	X__8            struct{ X__g1_start uint64 }
	X__g_refs       [2]uint32
	X__g_size       [2]uint32
	X__g1_orig_size uint32
	X__wrefs        uint32
	X__g_signals    [2]uint32
} /* thread-shared-types.h:171:1 */

// Thread identifiers.  The structure of the attribute type is not
//    exposed on purpose.
type Pthread_t = uint64 /* pthreadtypes.h:27:27 */

// Data structures for mutex handling.  The structure of the attribute
//    type is not exposed on purpose.
type Pthread_mutexattr_t = struct {
	_       [0]uint32
	X__size [4]int8
} /* pthreadtypes.h:36:3 */

// Data structure for condition variable handling.  The structure of
//    the attribute type is not exposed on purpose.
type Pthread_condattr_t = struct {
	_       [0]uint32
	X__size [4]int8
} /* pthreadtypes.h:45:3 */

// Keys for thread-specific data
type Pthread_key_t = uint32 /* pthreadtypes.h:49:22 */

// Once-only execution
type Pthread_once_t = int32 /* pthreadtypes.h:53:30 */

type Spthread_attr_t = struct {
	_       [0]uint64
	X__size [56]int8
} /* pthreadtypes.h:56:1 */

type Pthread_attr_t = Spthread_attr_t /* pthreadtypes.h:62:30 */

type Pthread_mutex_t = struct{ X__data S__pthread_mutex_s } /* pthreadtypes.h:72:3 */

type Pthread_cond_t = struct{ X__data S__pthread_cond_s } /* pthreadtypes.h:80:3 */

// Data structure for reader-writer lock variable handling.  The
//    structure of the attribute type is deliberately not exposed.
type Pthread_rwlock_t = struct{ X__data S__pthread_rwlock_arch_t } /* pthreadtypes.h:91:3 */

type Pthread_rwlockattr_t = struct {
	_       [0]uint64
	X__size [8]int8
} /* pthreadtypes.h:97:3 */

// POSIX spinlock data type.
type Pthread_spinlock_t = int32 /* pthreadtypes.h:103:22 */

// POSIX barriers data type.  The structure of the type is
//    deliberately not exposed.
type Pthread_barrier_t = struct {
	_       [0]uint64
	X__size [32]int8
} /* pthreadtypes.h:112:3 */

type Pthread_barrierattr_t = struct {
	_       [0]uint32
	X__size [4]int8
} /* pthreadtypes.h:118:3 */

// Reentrant versions of the `random' family of functions.
//    These functions all use the following data structure to contain
//    state, rather than global state variables.

type Srandom_data = struct {
	Fptr        uintptr
	Rptr        uintptr
	State       uintptr
	Rand_type   int32
	Rand_deg    int32
	Rand_sep    int32
	__ccgo_pad1 [4]byte
	End_ptr     uintptr
} /* stdlib.h:423:1 */

// Data structure for communication with thread safe versions.  This
//    type is to be regarded as opaque.  It's only exported because users
//    have to allocate objects of this type.
type Sdrand48_data = struct {
	X__x     [3]uint16
	X__old_x [3]uint16
	X__c     uint16
	X__init  uint16
	X__a     uint64
} /* stdlib.h:490:1 */

// Shorthand for type of comparison functions.
type X__compar_fn_t = uintptr /* stdlib.h:805:13 */

// Floating-point inline functions for stdlib.h.
//    Copyright (C) 2012-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Define some macros helping to catch buffer overflows.

type TSStateId = Uint16_t /* parser.h:16:18 */

type TSSymbol = Uint16_t  /* parser.h:19:18 */
type TSFieldId = Uint16_t /* parser.h:20:18 */
type STSLanguage = struct {
	Version                   Uint32_t
	Symbol_count              Uint32_t
	Alias_count               Uint32_t
	Token_count               Uint32_t
	External_token_count      Uint32_t
	State_count               Uint32_t
	Large_state_count         Uint32_t
	Production_id_count       Uint32_t
	Field_count               Uint32_t
	Max_alias_sequence_length Uint16_t
	__ccgo_pad1               [2]byte
	Parse_table               uintptr
	Small_parse_table         uintptr
	Small_parse_table_map     uintptr
	Parse_actions             uintptr
	Symbol_names              uintptr
	Field_names               uintptr
	Field_map_slices          uintptr
	Field_map_entries         uintptr
	Symbol_metadata           uintptr
	Public_symbol_map         uintptr
	Alias_map                 uintptr
	Alias_sequences           uintptr
	Lex_modes                 uintptr
	Lex_fn                    uintptr
	Keyword_lex_fn            uintptr
	Keyword_capture_token     TSSymbol
	__ccgo_pad2               [6]byte
	External_scanner          struct {
		States      uintptr
		Symbol_map  uintptr
		Create      uintptr
		Destroy     uintptr
		Scan        uintptr
		Serialize   uintptr
		Deserialize uintptr
	}
} /* parser.h:21:9 */

type TSLanguage = STSLanguage /* parser.h:21:27 */

type TSFieldMapEntry = struct {
	Field_id    TSFieldId
	Child_index Uint8_t
	Inherited   uint8
} /* parser.h:28:3 */

type TSFieldMapSlice = struct {
	Index  Uint16_t
	Length Uint16_t
} /* parser.h:33:3 */

type TSSymbolMetadata = struct {
	Visible   uint8
	Named     uint8
	Supertype uint8
} /* parser.h:39:3 */

type STSLexer = struct {
	Lookahead                  Int32_t
	Result_symbol              TSSymbol
	__ccgo_pad1                [2]byte
	Advance                    uintptr
	Mark_end                   uintptr
	Get_column                 uintptr
	Is_at_included_range_start uintptr
	Eof                        uintptr
} /* parser.h:41:9 */

type TSLexer = STSLexer /* parser.h:41:24 */

type TSParseActionType = uint32 /* parser.h:58:3 */

type TSParseAction = struct {
	Shift struct {
		Type        Uint8_t
		__ccgo_pad1 [1]byte
		State       TSStateId
		Extra       uint8
		Repetition  uint8
	}
	_ [2]byte
} /* parser.h:75:3 */

type TSLexMode = struct {
	Lex_state          Uint16_t
	External_lex_state Uint16_t
} /* parser.h:80:3 */

type TSParseActionEntry = struct{ Action TSParseAction } /* parser.h:88:3 */

var ts_symbol_names = [227]uintptr{ts /* "end" */, ts + 4 /* "identifier" */, ts + 15 /* "import" */, ts + 22 /* "." */, ts + 24 /* "from" */, ts + 29 /* "__future__" */, ts + 40 /* "(" */, ts + 42 /* ")" */, ts + 44 /* "," */, ts + 46 /* "as" */, ts + 49 /* "*" */, ts + 51 /* "print" */, ts + 57 /* ">>" */, ts + 60 /* "assert" */, ts + 67 /* ":=" */, ts + 70 /* "return" */, ts + 77 /* "del" */, ts + 81 /* "raise" */, ts + 87 /* "pass" */, ts + 92 /* "break" */, ts + 98 /* "continue" */, ts + 107 /* "if" */, ts + 110 /* ":" */, ts + 112 /* "elif" */, ts + 117 /* "else" */, ts + 122 /* "async" */, ts + 128 /* "for" */, ts + 132 /* "in" */, ts + 135 /* "while" */, ts + 141 /* "try" */, ts + 145 /* "except" */, ts + 152 /* "finally" */, ts + 160 /* "with" */, ts + 165 /* "def" */, ts + 169 /* "->" */, ts + 172 /* "**" */, ts + 175 /* "global" */, ts + 182 /* "nonlocal" */, ts + 191 /* "exec" */, ts + 196 /* "class" */, ts + 202 /* "@" */, ts + 204 /* "[" */, ts + 206 /* "]" */, ts + 208 /* "=" */, ts + 210 /* "not" */, ts + 214 /* "and" */, ts + 218 /* "or" */, ts + 221 /* "+" */, ts + 223 /* "-" */, ts + 225 /* "/" */, ts + 227 /* "%" */, ts + 229 /* "//" */, ts + 232 /* "|" */, ts + 234 /* "&" */, ts + 236 /* "^" */, ts + 238 /* "<<" */, ts + 241 /* "~" */, ts + 243 /* "<" */, ts + 245 /* "<=" */, ts + 248 /* "==" */, ts + 251 /* "!=" */, ts + 254 /* ">=" */, ts + 257 /* ">" */, ts + 259 /* "<>" */, ts + 262 /* "is" */, ts + 265 /* "lambda" */, ts + 272 /* "+=" */, ts + 275 /* "-=" */, ts + 278 /* "*=" */, ts + 281 /* "/=" */, ts + 284 /* "@=" */, ts + 287 /* "//=" */, ts + 291 /* "%=" */, ts + 294 /* "**=" */, ts + 298 /* ">>=" */, ts + 302 /* "<<=" */, ts + 306 /* "&=" */, ts + 309 /* "^=" */, ts + 312 /* "|=" */, ts + 315 /* "yield" */, ts + 321 /* "ellipsis" */, ts + 330 /* "{" */, ts + 332 /* "}" */, ts + 334 /* "escape_sequence" */, ts + 350 /* "_not_escape_sequ..." */, ts + 371 /* "format_specifier..." */, ts + 395 /* "type_conversion" */, ts + 411 /* "integer" */, ts + 419 /* "float" */, ts + 425 /* "await" */, ts + 431 /* "true" */, ts + 436 /* "false" */, ts + 442 /* "none" */, ts + 447 /* "comment" */, ts + 455 /* "_semicolon" */, ts + 466 /* "_newline" */, ts + 475 /* "_indent" */, ts + 483 /* "_dedent" */, ts + 491 /* "\"" */, ts + 493 /* "_string_content" */, ts + 491 /* "\"" */, ts + 509 /* "module" */, ts + 516 /* "_statement" */, ts + 527 /* "_simple_statemen..." */, ts + 546 /* "import_statement" */, ts + 563 /* "import_prefix" */, ts + 577 /* "relative_import" */, ts + 593 /* "future_import_st..." */, ts + 617 /* "import_from_stat..." */, ts + 639 /* "_import_list" */, ts + 652 /* "aliased_import" */, ts + 667 /* "wildcard_import" */, ts + 683 /* "print_statement" */, ts + 699 /* "chevron" */, ts + 707 /* "assert_statement" */, ts + 724 /* "expression_state..." */, ts + 745 /* "named_expression" */, ts + 762 /* "return_statement" */, ts + 779 /* "delete_statement" */, ts + 796 /* "raise_statement" */, ts + 812 /* "pass_statement" */, ts + 827 /* "break_statement" */, ts + 843 /* "continue_stateme..." */, ts + 862 /* "if_statement" */, ts + 875 /* "elif_clause" */, ts + 887 /* "else_clause" */, ts + 899 /* "for_statement" */, ts + 913 /* "while_statement" */, ts + 929 /* "try_statement" */, ts + 943 /* "except_clause" */, ts + 957 /* "finally_clause" */, ts + 972 /* "with_statement" */, ts + 987 /* "with_clause" */, ts + 999 /* "with_item" */, ts + 1009 /* "function_definit..." */, ts + 1029 /* "parameters" */, ts + 1040 /* "lambda_parameter..." */, ts + 1058 /* "list_splat" */, ts + 1069 /* "dictionary_splat" */, ts + 1086 /* "global_statement" */, ts + 1103 /* "nonlocal_stateme..." */, ts + 1122 /* "exec_statement" */, ts + 1137 /* "class_definition" */, ts + 1154 /* "parenthesized_li..." */, ts + 1179 /* "argument_list" */, ts + 1193 /* "decorated_defini..." */, ts + 1214 /* "decorator" */, ts + 1224 /* "block" */, ts + 1230 /* "expression_list" */, ts + 1246 /* "dotted_name" */, ts + 1258 /* "_parameters" */, ts + 1270 /* "_patterns" */, ts + 1280 /* "parameter" */, ts + 1290 /* "pattern" */, ts + 1298 /* "tuple_pattern" */, ts + 1312 /* "list_pattern" */, ts + 1325 /* "default_paramete..." */, ts + 1343 /* "typed_default_pa..." */, ts + 1367 /* "list_splat_patte..." */, ts + 1386 /* "dictionary_splat..." */, ts + 1411 /* "_expression_with..." */, ts + 1444 /* "expression" */, ts + 1455 /* "primary_expressi..." */, ts + 1474 /* "not_operator" */, ts + 1487 /* "boolean_operator" */, ts + 1504 /* "binary_operator" */, ts + 1520 /* "unary_operator" */, ts + 1535 /* "comparison_opera..." */, ts + 265 /* "lambda" */, ts + 265 /* "lambda" */, ts + 1555 /* "assignment" */, ts + 1566 /* "augmented_assign..." */, ts + 1587 /* "pattern_list" */, ts + 1600 /* "_right_hand_side" */, ts + 315 /* "yield" */, ts + 1617 /* "attribute" */, ts + 1627 /* "subscript" */, ts + 1637 /* "slice" */, ts + 1643 /* "call" */, ts + 1648 /* "typed_parameter" */, ts + 1664 /* "type" */, ts + 1669 /* "keyword_argument" */, ts + 1686 /* "list" */, ts + 1691 /* "set" */, ts + 1695 /* "tuple" */, ts + 1701 /* "dictionary" */, ts + 1712 /* "pair" */, ts + 1717 /* "list_comprehensi..." */, ts + 1736 /* "dictionary_compr..." */, ts + 1761 /* "set_comprehensio..." */, ts + 1779 /* "generator_expres..." */, ts + 1800 /* "_comprehension_c..." */, ts + 1823 /* "parenthesized_ex..." */, ts + 1848 /* "_collection_elem..." */, ts + 1869 /* "for_in_clause" */, ts + 1883 /* "if_clause" */, ts + 1893 /* "conditional_expr..." */, ts + 1916 /* "concatenated_str..." */, ts + 1936 /* "string" */, ts + 1943 /* "interpolation" */, ts + 1957 /* "format_specifier" */, ts + 1974 /* "format_expressio..." */, ts + 425 /* "await" */, ts + 1992 /* "module_repeat1" */, ts + 2007 /* "_simple_statemen..." */, ts + 2034 /* "import_prefix_re..." */, ts + 2056 /* "_import_list_rep..." */, ts + 2077 /* "print_statement_..." */, ts + 2101 /* "assert_statement..." */, ts + 2126 /* "if_statement_rep..." */, ts + 2147 /* "try_statement_re..." */, ts + 2169 /* "with_clause_repe..." */, ts + 2189 /* "global_statement..." */, ts + 2214 /* "argument_list_re..." */, ts + 2236 /* "decorated_defini..." */, ts + 2265 /* "dotted_name_repe..." */, ts + 2285 /* "_parameters_repe..." */, ts + 2305 /* "_patterns_repeat..." */, ts + 2323 /* "comparison_opera..." */, ts + 2351 /* "subscript_repeat..." */, ts + 2369 /* "dictionary_repea..." */, ts + 2388 /* "_comprehension_c..." */, ts + 2419 /* "_collection_elem..." */, ts + 2448 /* "for_in_clause_re..." */, ts + 2470 /* "concatenated_str..." */, ts + 2498 /* "string_repeat1" */, ts + 2513 /* "format_specifier..." */} /* parser.c:248:19 */

var ts_symbol_map = [227]TSSymbol{TSSymbol(Ts_builtin_sym_end), Sym_identifier, Anon_sym_import, Anon_sym_DOT, Anon_sym_from, Anon_sym___future__, Anon_sym_LPAREN, Anon_sym_RPAREN, Anon_sym_COMMA, Anon_sym_as, Anon_sym_STAR, Anon_sym_print, Anon_sym_GT_GT, Anon_sym_assert, Anon_sym_COLON_EQ, Anon_sym_return, Anon_sym_del, Anon_sym_raise, Anon_sym_pass, Anon_sym_break, Anon_sym_continue, Anon_sym_if, Anon_sym_COLON, Anon_sym_elif, Anon_sym_else, Anon_sym_async, Anon_sym_for, Anon_sym_in, Anon_sym_while, Anon_sym_try, Anon_sym_except, Anon_sym_finally, Anon_sym_with, Anon_sym_def, Anon_sym_DASH_GT, Anon_sym_STAR_STAR, Anon_sym_global, Anon_sym_nonlocal, Anon_sym_exec, Anon_sym_class, Anon_sym_AT, Anon_sym_LBRACK, Anon_sym_RBRACK, Anon_sym_EQ, Anon_sym_not, Anon_sym_and, Anon_sym_or, Anon_sym_PLUS, Anon_sym_DASH, Anon_sym_SLASH, Anon_sym_PERCENT, Anon_sym_SLASH_SLASH, Anon_sym_PIPE, Anon_sym_AMP, Anon_sym_CARET, Anon_sym_LT_LT, Anon_sym_TILDE, Anon_sym_LT, Anon_sym_LT_EQ, Anon_sym_EQ_EQ, Anon_sym_BANG_EQ, Anon_sym_GT_EQ, Anon_sym_GT, Anon_sym_LT_GT, Anon_sym_is, Anon_sym_lambda, Anon_sym_PLUS_EQ, Anon_sym_DASH_EQ, Anon_sym_STAR_EQ, Anon_sym_SLASH_EQ, Anon_sym_AT_EQ, Anon_sym_SLASH_SLASH_EQ, Anon_sym_PERCENT_EQ, Anon_sym_STAR_STAR_EQ, Anon_sym_GT_GT_EQ, Anon_sym_LT_LT_EQ, Anon_sym_AMP_EQ, Anon_sym_CARET_EQ, Anon_sym_PIPE_EQ, Anon_sym_yield, Sym_ellipsis, Anon_sym_LBRACE, Anon_sym_RBRACE, Sym_escape_sequence, Sym__not_escape_sequence, Aux_sym_format_specifier_token1, Sym_type_conversion, Sym_integer, Sym_float, Anon_sym_await, Sym_true, Sym_false, Sym_none, Sym_comment, Sym__semicolon, Sym__newline, Sym__indent, Sym__dedent, Sym__string_start, Sym__string_content, Sym__string_start, Sym_module, Sym__statement, Sym__simple_statements, Sym_import_statement, Sym_import_prefix, Sym_relative_import, Sym_future_import_statement, Sym_import_from_statement, Sym__import_list, Sym_aliased_import, Sym_wildcard_import, Sym_print_statement, Sym_chevron, Sym_assert_statement, Sym_expression_statement, Sym_named_expression, Sym_return_statement, Sym_delete_statement, Sym_raise_statement, Sym_pass_statement, Sym_break_statement, Sym_continue_statement, Sym_if_statement, Sym_elif_clause, Sym_else_clause, Sym_for_statement, Sym_while_statement, Sym_try_statement, Sym_except_clause, Sym_finally_clause, Sym_with_statement, Sym_with_clause, Sym_with_item, Sym_function_definition, Sym_parameters, Sym_lambda_parameters, Sym_list_splat, Sym_dictionary_splat, Sym_global_statement, Sym_nonlocal_statement, Sym_exec_statement, Sym_class_definition, Sym_parenthesized_list_splat, Sym_argument_list, Sym_decorated_definition, Sym_decorator, Sym_block, Sym_expression_list, Sym_dotted_name, Sym__parameters, Sym__patterns, Sym_parameter, Sym_pattern, Sym_tuple_pattern, Sym_list_pattern, Sym_default_parameter, Sym_typed_default_parameter, Sym_list_splat_pattern, Sym_dictionary_splat_pattern, Sym__expression_within_for_in_clause, Sym_expression, Sym_primary_expression, Sym_not_operator, Sym_boolean_operator, Sym_binary_operator, Sym_unary_operator, Sym_comparison_operator, Sym_lambda, Sym_lambda, Sym_assignment, Sym_augmented_assignment, Sym_pattern_list, Sym__right_hand_side, Sym_yield, Sym_attribute, Sym_subscript, Sym_slice, Sym_call, Sym_typed_parameter, Sym_type, Sym_keyword_argument, Sym_list, Sym_set, Sym_tuple, Sym_dictionary, Sym_pair, Sym_list_comprehension, Sym_dictionary_comprehension, Sym_set_comprehension, Sym_generator_expression, Sym__comprehension_clauses, Sym_parenthesized_expression, Sym__collection_elements, Sym_for_in_clause, Sym_if_clause, Sym_conditional_expression, Sym_concatenated_string, Sym_string, Sym_interpolation, Sym_format_specifier, Sym_format_expression, Sym_await, Aux_sym_module_repeat1, Aux_sym__simple_statements_repeat1, Aux_sym_import_prefix_repeat1, Aux_sym__import_list_repeat1, Aux_sym_print_statement_repeat1, Aux_sym_assert_statement_repeat1, Aux_sym_if_statement_repeat1, Aux_sym_try_statement_repeat1, Aux_sym_with_clause_repeat1, Aux_sym_global_statement_repeat1, Aux_sym_argument_list_repeat1, Aux_sym_decorated_definition_repeat1, Aux_sym_dotted_name_repeat1, Aux_sym__parameters_repeat1, Aux_sym__patterns_repeat1, Aux_sym_comparison_operator_repeat1, Aux_sym_subscript_repeat1, Aux_sym_dictionary_repeat1, Aux_sym__comprehension_clauses_repeat1, Aux_sym__collection_elements_repeat1, Aux_sym_for_in_clause_repeat1, Aux_sym_concatenated_string_repeat1, Aux_sym_string_repeat1, Aux_sym_format_specifier_repeat1} /* parser.c:478:17 */

var ts_symbol_metadata = [227]TSSymbolMetadata{{Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True)}, {}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True)}, {Named: uint8(True)}, {Named: uint8(True)}, {Named: uint8(True)}, {Visible: uint8(True)}, {Named: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True)}, {Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True)}, {Named: uint8(True)}, {Named: uint8(True), Supertype: uint8(True)}, {Named: uint8(True), Supertype: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True)}, {Named: uint8(True), Supertype: uint8(True)}, {Named: uint8(True), Supertype: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
} /* parser.c:708:31 */

var ts_field_names = [26]uintptr{uintptr(0), ts + 2538 /* "alias" */, ts + 2544 /* "alternative" */, ts + 2556 /* "argument" */, ts + 2565 /* "arguments" */, ts + 1617 /* "attribute" */, ts + 2575 /* "body" */, ts + 2580 /* "cause" */, ts + 2586 /* "code" */, ts + 2591 /* "condition" */, ts + 2601 /* "consequence" */, ts + 2613 /* "definition" */, ts + 2624 /* "function" */, ts + 2633 /* "key" */, ts + 2637 /* "left" */, ts + 2642 /* "module_name" */, ts + 2654 /* "name" */, ts + 2659 /* "object" */, ts + 2666 /* "operator" */, ts + 1029 /* "parameters" */, ts + 2675 /* "return_type" */, ts + 2687 /* "right" */, ts + 1627 /* "subscript" */, ts + 2693 /* "superclasses" */, ts + 1664 /* "type" */, ts + 2706 /* "value" */} /* parser.c:1651:19 */

var ts_field_map_slices = [91]TSFieldMapSlice{2: {Length: Uint16_t(1)}, 3: {Index: Uint16_t(1), Length: Uint16_t(1)}, 5: {Index: Uint16_t(2), Length: Uint16_t(1)}, 6: {Index: Uint16_t(3), Length: Uint16_t(1)}, 7: {Index: Uint16_t(4), Length: Uint16_t(1)}, 8: {Index: Uint16_t(5), Length: Uint16_t(2)}, 10: {Index: Uint16_t(7), Length: Uint16_t(2)}, 11: {Index: Uint16_t(9), Length: Uint16_t(1)}, 12: {Index: Uint16_t(10), Length: Uint16_t(2)}, 13: {Index: Uint16_t(12), Length: Uint16_t(1)}, 14: {Index: Uint16_t(13), Length: Uint16_t(2)}, 15: {Index: Uint16_t(15), Length: Uint16_t(1)}, 16: {Index: Uint16_t(16), Length: Uint16_t(1)}, 17: {Index: Uint16_t(17), Length: Uint16_t(2)}, 18: {Index: Uint16_t(19), Length: Uint16_t(2)}, 19: {Index: Uint16_t(21), Length: Uint16_t(2)}, 20: {Index: Uint16_t(23), Length: Uint16_t(3)}, 21: {Index: Uint16_t(26), Length: Uint16_t(2)}, 22: {Index: Uint16_t(28), Length: Uint16_t(1)}, 23: {Index: Uint16_t(29), Length: Uint16_t(2)}, 24: {Index: Uint16_t(31), Length: Uint16_t(2)}, 25: {Index: Uint16_t(33), Length: Uint16_t(1)}, 26: {Index: Uint16_t(34), Length: Uint16_t(2)}, 28: {Index: Uint16_t(36), Length: Uint16_t(1)}, 29: {Index: Uint16_t(37), Length: Uint16_t(2)}, 30: {Index: Uint16_t(39), Length: Uint16_t(1)}, 31: {Index: Uint16_t(40), Length: Uint16_t(2)}, 32: {Index: Uint16_t(42), Length: Uint16_t(2)}, 33: {Index: Uint16_t(16), Length: Uint16_t(1)}, 34: {Index: Uint16_t(44), Length: Uint16_t(1)}, 35: {Index: Uint16_t(45), Length: Uint16_t(2)}, 36: {Index: Uint16_t(47), Length: Uint16_t(2)}, 37: {Index: Uint16_t(49), Length: Uint16_t(1)}, 38: {Index: Uint16_t(50), Length: Uint16_t(2)}, 39: {Index: Uint16_t(52), Length: Uint16_t(2)}, 40: {Index: Uint16_t(54), Length: Uint16_t(2)}, 41: {Index: Uint16_t(56), Length: Uint16_t(1)}, 42: {Index: Uint16_t(57), Length: Uint16_t(3)}, 43: {Index: Uint16_t(60), Length: Uint16_t(3)}, 44: {Index: Uint16_t(63), Length: Uint16_t(3)}, 45: {Index: Uint16_t(66), Length: Uint16_t(1)}, 46: {Index: Uint16_t(67), Length: Uint16_t(3)}, 47: {Index: Uint16_t(70), Length: Uint16_t(3)}, 48: {Index: Uint16_t(73), Length: Uint16_t(2)}, 49: {Index: Uint16_t(75), Length: Uint16_t(2)}, 50: {Index: Uint16_t(77), Length: Uint16_t(3)}, 51: {Index: Uint16_t(80), Length: Uint16_t(3)}, 52: {Index: Uint16_t(83), Length: Uint16_t(3)}, 53: {Index: Uint16_t(86), Length: Uint16_t(3)}, 54: {Index: Uint16_t(17), Length: Uint16_t(2)}, 55: {Index: Uint16_t(89), Length: Uint16_t(1)}, 56: {Index: Uint16_t(90), Length: Uint16_t(2)}, 57: {Index: Uint16_t(92), Length: Uint16_t(1)}, 58: {Index: Uint16_t(93), Length: Uint16_t(2)}, 59: {Index: Uint16_t(95), Length: Uint16_t(2)}, 60: {Index: Uint16_t(97), Length: Uint16_t(4)}, 61: {Index: Uint16_t(101), Length: Uint16_t(2)}, 62: {Index: Uint16_t(103), Length: Uint16_t(4)}, 63: {Index: Uint16_t(107), Length: Uint16_t(4)}, 64: {Index: Uint16_t(111), Length: Uint16_t(2)}, 65: {Index: Uint16_t(113), Length: Uint16_t(3)}, 66: {Index: Uint16_t(116), Length: Uint16_t(3)}, 67: {Index: Uint16_t(119), Length: Uint16_t(4)}, 69: {Index: Uint16_t(123), Length: Uint16_t(4)}, 70: {Index: Uint16_t(127), Length: Uint16_t(4)}, 71: {Index: Uint16_t(131), Length: Uint16_t(3)}, 72: {Index: Uint16_t(134), Length: Uint16_t(3)}, 73: {Index: Uint16_t(137), Length: Uint16_t(2)}, 74: {Index: Uint16_t(139), Length: Uint16_t(3)}, 75: {Index: Uint16_t(142), Length: Uint16_t(5)}, 76: {Index: Uint16_t(147), Length: Uint16_t(3)}, 77: {Index: Uint16_t(150), Length: Uint16_t(4)}, 78: {Index: Uint16_t(154), Length: Uint16_t(4)}, 79: {Index: Uint16_t(158), Length: Uint16_t(4)}, 81: {Index: Uint16_t(162), Length: Uint16_t(4)}, 82: {Index: Uint16_t(166), Length: Uint16_t(3)}, 83: {Index: Uint16_t(169), Length: Uint16_t(4)}, 84: {Index: Uint16_t(173), Length: Uint16_t(4)}, 85: {Index: Uint16_t(177), Length: Uint16_t(4)}, 86: {Index: Uint16_t(181), Length: Uint16_t(5)}, 87: {Index: Uint16_t(186), Length: Uint16_t(5)}, 88: {Index: Uint16_t(191), Length: Uint16_t(5)}, 89: {Index: Uint16_t(196), Length: Uint16_t(5)}} /* parser.c:1680:30 */

var ts_field_map_entries = [201]TSFieldMapEntry{
	{Field_id: Field_name, Child_index: Uint8_t(1), Inherited: uint8(True)},
	{Field_id: Field_name},
	{Field_id: Field_argument, Child_index: Uint8_t(1)},
	{Field_id: Field_value},
	{Field_id: Field_code, Child_index: Uint8_t(1)},
	{Field_id: Field_argument, Child_index: Uint8_t(1)},
	{Field_id: Field_operator},
	{Field_id: Field_arguments, Child_index: Uint8_t(1)},
	{Field_id: Field_function},
	{Field_id: Field_definition, Child_index: Uint8_t(1)},
	{Field_id: Field_name},
	{Field_id: Field_name, Child_index: Uint8_t(1), Inherited: uint8(True)},
	{Field_id: Field_argument, Child_index: Uint8_t(2), Inherited: uint8(True)},
	{Field_id: Field_argument, Child_index: Uint8_t(1)},
	{Field_id: Field_argument, Child_index: Uint8_t(2), Inherited: uint8(True)},
	{Field_id: Field_cause, Child_index: Uint8_t(2)},
	{Field_id: Field_body, Child_index: Uint8_t(2)},
	{Field_id: Field_name},
	{Field_id: Field_value, Child_index: Uint8_t(2)},
	{Field_id: Field_left},
	{Field_id: Field_type, Child_index: Uint8_t(2)},
	{Field_id: Field_left},
	{Field_id: Field_right, Child_index: Uint8_t(2)},
	{Field_id: Field_left},
	{Field_id: Field_operator, Child_index: Uint8_t(1)},
	{Field_id: Field_right, Child_index: Uint8_t(2)},
	{Field_id: Field_attribute, Child_index: Uint8_t(2)},
	{Field_id: Field_object},
	{Field_id: Field_name, Child_index: Uint8_t(1)},
	{Field_id: Field_name, Inherited: uint8(True)},
	{Field_id: Field_name, Child_index: Uint8_t(1), Inherited: uint8(True)},
	{Field_id: Field_alias, Child_index: Uint8_t(2)},
	{Field_id: Field_name},
	{Field_id: Field_name, Child_index: Uint8_t(3), Inherited: uint8(True)},
	{Field_id: Field_module_name, Child_index: Uint8_t(1)},
	{Field_id: Field_name, Child_index: Uint8_t(3), Inherited: uint8(True)},
	{Field_id: Field_body, Child_index: Uint8_t(1)},
	{Field_id: Field_argument, Inherited: uint8(True)},
	{Field_id: Field_argument, Child_index: Uint8_t(1), Inherited: uint8(True)},
	{Field_id: Field_cause, Child_index: Uint8_t(3)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_consequence, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_alias, Child_index: Uint8_t(2)},
	{Field_id: Field_value},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_name, Child_index: Uint8_t(1)},
	{Field_id: Field_type, Child_index: Uint8_t(2)},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_parameters, Child_index: Uint8_t(1)},
	{Field_id: Field_key},
	{Field_id: Field_value, Child_index: Uint8_t(2)},
	{Field_id: Field_subscript, Child_index: Uint8_t(2)},
	{Field_id: Field_value},
	{Field_id: Field_alternative},
	{Field_id: Field_alternative, Child_index: Uint8_t(4)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_consequence, Child_index: Uint8_t(3)},
	{Field_id: Field_alternative, Child_index: Uint8_t(4), Inherited: uint8(True)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_consequence, Child_index: Uint8_t(3)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_consequence, Child_index: Uint8_t(3)},
	{Field_id: Field_consequence, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_alternative, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_body, Child_index: Uint8_t(2)},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_name, Child_index: Uint8_t(1)},
	{Field_id: Field_parameters, Child_index: Uint8_t(2)},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_name, Child_index: Uint8_t(1)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_name, Child_index: Uint8_t(1)},
	{Field_id: Field_superclasses, Child_index: Uint8_t(2)},
	{Field_id: Field_left},
	{Field_id: Field_right, Child_index: Uint8_t(4)},
	{Field_id: Field_type, Child_index: Uint8_t(2)},
	{Field_id: Field_subscript, Child_index: Uint8_t(1)},
	{Field_id: Field_subscript, Inherited: uint8(True)},
	{Field_id: Field_subscript, Child_index: Uint8_t(1), Inherited: uint8(True)},
	{Field_id: Field_name, Child_index: Uint8_t(4), Inherited: uint8(True)},
	{Field_id: Field_module_name, Child_index: Uint8_t(1)},
	{Field_id: Field_name, Child_index: Uint8_t(4), Inherited: uint8(True)},
	{Field_id: Field_left, Child_index: Uint8_t(1)},
	{Field_id: Field_right, Child_index: Uint8_t(3)},
	{Field_id: Field_alternative, Child_index: Uint8_t(4), Inherited: uint8(True)},
	{Field_id: Field_alternative, Child_index: Uint8_t(5)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_consequence, Child_index: Uint8_t(3)},
	{Field_id: Field_alternative, Inherited: uint8(True)},
	{Field_id: Field_alternative, Child_index: Uint8_t(1), Inherited: uint8(True)},
	{Field_id: Field_alternative, Child_index: Uint8_t(5)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_consequence, Child_index: Uint8_t(3)},
	{Field_id: Field_consequence, Child_index: Uint8_t(4)},
	{Field_id: Field_alternative, Child_index: Uint8_t(5), Inherited: uint8(True)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_consequence, Child_index: Uint8_t(3)},
	{Field_id: Field_consequence, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(5)},
	{Field_id: Field_body, Child_index: Uint8_t(5)},
	{Field_id: Field_name, Child_index: Uint8_t(2)},
	{Field_id: Field_parameters, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(5)},
	{Field_id: Field_left, Child_index: Uint8_t(1)},
	{Field_id: Field_right, Child_index: Uint8_t(3)},
	{Field_id: Field_alternative, Child_index: Uint8_t(5)},
	{Field_id: Field_body, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(5)},
	{Field_id: Field_name, Child_index: Uint8_t(1)},
	{Field_id: Field_parameters, Child_index: Uint8_t(2)},
	{Field_id: Field_body, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(5)},
	{Field_id: Field_name, Child_index: Uint8_t(1)},
	{Field_id: Field_superclasses, Child_index: Uint8_t(2)},
	{Field_id: Field_name},
	{Field_id: Field_type, Child_index: Uint8_t(2)},
	{Field_id: Field_value, Child_index: Uint8_t(4)},
	{Field_id: Field_subscript, Child_index: Uint8_t(2)},
	{Field_id: Field_subscript, Child_index: Uint8_t(3), Inherited: uint8(True)},
	{Field_id: Field_value},
	{Field_id: Field_left, Child_index: Uint8_t(2)},
	{Field_id: Field_right, Child_index: Uint8_t(4)},
	{Field_id: Field_left, Child_index: Uint8_t(1)},
	{Field_id: Field_right, Child_index: Uint8_t(3)},
	{Field_id: Field_right, Child_index: Uint8_t(4)},
	{Field_id: Field_alternative, Child_index: Uint8_t(5), Inherited: uint8(True)},
	{Field_id: Field_alternative, Child_index: Uint8_t(6)},
	{Field_id: Field_condition, Child_index: Uint8_t(1)},
	{Field_id: Field_consequence, Child_index: Uint8_t(3)},
	{Field_id: Field_consequence, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(6)},
	{Field_id: Field_left, Child_index: Uint8_t(2)},
	{Field_id: Field_right, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(5)},
	{Field_id: Field_body, Child_index: Uint8_t(6)},
	{Field_id: Field_name, Child_index: Uint8_t(2)},
	{Field_id: Field_parameters, Child_index: Uint8_t(3)},
	{Field_id: Field_alternative, Child_index: Uint8_t(6)},
	{Field_id: Field_body, Child_index: Uint8_t(5)},
	{Field_id: Field_left, Child_index: Uint8_t(1)},
	{Field_id: Field_right, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(5)},
	{Field_id: Field_body, Child_index: Uint8_t(6)},
	{Field_id: Field_left, Child_index: Uint8_t(1)},
	{Field_id: Field_right, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(6)},
	{Field_id: Field_name, Child_index: Uint8_t(1)},
	{Field_id: Field_parameters, Child_index: Uint8_t(2)},
	{Field_id: Field_return_type, Child_index: Uint8_t(4)},
	{Field_id: Field_left, Child_index: Uint8_t(2)},
	{Field_id: Field_right, Child_index: Uint8_t(4)},
	{Field_id: Field_right, Child_index: Uint8_t(5)},
	{Field_id: Field_alternative, Child_index: Uint8_t(7)},
	{Field_id: Field_body, Child_index: Uint8_t(6)},
	{Field_id: Field_left, Child_index: Uint8_t(2)},
	{Field_id: Field_right, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(6)},
	{Field_id: Field_body, Child_index: Uint8_t(7)},
	{Field_id: Field_left, Child_index: Uint8_t(2)},
	{Field_id: Field_right, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(7)},
	{Field_id: Field_name, Child_index: Uint8_t(2)},
	{Field_id: Field_parameters, Child_index: Uint8_t(3)},
	{Field_id: Field_return_type, Child_index: Uint8_t(5)},
	{Field_id: Field_alternative, Child_index: Uint8_t(7)},
	{Field_id: Field_body, Child_index: Uint8_t(5)},
	{Field_id: Field_body, Child_index: Uint8_t(6)},
	{Field_id: Field_left, Child_index: Uint8_t(1)},
	{Field_id: Field_right, Child_index: Uint8_t(3)},
	{Field_id: Field_body, Child_index: Uint8_t(6)},
	{Field_id: Field_body, Child_index: Uint8_t(7)},
	{Field_id: Field_name, Child_index: Uint8_t(1)},
	{Field_id: Field_parameters, Child_index: Uint8_t(2)},
	{Field_id: Field_return_type, Child_index: Uint8_t(4)},
	{Field_id: Field_alternative, Child_index: Uint8_t(8)},
	{Field_id: Field_body, Child_index: Uint8_t(6)},
	{Field_id: Field_body, Child_index: Uint8_t(7)},
	{Field_id: Field_left, Child_index: Uint8_t(2)},
	{Field_id: Field_right, Child_index: Uint8_t(4)},
	{Field_id: Field_body, Child_index: Uint8_t(7)},
	{Field_id: Field_body, Child_index: Uint8_t(8)},
	{Field_id: Field_name, Child_index: Uint8_t(2)},
	{Field_id: Field_parameters, Child_index: Uint8_t(3)},
	{Field_id: Field_return_type, Child_index: Uint8_t(5)},
} /* parser.c:1766:30 */

var ts_alias_sequences = [91][9]TSSymbol{0: {0: TSSymbol(0)}, 1: {0: Sym_identifier}, 4: {1: Sym_identifier}, 9: {0: Sym_list_splat_pattern}, 27: {1: Sym_parenthesized_expression}, 31: {3: Sym_block}, 32: {3: Sym_block}, 33: {2: Sym_block}, 34: {3: Sym_block}, 36: {3: Sym_block}, 42: {3: Sym_block}, 43: {3: Sym_block}, 45: {4: Sym_block}, 46: {3: Sym_block}, 50: {4: Sym_block}, 52: {4: Sym_block}, 54: {0: Sym_identifier}, 60: {3: Sym_block}, 65: {5: Sym_block}, 66: {5: Sym_block}, 68: {2: Sym_block}, 76: {6: Sym_block}, 78: {5: Sym_block}, 80: {3: Sym_block}, 81: {6: Sym_block}, 83: {6: Sym_block}, 85: {7: Sym_block}, 90: {5: Sym_block},
} /* parser.c:2051:17 */

var ts_non_terminal_alias_map = [9]Uint16_t{
	Sym__simple_statements, Uint16_t(2),
	Sym__simple_statements,
	Sym_block,
	Sym_parenthesized_list_splat, Uint16_t(2),
	Sym_parenthesized_list_splat,
	Sym_parenthesized_expression,
	Uint16_t(0),
} /* parser.c:2136:17 */

func ts_lex(tls *libc.TLS, lexer uintptr, state TSStateId) uint8 { /* parser.c:2146:13: */
	var result uint8
	var skip uint8
	var eof uint8
	var lookahead Int32_t
	result = uint8(False)
	skip = uint8(False)
	eof = uint8(False)
	goto start
next_state:
	(*struct {
		f func(*libc.TLS, uintptr, uint8)
	})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, skip)
start:
	skip = uint8(False)
	lookahead = (*TSLexer)(unsafe.Pointer(lexer)).Lookahead

	eof = (*struct {
		f func(*libc.TLS, uintptr) uint8
	})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Eof})).f(tls, lexer)
	switch int32(state) {
	case 0:
		goto __2
	case 1:
		goto __3
	case 2:
		goto __4
	case 3:
		goto __5
	case 4:
		goto __6
	case 5:
		goto __7
	case 6:
		goto __8
	case 7:
		goto __9
	case 8:
		goto __10
	case 9:
		goto __11
	case 10:
		goto __12
	case 11:
		goto __13
	case 12:
		goto __14
	case 13:
		goto __15
	case 14:
		goto __16
	case 15:
		goto __17
	case 16:
		goto __18
	case 17:
		goto __19
	case 18:
		goto __20
	case 19:
		goto __21
	case 20:
		goto __22
	case 21:
		goto __23
	case 22:
		goto __24
	case 23:
		goto __25
	case 24:
		goto __26
	case 25:
		goto __27
	case 26:
		goto __28
	case 27:
		goto __29
	case 28:
		goto __30
	case 29:
		goto __31
	case 30:
		goto __32
	case 31:
		goto __33
	case 32:
		goto __34
	case 33:
		goto __35
	case 34:
		goto __36
	case 35:
		goto __37
	case 36:
		goto __38
	case 37:
		goto __39
	case 38:
		goto __40
	case 39:
		goto __41
	case 40:
		goto __42
	case 41:
		goto __43
	case 42:
		goto __44
	case 43:
		goto __45
	case 44:
		goto __46
	case 45:
		goto __47
	case 46:
		goto __48
	case 47:
		goto __49
	case 48:
		goto __50
	case 49:
		goto __51
	case 50:
		goto __52
	case 51:
		goto __53
	case 52:
		goto __54
	case 53:
		goto __55
	case 54:
		goto __56
	case 55:
		goto __57
	case 56:
		goto __58
	case 57:
		goto __59
	case 58:
		goto __60
	case 59:
		goto __61
	case 60:
		goto __62
	case 61:
		goto __63
	case 62:
		goto __64
	case 63:
		goto __65
	case 64:
		goto __66
	case 65:
		goto __67
	case 66:
		goto __68
	case 67:
		goto __69
	case 68:
		goto __70
	case 69:
		goto __71
	case 70:
		goto __72
	case 71:
		goto __73
	case 72:
		goto __74
	case 73:
		goto __75
	case 74:
		goto __76
	case 75:
		goto __77
	case 76:
		goto __78
	case 77:
		goto __79
	case 78:
		goto __80
	case 79:
		goto __81
	case 80:
		goto __82
	case 81:
		goto __83
	case 82:
		goto __84
	case 83:
		goto __85
	case 84:
		goto __86
	case 85:
		goto __87
	case 86:
		goto __88
	case 87:
		goto __89
	case 88:
		goto __90
	case 89:
		goto __91
	case 90:
		goto __92
	case 91:
		goto __93
	case 92:
		goto __94
	case 93:
		goto __95
	case 94:
		goto __96
	case 95:
		goto __97
	case 96:
		goto __98
	case 97:
		goto __99
	case 98:
		goto __100
	case 99:
		goto __101
	case 100:
		goto __102
	case 101:
		goto __103
	case 102:
		goto __104
	case 103:
		goto __105
	case 104:
		goto __106
	case 105:
		goto __107
	case 106:
		goto __108
	case 107:
		goto __109
	case 108:
		goto __110
	case 109:
		goto __111
	case 110:
		goto __112
	case 111:
		goto __113
	default:
		goto __114
	}
	goto __1
__2:
	if !(eof != 0) {
		goto __115
	}
	state = TSStateId(39)
	goto next_state
__115:
	;

	if !(lookahead == '!') {
		goto __116
	}
	state = TSStateId(14)
	goto next_state
__116:
	;

	if !(lookahead == '#') {
		goto __117
	}
	state = TSStateId(110)
	goto next_state
__117:
	;

	if !(lookahead == '%') {
		goto __118
	}
	state = TSStateId(60)
	goto next_state
__118:
	;

	if !(lookahead == '&') {
		goto __119
	}
	state = TSStateId(63)
	goto next_state
__119:
	;

	if !(lookahead == '(') {
		goto __120
	}
	state = TSStateId(42)
	goto next_state
__120:
	;

	if !(lookahead == ')') {
		goto __121
	}
	state = TSStateId(43)
	goto next_state
__121:
	;

	if !(lookahead == '*') {
		goto __122
	}
	state = TSStateId(45)
	goto next_state
__122:
	;

	if !(lookahead == '+') {
		goto __123
	}
	state = TSStateId(56)
	goto next_state
__123:
	;

	if !(lookahead == ',') {
		goto __124
	}
	state = TSStateId(44)
	goto next_state
__124:
	;

	if !(lookahead == '-') {
		goto __125
	}
	state = TSStateId(58)
	goto next_state
__125:
	;

	if !(lookahead == '.') {
		goto __126
	}
	state = TSStateId(41)
	goto next_state
__126:
	;

	if !(lookahead == '/') {
		goto __127
	}
	state = TSStateId(59)
	goto next_state
__127:
	;

	if !(lookahead == '0') {
		goto __128
	}
	state = TSStateId(99)
	goto next_state
__128:
	;

	if !(lookahead == ':') {
		goto __129
	}
	state = TSStateId(49)
	goto next_state
__129:
	;

	if !(lookahead == ';') {
		goto __130
	}
	state = TSStateId(111)
	goto next_state
__130:
	;

	if !(lookahead == '<') {
		goto __131
	}
	state = TSStateId(67)
	goto next_state
__131:
	;

	if !(lookahead == '=') {
		goto __132
	}
	state = TSStateId(55)
	goto next_state
__132:
	;

	if !(lookahead == '>') {
		goto __133
	}
	state = TSStateId(72)
	goto next_state
__133:
	;

	if !(lookahead == '@') {
		goto __134
	}
	state = TSStateId(52)
	goto next_state
__134:
	;

	if !(lookahead == '[') {
		goto __135
	}
	state = TSStateId(53)
	goto next_state
__135:
	;

	if !(lookahead == '\\') {
		goto __136
	}
	skip = uint8(True)
	state = TSStateId(35)
	goto next_state
__136:
	;
	if !(lookahead == ']') {
		goto __137
	}
	state = TSStateId(54)
	goto next_state
__137:
	;

	if !(lookahead == '^') {
		goto __138
	}
	state = TSStateId(64)
	goto next_state
__138:
	;

	if !(lookahead == '{') {
		goto __139
	}
	state = TSStateId(88)
	goto next_state
__139:
	;

	if !(lookahead == '|') {
		goto __140
	}
	state = TSStateId(62)
	goto next_state
__140:
	;

	if !(lookahead == '}') {
		goto __141
	}
	state = TSStateId(89)
	goto next_state
__141:
	;

	if !(lookahead == '~') {
		goto __142
	}
	state = TSStateId(66)
	goto next_state
__142:
	;

	if !((((((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\f')) || (lookahead == '\r')) || (lookahead == ' ')) || (lookahead == 8203)) || (lookahead == 8288)) || (lookahead == 65279)) {
		goto __143
	}
	skip = uint8(True)
	state = TSStateId(0)
	goto next_state
__143:
	;
	if !(('1' <= lookahead) && (lookahead <= '9')) {
		goto __144
	}
	state = TSStateId(98)
	goto next_state
__144:
	;

	if !((((('A' <= lookahead) && (lookahead <= '_')) || (('a' <= lookahead) && (lookahead <= 'z'))) || ((913 <= lookahead) && (lookahead <= 937))) || ((945 <= lookahead) && (lookahead <= 969))) {
		goto __145
	}
	state = TSStateId(109)
	goto next_state
__145:
	;

	return result

__3:
	if !(lookahead == '\n') {
		goto __146
	}
	skip = uint8(True)
	state = TSStateId(10)
	goto next_state
__146:
	;
	return result

__4:
	if !(lookahead == '\n') {
		goto __147
	}
	skip = uint8(True)
	state = TSStateId(10)
	goto next_state
__147:
	;
	if !(lookahead == '\r') {
		goto __148
	}
	skip = uint8(True)
	state = TSStateId(1)
	goto next_state
__148:
	;
	return result

__5:
	if !(lookahead == '\n') {
		goto __149
	}
	state = TSStateId(91)
	goto next_state
__149:
	;

	return result

__6:
	if !(lookahead == '\n') {
		goto __150
	}
	skip = uint8(True)
	state = TSStateId(4)
	goto next_state
__150:
	;
	if !(lookahead == '#') {
		goto __151
	}
	state = TSStateId(95)
	goto next_state
__151:
	;

	if !(lookahead == '\\') {
		goto __152
	}
	state = TSStateId(93)
	goto next_state
__152:
	;

	if !(lookahead == '{') {
		goto __153
	}
	state = TSStateId(88)
	goto next_state
__153:
	;

	if !(lookahead == '}') {
		goto __154
	}
	state = TSStateId(89)
	goto next_state
__154:
	;

	if !(((((((lookahead == '\t') || (lookahead == '\f')) || (lookahead == '\r')) || (lookahead == ' ')) || (lookahead == 8203)) || (lookahead == 8288)) || (lookahead == 65279)) {
		goto __155
	}
	state = TSStateId(94)
	goto next_state
__155:
	;

	if !(lookahead != 0) {
		goto __156
	}
	state = TSStateId(95)
	goto next_state
__156:
	;

	return result

__7:
	if !(lookahead == '\n') {
		goto __157
	}
	skip = uint8(True)
	state = TSStateId(11)
	goto next_state
__157:
	;
	return result

__8:
	if !(lookahead == '\n') {
		goto __158
	}
	skip = uint8(True)
	state = TSStateId(11)
	goto next_state
__158:
	;
	if !(lookahead == '\r') {
		goto __159
	}
	skip = uint8(True)
	state = TSStateId(5)
	goto next_state
__159:
	;
	return result

__9:
	if !(lookahead == '\n') {
		goto __160
	}
	skip = uint8(True)
	state = TSStateId(9)
	goto next_state
__160:
	;
	return result

__10:
	if !(lookahead == '\n') {
		goto __161
	}
	skip = uint8(True)
	state = TSStateId(9)
	goto next_state
__161:
	;
	if !(lookahead == '\r') {
		goto __162
	}
	skip = uint8(True)
	state = TSStateId(7)
	goto next_state
__162:
	;
	return result

__11:
	if !(lookahead == '!') {
		goto __163
	}
	state = TSStateId(14)
	goto next_state
__163:
	;

	if !(lookahead == '#') {
		goto __164
	}
	state = TSStateId(110)
	goto next_state
__164:
	;

	if !(lookahead == '%') {
		goto __165
	}
	state = TSStateId(60)
	goto next_state
__165:
	;

	if !(lookahead == '&') {
		goto __166
	}
	state = TSStateId(63)
	goto next_state
__166:
	;

	if !(lookahead == '(') {
		goto __167
	}
	state = TSStateId(42)
	goto next_state
__167:
	;

	if !(lookahead == ')') {
		goto __168
	}
	state = TSStateId(43)
	goto next_state
__168:
	;

	if !(lookahead == '*') {
		goto __169
	}
	state = TSStateId(45)
	goto next_state
__169:
	;

	if !(lookahead == '+') {
		goto __170
	}
	state = TSStateId(56)
	goto next_state
__170:
	;

	if !(lookahead == ',') {
		goto __171
	}
	state = TSStateId(44)
	goto next_state
__171:
	;

	if !(lookahead == '-') {
		goto __172
	}
	state = TSStateId(57)
	goto next_state
__172:
	;

	if !(lookahead == '.') {
		goto __173
	}
	state = TSStateId(40)
	goto next_state
__173:
	;

	if !(lookahead == '/') {
		goto __174
	}
	state = TSStateId(59)
	goto next_state
__174:
	;

	if !(lookahead == ':') {
		goto __175
	}
	state = TSStateId(49)
	goto next_state
__175:
	;

	if !(lookahead == ';') {
		goto __176
	}
	state = TSStateId(111)
	goto next_state
__176:
	;

	if !(lookahead == '<') {
		goto __177
	}
	state = TSStateId(67)
	goto next_state
__177:
	;

	if !(lookahead == '=') {
		goto __178
	}
	state = TSStateId(55)
	goto next_state
__178:
	;

	if !(lookahead == '>') {
		goto __179
	}
	state = TSStateId(72)
	goto next_state
__179:
	;

	if !(lookahead == '@') {
		goto __180
	}
	state = TSStateId(52)
	goto next_state
__180:
	;

	if !(lookahead == '[') {
		goto __181
	}
	state = TSStateId(53)
	goto next_state
__181:
	;

	if !(lookahead == '\\') {
		goto __182
	}
	skip = uint8(True)
	state = TSStateId(8)
	goto next_state
__182:
	;
	if !(lookahead == ']') {
		goto __183
	}
	state = TSStateId(54)
	goto next_state
__183:
	;

	if !(lookahead == '^') {
		goto __184
	}
	state = TSStateId(64)
	goto next_state
__184:
	;

	if !(lookahead == '|') {
		goto __185
	}
	state = TSStateId(62)
	goto next_state
__185:
	;

	if !(lookahead == '}') {
		goto __186
	}
	state = TSStateId(89)
	goto next_state
__186:
	;

	if !((((((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\f')) || (lookahead == '\r')) || (lookahead == ' ')) || (lookahead == 8203)) || (lookahead == 8288)) || (lookahead == 65279)) {
		goto __187
	}
	skip = uint8(True)
	state = TSStateId(9)
	goto next_state
__187:
	;
	if !((((('A' <= lookahead) && (lookahead <= '_')) || (('a' <= lookahead) && (lookahead <= 'z'))) || ((913 <= lookahead) && (lookahead <= 937))) || ((945 <= lookahead) && (lookahead <= 969))) {
		goto __188
	}
	state = TSStateId(109)
	goto next_state
__188:
	;

	return result

__12:
	if !(lookahead == '!') {
		goto __189
	}
	state = TSStateId(14)
	goto next_state
__189:
	;

	if !(lookahead == '#') {
		goto __190
	}
	state = TSStateId(110)
	goto next_state
__190:
	;

	if !(lookahead == '%') {
		goto __191
	}
	state = TSStateId(60)
	goto next_state
__191:
	;

	if !(lookahead == '&') {
		goto __192
	}
	state = TSStateId(63)
	goto next_state
__192:
	;

	if !(lookahead == '(') {
		goto __193
	}
	state = TSStateId(42)
	goto next_state
__193:
	;

	if !(lookahead == ')') {
		goto __194
	}
	state = TSStateId(43)
	goto next_state
__194:
	;

	if !(lookahead == '*') {
		goto __195
	}
	state = TSStateId(45)
	goto next_state
__195:
	;

	if !(lookahead == '+') {
		goto __196
	}
	state = TSStateId(56)
	goto next_state
__196:
	;

	if !(lookahead == ',') {
		goto __197
	}
	state = TSStateId(44)
	goto next_state
__197:
	;

	if !(lookahead == '-') {
		goto __198
	}
	state = TSStateId(57)
	goto next_state
__198:
	;

	if !(lookahead == '.') {
		goto __199
	}
	state = TSStateId(40)
	goto next_state
__199:
	;

	if !(lookahead == '/') {
		goto __200
	}
	state = TSStateId(59)
	goto next_state
__200:
	;

	if !(lookahead == ':') {
		goto __201
	}
	state = TSStateId(48)
	goto next_state
__201:
	;

	if !(lookahead == ';') {
		goto __202
	}
	state = TSStateId(111)
	goto next_state
__202:
	;

	if !(lookahead == '<') {
		goto __203
	}
	state = TSStateId(67)
	goto next_state
__203:
	;

	if !(lookahead == '=') {
		goto __204
	}
	state = TSStateId(55)
	goto next_state
__204:
	;

	if !(lookahead == '>') {
		goto __205
	}
	state = TSStateId(72)
	goto next_state
__205:
	;

	if !(lookahead == '@') {
		goto __206
	}
	state = TSStateId(52)
	goto next_state
__206:
	;

	if !(lookahead == '[') {
		goto __207
	}
	state = TSStateId(53)
	goto next_state
__207:
	;

	if !(lookahead == '\\') {
		goto __208
	}
	skip = uint8(True)
	state = TSStateId(2)
	goto next_state
__208:
	;
	if !(lookahead == ']') {
		goto __209
	}
	state = TSStateId(54)
	goto next_state
__209:
	;

	if !(lookahead == '^') {
		goto __210
	}
	state = TSStateId(64)
	goto next_state
__210:
	;

	if !(lookahead == '|') {
		goto __211
	}
	state = TSStateId(62)
	goto next_state
__211:
	;

	if !(lookahead == '}') {
		goto __212
	}
	state = TSStateId(89)
	goto next_state
__212:
	;

	if !((((((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\f')) || (lookahead == '\r')) || (lookahead == ' ')) || (lookahead == 8203)) || (lookahead == 8288)) || (lookahead == 65279)) {
		goto __213
	}
	skip = uint8(True)
	state = TSStateId(10)
	goto next_state
__213:
	;
	if !((((('A' <= lookahead) && (lookahead <= '_')) || (('a' <= lookahead) && (lookahead <= 'z'))) || ((913 <= lookahead) && (lookahead <= 937))) || ((945 <= lookahead) && (lookahead <= 969))) {
		goto __214
	}
	state = TSStateId(109)
	goto next_state
__214:
	;

	return result

__13:
	if !(lookahead == '#') {
		goto __215
	}
	state = TSStateId(110)
	goto next_state
__215:
	;

	if !(lookahead == '-') {
		goto __216
	}
	state = TSStateId(15)
	goto next_state
__216:
	;

	if !(lookahead == ':') {
		goto __217
	}
	state = TSStateId(48)
	goto next_state
__217:
	;

	if !(lookahead == '\\') {
		goto __218
	}
	skip = uint8(True)
	state = TSStateId(6)
	goto next_state
__218:
	;
	if !((((((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\f')) || (lookahead == '\r')) || (lookahead == ' ')) || (lookahead == 8203)) || (lookahead == 8288)) || (lookahead == 65279)) {
		goto __219
	}
	skip = uint8(True)
	state = TSStateId(11)
	goto next_state
__219:
	;
	return result

__14:
	if !(lookahead == '#') {
		goto __220
	}
	state = TSStateId(110)
	goto next_state
__220:
	;

	if !(lookahead == '\\') {
		goto __221
	}
	state = TSStateId(92)
	goto next_state
__221:
	;

	if !(lookahead == '{') {
		goto __222
	}
	state = TSStateId(88)
	goto next_state
__222:
	;

	if !((((((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\f')) || (lookahead == '\r')) || (lookahead == ' ')) || (lookahead == 8203)) || (lookahead == 8288)) || (lookahead == 65279)) {
		goto __223
	}
	skip = uint8(True)
	state = TSStateId(12)
	goto next_state
__223:
	;
	return result

__15:
	if !(lookahead == '.') {
		goto __224
	}
	state = TSStateId(87)
	goto next_state
__224:
	;

	return result

__16:
	if !(lookahead == '=') {
		goto __225
	}
	state = TSStateId(70)
	goto next_state
__225:
	;

	if !(('a' <= lookahead) && (lookahead <= 'z')) {
		goto __226
	}
	state = TSStateId(96)
	goto next_state
__226:
	;

	return result

__17:
	if !(lookahead == '>') {
		goto __227
	}
	state = TSStateId(50)
	goto next_state
__227:
	;

	return result

__18:
	if !(lookahead == '_') {
		goto __228
	}
	state = TSStateId(20)
	goto next_state
__228:
	;

	if !((lookahead == '0') || (lookahead == '1')) {
		goto __229
	}
	state = TSStateId(101)
	goto next_state
__229:
	;

	return result

__19:
	if !(lookahead == '_') {
		goto __230
	}
	state = TSStateId(21)
	goto next_state
__230:
	;

	if !(('0' <= lookahead) && (lookahead <= '7')) {
		goto __231
	}
	state = TSStateId(102)
	goto next_state
__231:
	;

	return result

__20:
	if !(lookahead == '_') {
		goto __232
	}
	state = TSStateId(25)
	goto next_state
__232:
	;

	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __233
	}
	state = TSStateId(103)
	goto next_state
__233:
	;

	return result

__21:
	if !((lookahead == '+') || (lookahead == '-')) {
		goto __234
	}
	state = TSStateId(22)
	goto next_state
__234:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __235
	}
	state = TSStateId(106)
	goto next_state
__235:
	;

	return result

__22:
	if !((lookahead == '0') || (lookahead == '1')) {
		goto __236
	}
	state = TSStateId(101)
	goto next_state
__236:
	;

	return result

__23:
	if !(('0' <= lookahead) && (lookahead <= '7')) {
		goto __237
	}
	state = TSStateId(102)
	goto next_state
__237:
	;

	return result

__24:
	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __238
	}
	state = TSStateId(106)
	goto next_state
__238:
	;

	return result

__25:
	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __239
	}
	state = TSStateId(90)
	goto next_state
__239:
	;

	return result

__26:
	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __240
	}
	state = TSStateId(23)
	goto next_state
__240:
	;

	return result

__27:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __241
	}
	state = TSStateId(103)
	goto next_state
__241:
	;

	return result

__28:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __242
	}
	state = TSStateId(90)
	goto next_state
__242:
	;

	return result

__29:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __243
	}
	state = TSStateId(26)
	goto next_state
__243:
	;

	return result

__30:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __244
	}
	state = TSStateId(27)
	goto next_state
__244:
	;

	return result

__31:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __245
	}
	state = TSStateId(28)
	goto next_state
__245:
	;

	return result

__32:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __246
	}
	state = TSStateId(29)
	goto next_state
__246:
	;

	return result

__33:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __247
	}
	state = TSStateId(30)
	goto next_state
__247:
	;

	return result

__34:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __248
	}
	state = TSStateId(31)
	goto next_state
__248:
	;

	return result

__35:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __249
	}
	state = TSStateId(32)
	goto next_state
__249:
	;

	return result

__36:
	if !(eof != 0) {
		goto __250
	}
	state = TSStateId(39)
	goto next_state
__250:
	;

	if !(lookahead == '\n') {
		goto __251
	}
	skip = uint8(True)
	state = TSStateId(0)
	goto next_state
__251:
	;
	return result

__37:
	if !(eof != 0) {
		goto __252
	}
	state = TSStateId(39)
	goto next_state
__252:
	;

	if !(lookahead == '\n') {
		goto __253
	}
	skip = uint8(True)
	state = TSStateId(0)
	goto next_state
__253:
	;
	if !(lookahead == '\r') {
		goto __254
	}
	skip = uint8(True)
	state = TSStateId(34)
	goto next_state
__254:
	;
	return result

__38:
	if !(eof != 0) {
		goto __255
	}
	state = TSStateId(39)
	goto next_state
__255:
	;

	if !(lookahead == '\n') {
		goto __256
	}
	skip = uint8(True)
	state = TSStateId(38)
	goto next_state
__256:
	;
	return result

__39:
	if !(eof != 0) {
		goto __257
	}
	state = TSStateId(39)
	goto next_state
__257:
	;

	if !(lookahead == '\n') {
		goto __258
	}
	skip = uint8(True)
	state = TSStateId(38)
	goto next_state
__258:
	;
	if !(lookahead == '\r') {
		goto __259
	}
	skip = uint8(True)
	state = TSStateId(36)
	goto next_state
__259:
	;
	return result

__40:
	if !(eof != 0) {
		goto __260
	}
	state = TSStateId(39)
	goto next_state
__260:
	;

	if !(lookahead == '!') {
		goto __261
	}
	state = TSStateId(14)
	goto next_state
__261:
	;

	if !(lookahead == '#') {
		goto __262
	}
	state = TSStateId(110)
	goto next_state
__262:
	;

	if !(lookahead == '%') {
		goto __263
	}
	state = TSStateId(60)
	goto next_state
__263:
	;

	if !(lookahead == '&') {
		goto __264
	}
	state = TSStateId(63)
	goto next_state
__264:
	;

	if !(lookahead == '(') {
		goto __265
	}
	state = TSStateId(42)
	goto next_state
__265:
	;

	if !(lookahead == ')') {
		goto __266
	}
	state = TSStateId(43)
	goto next_state
__266:
	;

	if !(lookahead == '*') {
		goto __267
	}
	state = TSStateId(45)
	goto next_state
__267:
	;

	if !(lookahead == '+') {
		goto __268
	}
	state = TSStateId(56)
	goto next_state
__268:
	;

	if !(lookahead == ',') {
		goto __269
	}
	state = TSStateId(44)
	goto next_state
__269:
	;

	if !(lookahead == '-') {
		goto __270
	}
	state = TSStateId(57)
	goto next_state
__270:
	;

	if !(lookahead == '.') {
		goto __271
	}
	state = TSStateId(41)
	goto next_state
__271:
	;

	if !(lookahead == '/') {
		goto __272
	}
	state = TSStateId(59)
	goto next_state
__272:
	;

	if !(lookahead == '0') {
		goto __273
	}
	state = TSStateId(99)
	goto next_state
__273:
	;

	if !(lookahead == ':') {
		goto __274
	}
	state = TSStateId(48)
	goto next_state
__274:
	;

	if !(lookahead == ';') {
		goto __275
	}
	state = TSStateId(111)
	goto next_state
__275:
	;

	if !(lookahead == '<') {
		goto __276
	}
	state = TSStateId(67)
	goto next_state
__276:
	;

	if !(lookahead == '=') {
		goto __277
	}
	state = TSStateId(55)
	goto next_state
__277:
	;

	if !(lookahead == '>') {
		goto __278
	}
	state = TSStateId(72)
	goto next_state
__278:
	;

	if !(lookahead == '@') {
		goto __279
	}
	state = TSStateId(52)
	goto next_state
__279:
	;

	if !(lookahead == '[') {
		goto __280
	}
	state = TSStateId(53)
	goto next_state
__280:
	;

	if !(lookahead == '\\') {
		goto __281
	}
	skip = uint8(True)
	state = TSStateId(37)
	goto next_state
__281:
	;
	if !(lookahead == ']') {
		goto __282
	}
	state = TSStateId(54)
	goto next_state
__282:
	;

	if !(lookahead == '^') {
		goto __283
	}
	state = TSStateId(64)
	goto next_state
__283:
	;

	if !(lookahead == '{') {
		goto __284
	}
	state = TSStateId(88)
	goto next_state
__284:
	;

	if !(lookahead == '|') {
		goto __285
	}
	state = TSStateId(62)
	goto next_state
__285:
	;

	if !(lookahead == '}') {
		goto __286
	}
	state = TSStateId(89)
	goto next_state
__286:
	;

	if !(lookahead == '~') {
		goto __287
	}
	state = TSStateId(66)
	goto next_state
__287:
	;

	if !((((((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\f')) || (lookahead == '\r')) || (lookahead == ' ')) || (lookahead == 8203)) || (lookahead == 8288)) || (lookahead == 65279)) {
		goto __288
	}
	skip = uint8(True)
	state = TSStateId(38)
	goto next_state
__288:
	;
	if !(('1' <= lookahead) && (lookahead <= '9')) {
		goto __289
	}
	state = TSStateId(98)
	goto next_state
__289:
	;

	if !((((('A' <= lookahead) && (lookahead <= '_')) || (('a' <= lookahead) && (lookahead <= 'z'))) || ((913 <= lookahead) && (lookahead <= 937))) || ((945 <= lookahead) && (lookahead <= 969))) {
		goto __290
	}
	state = TSStateId(109)
	goto next_state
__290:
	;

	return result

__41:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = TSSymbol(Ts_builtin_sym_end)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__42:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_DOT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__43:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_DOT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '.') {
		goto __291
	}
	state = TSStateId(13)
	goto next_state
__291:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __292
	}
	state = TSStateId(105)
	goto next_state
__292:
	;

	return result

__44:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LPAREN
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__45:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_RPAREN
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__46:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_COMMA
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__47:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_STAR
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '*') {
		goto __293
	}
	state = TSStateId(51)
	goto next_state
__293:
	;

	if !(lookahead == '=') {
		goto __294
	}
	state = TSStateId(76)
	goto next_state
__294:
	;

	return result

__48:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_GT_GT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __295
	}
	state = TSStateId(82)
	goto next_state
__295:
	;

	return result

__49:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_COLON_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__50:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_COLON
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__51:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_COLON
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __296
	}
	state = TSStateId(47)
	goto next_state
__296:
	;

	return result

__52:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_DASH_GT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__53:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_STAR_STAR
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __297
	}
	state = TSStateId(81)
	goto next_state
__297:
	;

	return result

__54:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_AT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __298
	}
	state = TSStateId(78)
	goto next_state
__298:
	;

	return result

__55:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LBRACK
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__56:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_RBRACK
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__57:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __299
	}
	state = TSStateId(69)
	goto next_state
__299:
	;

	return result

__58:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_PLUS
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __300
	}
	state = TSStateId(74)
	goto next_state
__300:
	;

	return result

__59:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_DASH
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __301
	}
	state = TSStateId(75)
	goto next_state
__301:
	;

	return result

__60:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_DASH
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __302
	}
	state = TSStateId(75)
	goto next_state
__302:
	;

	if !(lookahead == '>') {
		goto __303
	}
	state = TSStateId(50)
	goto next_state
__303:
	;

	return result

__61:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_SLASH
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '/') {
		goto __304
	}
	state = TSStateId(61)
	goto next_state
__304:
	;

	if !(lookahead == '=') {
		goto __305
	}
	state = TSStateId(77)
	goto next_state
__305:
	;

	return result

__62:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_PERCENT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __306
	}
	state = TSStateId(80)
	goto next_state
__306:
	;

	return result

__63:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_SLASH_SLASH
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __307
	}
	state = TSStateId(79)
	goto next_state
__307:
	;

	return result

__64:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_PIPE
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __308
	}
	state = TSStateId(86)
	goto next_state
__308:
	;

	return result

__65:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_AMP
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __309
	}
	state = TSStateId(84)
	goto next_state
__309:
	;

	return result

__66:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_CARET
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __310
	}
	state = TSStateId(85)
	goto next_state
__310:
	;

	return result

__67:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LT_LT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __311
	}
	state = TSStateId(83)
	goto next_state
__311:
	;

	return result

__68:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_TILDE
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__69:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '<') {
		goto __312
	}
	state = TSStateId(65)
	goto next_state
__312:
	;

	if !(lookahead == '=') {
		goto __313
	}
	state = TSStateId(68)
	goto next_state
__313:
	;

	if !(lookahead == '>') {
		goto __314
	}
	state = TSStateId(73)
	goto next_state
__314:
	;

	return result

__70:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LT_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__71:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_EQ_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__72:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_BANG_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__73:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_GT_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__74:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_GT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '=') {
		goto __315
	}
	state = TSStateId(71)
	goto next_state
__315:
	;

	if !(lookahead == '>') {
		goto __316
	}
	state = TSStateId(46)
	goto next_state
__316:
	;

	return result

__75:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LT_GT
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__76:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_PLUS_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__77:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_DASH_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__78:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_STAR_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__79:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_SLASH_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__80:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_AT_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__81:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_SLASH_SLASH_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__82:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_PERCENT_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__83:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_STAR_STAR_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__84:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_GT_GT_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__85:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LT_LT_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__86:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_AMP_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__87:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_CARET_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__88:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_PIPE_EQ
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__89:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_ellipsis
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__90:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LBRACE
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__91:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_RBRACE
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__92:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_escape_sequence
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__93:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_escape_sequence
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '\\') {
		goto __317
	}
	state = TSStateId(92)
	goto next_state
__317:
	;

	return result

__94:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym__not_escape_sequence
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '\n') {
		goto __318
	}
	state = TSStateId(91)
	goto next_state
__318:
	;

	if !(lookahead == '\r') {
		goto __319
	}
	state = TSStateId(3)
	goto next_state
__319:
	;

	if !(lookahead == 'U') {
		goto __320
	}
	state = TSStateId(33)
	goto next_state
__320:
	;

	if !(lookahead == 'u') {
		goto __321
	}
	state = TSStateId(29)
	goto next_state
__321:
	;

	if !(lookahead == 'x') {
		goto __322
	}
	state = TSStateId(27)
	goto next_state
__322:
	;

	if !(((((((((lookahead == '"') || (lookahead == '\'')) || (lookahead == '\\')) || (lookahead == 'a')) || (lookahead == 'b')) || (lookahead == 'f')) || (lookahead == 'n')) || (lookahead == 'r')) || (('t' <= lookahead) && (lookahead <= 'v'))) {
		goto __323
	}
	state = TSStateId(90)
	goto next_state
__323:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __324
	}
	state = TSStateId(24)
	goto next_state
__324:
	;

	return result

__95:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Aux_sym_format_specifier_token1
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '\r') {
		goto __325
	}
	state = TSStateId(95)
	goto next_state
__325:
	;

	if !((((lookahead != 0) && (lookahead != '\n')) && (lookahead != '{')) && (lookahead != '}')) {
		goto __326
	}
	state = TSStateId(95)
	goto next_state
__326:
	;

	return result

__96:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Aux_sym_format_specifier_token1
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '#') {
		goto __327
	}
	state = TSStateId(95)
	goto next_state
__327:
	;

	if !(lookahead == '\\') {
		goto __328
	}
	state = TSStateId(93)
	goto next_state
__328:
	;

	if !(((((((lookahead == '\t') || (lookahead == '\f')) || (lookahead == '\r')) || (lookahead == ' ')) || (lookahead == 8203)) || (lookahead == 8288)) || (lookahead == 65279)) {
		goto __329
	}
	state = TSStateId(94)
	goto next_state
__329:
	;

	if !((((lookahead != 0) && (lookahead != '\n')) && (lookahead != '{')) && (lookahead != '}')) {
		goto __330
	}
	state = TSStateId(95)
	goto next_state
__330:
	;

	return result

__97:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Aux_sym_format_specifier_token1
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !((((lookahead != 0) && (lookahead != '\n')) && (lookahead != '{')) && (lookahead != '}')) {
		goto __331
	}
	state = TSStateId(95)
	goto next_state
__331:
	;

	return result

__98:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_type_conversion
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__99:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_integer
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__100:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_integer
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '.') {
		goto __332
	}
	state = TSStateId(107)
	goto next_state
__332:
	;

	if !(lookahead == '_') {
		goto __333
	}
	state = TSStateId(100)
	goto next_state
__333:
	;

	if !((lookahead == 'E') || (lookahead == 'e')) {
		goto __334
	}
	state = TSStateId(19)
	goto next_state
__334:
	;

	if !((((lookahead == 'J') || (lookahead == 'L')) || (lookahead == 'j')) || (lookahead == 'l')) {
		goto __335
	}
	state = TSStateId(97)
	goto next_state
__335:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __336
	}
	state = TSStateId(98)
	goto next_state
__336:
	;

	return result

__101:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_integer
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '.') {
		goto __337
	}
	state = TSStateId(107)
	goto next_state
__337:
	;

	if !((lookahead == 'B') || (lookahead == 'b')) {
		goto __338
	}
	state = TSStateId(16)
	goto next_state
__338:
	;

	if !((lookahead == 'O') || (lookahead == 'o')) {
		goto __339
	}
	state = TSStateId(17)
	goto next_state
__339:
	;

	if !((lookahead == 'X') || (lookahead == 'x')) {
		goto __340
	}
	state = TSStateId(18)
	goto next_state
__340:
	;

	if !(lookahead == '_') {
		goto __341
	}
	state = TSStateId(100)
	goto next_state
__341:
	;

	if !((lookahead == 'E') || (lookahead == 'e')) {
		goto __342
	}
	state = TSStateId(19)
	goto next_state
__342:
	;

	if !((((lookahead == 'J') || (lookahead == 'L')) || (lookahead == 'j')) || (lookahead == 'l')) {
		goto __343
	}
	state = TSStateId(97)
	goto next_state
__343:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __344
	}
	state = TSStateId(98)
	goto next_state
__344:
	;

	return result

__102:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_integer
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '.') {
		goto __345
	}
	state = TSStateId(107)
	goto next_state
__345:
	;

	if !((lookahead == 'E') || (lookahead == 'e')) {
		goto __346
	}
	state = TSStateId(19)
	goto next_state
__346:
	;

	if !((((lookahead == 'J') || (lookahead == 'L')) || (lookahead == 'j')) || (lookahead == 'l')) {
		goto __347
	}
	state = TSStateId(97)
	goto next_state
__347:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __348
	}
	state = TSStateId(98)
	goto next_state
__348:
	;

	return result

__103:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_integer
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '_') {
		goto __349
	}
	state = TSStateId(20)
	goto next_state
__349:
	;

	if !((lookahead == 'L') || (lookahead == 'l')) {
		goto __350
	}
	state = TSStateId(97)
	goto next_state
__350:
	;

	if !((lookahead == '0') || (lookahead == '1')) {
		goto __351
	}
	state = TSStateId(101)
	goto next_state
__351:
	;

	return result

__104:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_integer
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '_') {
		goto __352
	}
	state = TSStateId(21)
	goto next_state
__352:
	;

	if !((lookahead == 'L') || (lookahead == 'l')) {
		goto __353
	}
	state = TSStateId(97)
	goto next_state
__353:
	;

	if !(('0' <= lookahead) && (lookahead <= '7')) {
		goto __354
	}
	state = TSStateId(102)
	goto next_state
__354:
	;

	return result

__105:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_integer
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '_') {
		goto __355
	}
	state = TSStateId(25)
	goto next_state
__355:
	;

	if !((lookahead == 'L') || (lookahead == 'l')) {
		goto __356
	}
	state = TSStateId(97)
	goto next_state
__356:
	;

	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __357
	}
	state = TSStateId(103)
	goto next_state
__357:
	;

	return result

__106:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_float
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__107:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_float
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '_') {
		goto __358
	}
	state = TSStateId(107)
	goto next_state
__358:
	;

	if !((lookahead == 'E') || (lookahead == 'e')) {
		goto __359
	}
	state = TSStateId(19)
	goto next_state
__359:
	;

	if !((((lookahead == 'J') || (lookahead == 'L')) || (lookahead == 'j')) || (lookahead == 'l')) {
		goto __360
	}
	state = TSStateId(104)
	goto next_state
__360:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __361
	}
	state = TSStateId(105)
	goto next_state
__361:
	;

	return result

__108:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_float
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '_') {
		goto __362
	}
	state = TSStateId(108)
	goto next_state
__362:
	;

	if !((((lookahead == 'J') || (lookahead == 'L')) || (lookahead == 'j')) || (lookahead == 'l')) {
		goto __363
	}
	state = TSStateId(104)
	goto next_state
__363:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __364
	}
	state = TSStateId(106)
	goto next_state
__364:
	;

	return result

__109:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_float
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !((lookahead == 'E') || (lookahead == 'e')) {
		goto __365
	}
	state = TSStateId(19)
	goto next_state
__365:
	;

	if !((((lookahead == 'J') || (lookahead == 'L')) || (lookahead == 'j')) || (lookahead == 'l')) {
		goto __366
	}
	state = TSStateId(104)
	goto next_state
__366:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __367
	}
	state = TSStateId(105)
	goto next_state
__367:
	;

	return result

__110:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_float
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !((((lookahead == 'J') || (lookahead == 'L')) || (lookahead == 'j')) || (lookahead == 'l')) {
		goto __368
	}
	state = TSStateId(104)
	goto next_state
__368:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __369
	}
	state = TSStateId(106)
	goto next_state
__369:
	;

	return result

__111:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_identifier
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !((((((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'Z'))) || (lookahead == '_')) || (('a' <= lookahead) && (lookahead <= 'z'))) || ((913 <= lookahead) && (lookahead <= 937))) || ((945 <= lookahead) && (lookahead <= 969))) {
		goto __370
	}
	state = TSStateId(109)
	goto next_state
__370:
	;

	return result

__112:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_comment
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !((lookahead != 0) && (lookahead != '\n')) {
		goto __371
	}
	state = TSStateId(110)
	goto next_state
__371:
	;

	return result

__113:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym__semicolon
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__114:
	return uint8(False)
__1:
	;
	return uint8(0)
}

func ts_lex_keywords(tls *libc.TLS, lexer uintptr, state TSStateId) uint8 { /* parser.c:2856:13: */
	var result uint8
	var skip uint8
	var eof uint8
	_ = eof
	var lookahead Int32_t
	result = uint8(False)
	skip = uint8(False)
	eof = uint8(False)
	goto start
next_state:
	(*struct {
		f func(*libc.TLS, uintptr, uint8)
	})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, skip)
start:
	skip = uint8(False)
	lookahead = (*TSLexer)(unsafe.Pointer(lexer)).Lookahead

	eof = (*struct {
		f func(*libc.TLS, uintptr) uint8
	})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Eof})).f(tls, lexer)
	switch int32(state) {
	case 0:
		goto __2
	case 1:
		goto __3
	case 2:
		goto __4
	case 3:
		goto __5
	case 4:
		goto __6
	case 5:
		goto __7
	case 6:
		goto __8
	case 7:
		goto __9
	case 8:
		goto __10
	case 9:
		goto __11
	case 10:
		goto __12
	case 11:
		goto __13
	case 12:
		goto __14
	case 13:
		goto __15
	case 14:
		goto __16
	case 15:
		goto __17
	case 16:
		goto __18
	case 17:
		goto __19
	case 18:
		goto __20
	case 19:
		goto __21
	case 20:
		goto __22
	case 21:
		goto __23
	case 22:
		goto __24
	case 23:
		goto __25
	case 24:
		goto __26
	case 25:
		goto __27
	case 26:
		goto __28
	case 27:
		goto __29
	case 28:
		goto __30
	case 29:
		goto __31
	case 30:
		goto __32
	case 31:
		goto __33
	case 32:
		goto __34
	case 33:
		goto __35
	case 34:
		goto __36
	case 35:
		goto __37
	case 36:
		goto __38
	case 37:
		goto __39
	case 38:
		goto __40
	case 39:
		goto __41
	case 40:
		goto __42
	case 41:
		goto __43
	case 42:
		goto __44
	case 43:
		goto __45
	case 44:
		goto __46
	case 45:
		goto __47
	case 46:
		goto __48
	case 47:
		goto __49
	case 48:
		goto __50
	case 49:
		goto __51
	case 50:
		goto __52
	case 51:
		goto __53
	case 52:
		goto __54
	case 53:
		goto __55
	case 54:
		goto __56
	case 55:
		goto __57
	case 56:
		goto __58
	case 57:
		goto __59
	case 58:
		goto __60
	case 59:
		goto __61
	case 60:
		goto __62
	case 61:
		goto __63
	case 62:
		goto __64
	case 63:
		goto __65
	case 64:
		goto __66
	case 65:
		goto __67
	case 66:
		goto __68
	case 67:
		goto __69
	case 68:
		goto __70
	case 69:
		goto __71
	case 70:
		goto __72
	case 71:
		goto __73
	case 72:
		goto __74
	case 73:
		goto __75
	case 74:
		goto __76
	case 75:
		goto __77
	case 76:
		goto __78
	case 77:
		goto __79
	case 78:
		goto __80
	case 79:
		goto __81
	case 80:
		goto __82
	case 81:
		goto __83
	case 82:
		goto __84
	case 83:
		goto __85
	case 84:
		goto __86
	case 85:
		goto __87
	case 86:
		goto __88
	case 87:
		goto __89
	case 88:
		goto __90
	case 89:
		goto __91
	case 90:
		goto __92
	case 91:
		goto __93
	case 92:
		goto __94
	case 93:
		goto __95
	case 94:
		goto __96
	case 95:
		goto __97
	case 96:
		goto __98
	case 97:
		goto __99
	case 98:
		goto __100
	case 99:
		goto __101
	case 100:
		goto __102
	case 101:
		goto __103
	case 102:
		goto __104
	case 103:
		goto __105
	case 104:
		goto __106
	case 105:
		goto __107
	case 106:
		goto __108
	case 107:
		goto __109
	case 108:
		goto __110
	case 109:
		goto __111
	case 110:
		goto __112
	case 111:
		goto __113
	case 112:
		goto __114
	case 113:
		goto __115
	case 114:
		goto __116
	case 115:
		goto __117
	case 116:
		goto __118
	case 117:
		goto __119
	case 118:
		goto __120
	case 119:
		goto __121
	case 120:
		goto __122
	case 121:
		goto __123
	case 122:
		goto __124
	case 123:
		goto __125
	case 124:
		goto __126
	case 125:
		goto __127
	case 126:
		goto __128
	case 127:
		goto __129
	case 128:
		goto __130
	case 129:
		goto __131
	case 130:
		goto __132
	case 131:
		goto __133
	case 132:
		goto __134
	case 133:
		goto __135
	case 134:
		goto __136
	case 135:
		goto __137
	case 136:
		goto __138
	case 137:
		goto __139
	case 138:
		goto __140
	case 139:
		goto __141
	case 140:
		goto __142
	case 141:
		goto __143
	case 142:
		goto __144
	case 143:
		goto __145
	case 144:
		goto __146
	case 145:
		goto __147
	case 146:
		goto __148
	case 147:
		goto __149
	case 148:
		goto __150
	case 149:
		goto __151
	case 150:
		goto __152
	case 151:
		goto __153
	case 152:
		goto __154
	default:
		goto __155
	}
	goto __1
__2:
	if !(lookahead == 'F') {
		goto __156
	}
	state = TSStateId(1)
	goto next_state
__156:
	;

	if !(lookahead == 'N') {
		goto __157
	}
	state = TSStateId(2)
	goto next_state
__157:
	;

	if !(lookahead == 'T') {
		goto __158
	}
	state = TSStateId(3)
	goto next_state
__158:
	;

	if !(lookahead == '\\') {
		goto __159
	}
	skip = uint8(True)
	state = TSStateId(4)
	goto next_state
__159:
	;
	if !(lookahead == '_') {
		goto __160
	}
	state = TSStateId(5)
	goto next_state
__160:
	;

	if !(lookahead == 'a') {
		goto __161
	}
	state = TSStateId(6)
	goto next_state
__161:
	;

	if !(lookahead == 'b') {
		goto __162
	}
	state = TSStateId(7)
	goto next_state
__162:
	;

	if !(lookahead == 'c') {
		goto __163
	}
	state = TSStateId(8)
	goto next_state
__163:
	;

	if !(lookahead == 'd') {
		goto __164
	}
	state = TSStateId(9)
	goto next_state
__164:
	;

	if !(lookahead == 'e') {
		goto __165
	}
	state = TSStateId(10)
	goto next_state
__165:
	;

	if !(lookahead == 'f') {
		goto __166
	}
	state = TSStateId(11)
	goto next_state
__166:
	;

	if !(lookahead == 'g') {
		goto __167
	}
	state = TSStateId(12)
	goto next_state
__167:
	;

	if !(lookahead == 'i') {
		goto __168
	}
	state = TSStateId(13)
	goto next_state
__168:
	;

	if !(lookahead == 'l') {
		goto __169
	}
	state = TSStateId(14)
	goto next_state
__169:
	;

	if !(lookahead == 'n') {
		goto __170
	}
	state = TSStateId(15)
	goto next_state
__170:
	;

	if !(lookahead == 'o') {
		goto __171
	}
	state = TSStateId(16)
	goto next_state
__171:
	;

	if !(lookahead == 'p') {
		goto __172
	}
	state = TSStateId(17)
	goto next_state
__172:
	;

	if !(lookahead == 'r') {
		goto __173
	}
	state = TSStateId(18)
	goto next_state
__173:
	;

	if !(lookahead == 't') {
		goto __174
	}
	state = TSStateId(19)
	goto next_state
__174:
	;

	if !(lookahead == 'w') {
		goto __175
	}
	state = TSStateId(20)
	goto next_state
__175:
	;

	if !(lookahead == 'y') {
		goto __176
	}
	state = TSStateId(21)
	goto next_state
__176:
	;

	if !((((((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\f')) || (lookahead == '\r')) || (lookahead == ' ')) || (lookahead == 8203)) || (lookahead == 8288)) || (lookahead == 65279)) {
		goto __177
	}
	skip = uint8(True)
	state = TSStateId(0)
	goto next_state
__177:
	;
	return result

__3:
	if !(lookahead == 'a') {
		goto __178
	}
	state = TSStateId(22)
	goto next_state
__178:
	;

	return result

__4:
	if !(lookahead == 'o') {
		goto __179
	}
	state = TSStateId(23)
	goto next_state
__179:
	;

	return result

__5:
	if !(lookahead == 'r') {
		goto __180
	}
	state = TSStateId(24)
	goto next_state
__180:
	;

	return result

__6:
	if !(lookahead == '\n') {
		goto __181
	}
	skip = uint8(True)
	state = TSStateId(0)
	goto next_state
__181:
	;
	if !(lookahead == '\r') {
		goto __182
	}
	skip = uint8(True)
	state = TSStateId(25)
	goto next_state
__182:
	;
	return result

__7:
	if !(lookahead == '_') {
		goto __183
	}
	state = TSStateId(26)
	goto next_state
__183:
	;

	return result

__8:
	if !(lookahead == 'n') {
		goto __184
	}
	state = TSStateId(27)
	goto next_state
__184:
	;

	if !(lookahead == 's') {
		goto __185
	}
	state = TSStateId(28)
	goto next_state
__185:
	;

	if !(lookahead == 'w') {
		goto __186
	}
	state = TSStateId(29)
	goto next_state
__186:
	;

	return result

__9:
	if !(lookahead == 'r') {
		goto __187
	}
	state = TSStateId(30)
	goto next_state
__187:
	;

	return result

__10:
	if !(lookahead == 'l') {
		goto __188
	}
	state = TSStateId(31)
	goto next_state
__188:
	;

	if !(lookahead == 'o') {
		goto __189
	}
	state = TSStateId(32)
	goto next_state
__189:
	;

	return result

__11:
	if !(lookahead == 'e') {
		goto __190
	}
	state = TSStateId(33)
	goto next_state
__190:
	;

	return result

__12:
	if !(lookahead == 'l') {
		goto __191
	}
	state = TSStateId(34)
	goto next_state
__191:
	;

	if !(lookahead == 'x') {
		goto __192
	}
	state = TSStateId(35)
	goto next_state
__192:
	;

	return result

__13:
	if !(lookahead == 'i') {
		goto __193
	}
	state = TSStateId(36)
	goto next_state
__193:
	;

	if !(lookahead == 'o') {
		goto __194
	}
	state = TSStateId(37)
	goto next_state
__194:
	;

	if !(lookahead == 'r') {
		goto __195
	}
	state = TSStateId(38)
	goto next_state
__195:
	;

	return result

__14:
	if !(lookahead == 'l') {
		goto __196
	}
	state = TSStateId(39)
	goto next_state
__196:
	;

	return result

__15:
	if !(lookahead == 'f') {
		goto __197
	}
	state = TSStateId(40)
	goto next_state
__197:
	;

	if !(lookahead == 'm') {
		goto __198
	}
	state = TSStateId(41)
	goto next_state
__198:
	;

	if !(lookahead == 'n') {
		goto __199
	}
	state = TSStateId(42)
	goto next_state
__199:
	;

	if !(lookahead == 's') {
		goto __200
	}
	state = TSStateId(43)
	goto next_state
__200:
	;

	return result

__16:
	if !(lookahead == 'a') {
		goto __201
	}
	state = TSStateId(44)
	goto next_state
__201:
	;

	return result

__17:
	if !(lookahead == 'o') {
		goto __202
	}
	state = TSStateId(45)
	goto next_state
__202:
	;

	return result

__18:
	if !(lookahead == 'r') {
		goto __203
	}
	state = TSStateId(46)
	goto next_state
__203:
	;

	return result

__19:
	if !(lookahead == 'a') {
		goto __204
	}
	state = TSStateId(47)
	goto next_state
__204:
	;

	if !(lookahead == 'r') {
		goto __205
	}
	state = TSStateId(48)
	goto next_state
__205:
	;

	return result

__20:
	if !(lookahead == 'a') {
		goto __206
	}
	state = TSStateId(49)
	goto next_state
__206:
	;

	if !(lookahead == 'e') {
		goto __207
	}
	state = TSStateId(50)
	goto next_state
__207:
	;

	return result

__21:
	if !(lookahead == 'r') {
		goto __208
	}
	state = TSStateId(51)
	goto next_state
__208:
	;

	return result

__22:
	if !(lookahead == 'h') {
		goto __209
	}
	state = TSStateId(52)
	goto next_state
__209:
	;

	if !(lookahead == 'i') {
		goto __210
	}
	state = TSStateId(53)
	goto next_state
__210:
	;

	return result

__23:
	if !(lookahead == 'i') {
		goto __211
	}
	state = TSStateId(54)
	goto next_state
__211:
	;

	return result

__24:
	if !(lookahead == 'l') {
		goto __212
	}
	state = TSStateId(55)
	goto next_state
__212:
	;

	return result

__25:
	if !(lookahead == 'n') {
		goto __213
	}
	state = TSStateId(56)
	goto next_state
__213:
	;

	return result

__26:
	if !(lookahead == 'u') {
		goto __214
	}
	state = TSStateId(57)
	goto next_state
__214:
	;

	return result

__27:
	if !(lookahead == '\n') {
		goto __215
	}
	skip = uint8(True)
	state = TSStateId(0)
	goto next_state
__215:
	;
	return result

__28:
	if !(lookahead == 'f') {
		goto __216
	}
	state = TSStateId(58)
	goto next_state
__216:
	;

	return result

__29:
	if !(lookahead == 'd') {
		goto __217
	}
	state = TSStateId(59)
	goto next_state
__217:
	;

	return result

__30:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_as
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == 's') {
		goto __218
	}
	state = TSStateId(60)
	goto next_state
__218:
	;

	if !(lookahead == 'y') {
		goto __219
	}
	state = TSStateId(61)
	goto next_state
__219:
	;

	return result

__31:
	if !(lookahead == 'a') {
		goto __220
	}
	state = TSStateId(62)
	goto next_state
__220:
	;

	return result

__32:
	if !(lookahead == 'e') {
		goto __221
	}
	state = TSStateId(63)
	goto next_state
__221:
	;

	return result

__33:
	if !(lookahead == 'a') {
		goto __222
	}
	state = TSStateId(64)
	goto next_state
__222:
	;

	return result

__34:
	if !(lookahead == 'n') {
		goto __223
	}
	state = TSStateId(65)
	goto next_state
__223:
	;

	return result

__35:
	if !(lookahead == 'f') {
		goto __224
	}
	state = TSStateId(66)
	goto next_state
__224:
	;

	if !(lookahead == 'l') {
		goto __225
	}
	state = TSStateId(67)
	goto next_state
__225:
	;

	return result

__36:
	if !(lookahead == 'i') {
		goto __226
	}
	state = TSStateId(68)
	goto next_state
__226:
	;

	if !(lookahead == 's') {
		goto __227
	}
	state = TSStateId(69)
	goto next_state
__227:
	;

	return result

__37:
	if !(lookahead == 'c') {
		goto __228
	}
	state = TSStateId(70)
	goto next_state
__228:
	;

	if !(lookahead == 'e') {
		goto __229
	}
	state = TSStateId(71)
	goto next_state
__229:
	;

	return result

__38:
	if !(lookahead == 'n') {
		goto __230
	}
	state = TSStateId(72)
	goto next_state
__230:
	;

	return result

__39:
	if !(lookahead == 'r') {
		goto __231
	}
	state = TSStateId(73)
	goto next_state
__231:
	;

	return result

__40:
	if !(lookahead == 'o') {
		goto __232
	}
	state = TSStateId(74)
	goto next_state
__232:
	;

	return result

__41:
	if !(lookahead == 'o') {
		goto __233
	}
	state = TSStateId(75)
	goto next_state
__233:
	;

	return result

__42:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_if
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__43:
	if !(lookahead == 'p') {
		goto __234
	}
	state = TSStateId(76)
	goto next_state
__234:
	;

	return result

__44:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_in
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__45:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_is
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__46:
	if !(lookahead == 'm') {
		goto __235
	}
	state = TSStateId(77)
	goto next_state
__235:
	;

	return result

__47:
	if !(lookahead == 'n') {
		goto __236
	}
	state = TSStateId(78)
	goto next_state
__236:
	;

	if !(lookahead == 't') {
		goto __237
	}
	state = TSStateId(79)
	goto next_state
__237:
	;

	return result

__48:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_or
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__49:
	if !(lookahead == 's') {
		goto __238
	}
	state = TSStateId(80)
	goto next_state
__238:
	;

	return result

__50:
	if !(lookahead == 'i') {
		goto __239
	}
	state = TSStateId(81)
	goto next_state
__239:
	;

	return result

__51:
	if !(lookahead == 'i') {
		goto __240
	}
	state = TSStateId(82)
	goto next_state
__240:
	;

	return result

__52:
	if !(lookahead == 't') {
		goto __241
	}
	state = TSStateId(83)
	goto next_state
__241:
	;

	return result

__53:
	if !(lookahead == 'y') {
		goto __242
	}
	state = TSStateId(84)
	goto next_state
__242:
	;

	return result

__54:
	if !(lookahead == 'i') {
		goto __243
	}
	state = TSStateId(85)
	goto next_state
__243:
	;

	return result

__55:
	if !(lookahead == 't') {
		goto __244
	}
	state = TSStateId(86)
	goto next_state
__244:
	;

	return result

__56:
	if !(lookahead == 'e') {
		goto __245
	}
	state = TSStateId(87)
	goto next_state
__245:
	;

	return result

__57:
	if !(lookahead == 's') {
		goto __246
	}
	state = TSStateId(88)
	goto next_state
__246:
	;

	return result

__58:
	if !(lookahead == 'e') {
		goto __247
	}
	state = TSStateId(89)
	goto next_state
__247:
	;

	return result

__59:
	if !(lookahead == 'e') {
		goto __248
	}
	state = TSStateId(90)
	goto next_state
__248:
	;

	return result

__60:
	if !(lookahead == 'u') {
		goto __249
	}
	state = TSStateId(91)
	goto next_state
__249:
	;

	return result

__61:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_and
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__62:
	if !(lookahead == 'e') {
		goto __250
	}
	state = TSStateId(92)
	goto next_state
__250:
	;

	return result

__63:
	if !(lookahead == 'n') {
		goto __251
	}
	state = TSStateId(93)
	goto next_state
__251:
	;

	return result

__64:
	if !(lookahead == 'i') {
		goto __252
	}
	state = TSStateId(94)
	goto next_state
__252:
	;

	return result

__65:
	if !(lookahead == 'a') {
		goto __253
	}
	state = TSStateId(95)
	goto next_state
__253:
	;

	return result

__66:
	if !(lookahead == 's') {
		goto __254
	}
	state = TSStateId(96)
	goto next_state
__254:
	;

	return result

__67:
	if !(lookahead == 't') {
		goto __255
	}
	state = TSStateId(97)
	goto next_state
__255:
	;

	return result

__68:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_def
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__69:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_del
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__70:
	if !(lookahead == 'f') {
		goto __256
	}
	state = TSStateId(98)
	goto next_state
__256:
	;

	return result

__71:
	if !(lookahead == 'e') {
		goto __257
	}
	state = TSStateId(99)
	goto next_state
__257:
	;

	return result

__72:
	if !(lookahead == 'e') {
		goto __258
	}
	state = TSStateId(100)
	goto next_state
__258:
	;

	return result

__73:
	if !(lookahead == 'c') {
		goto __259
	}
	state = TSStateId(101)
	goto next_state
__259:
	;

	return result

__74:
	if !(lookahead == 'a') {
		goto __260
	}
	state = TSStateId(102)
	goto next_state
__260:
	;

	return result

__75:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_for
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__76:
	if !(lookahead == 'm') {
		goto __261
	}
	state = TSStateId(103)
	goto next_state
__261:
	;

	return result

__77:
	if !(lookahead == 'b') {
		goto __262
	}
	state = TSStateId(104)
	goto next_state
__262:
	;

	return result

__78:
	if !(lookahead == 'o') {
		goto __263
	}
	state = TSStateId(105)
	goto next_state
__263:
	;

	return result

__79:
	if !(lookahead == 'b') {
		goto __264
	}
	state = TSStateId(106)
	goto next_state
__264:
	;

	return result

__80:
	if !(lookahead == 'l') {
		goto __265
	}
	state = TSStateId(107)
	goto next_state
__265:
	;

	return result

__81:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_not
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__82:
	if !(lookahead == 's') {
		goto __266
	}
	state = TSStateId(108)
	goto next_state
__266:
	;

	return result

__83:
	if !(lookahead == 'n') {
		goto __267
	}
	state = TSStateId(109)
	goto next_state
__267:
	;

	return result

__84:
	if !(lookahead == 's') {
		goto __268
	}
	state = TSStateId(110)
	goto next_state
__268:
	;

	return result

__85:
	if !(lookahead == 'u') {
		goto __269
	}
	state = TSStateId(111)
	goto next_state
__269:
	;

	return result

__86:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_try
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__87:
	if !(lookahead == 'l') {
		goto __270
	}
	state = TSStateId(112)
	goto next_state
__270:
	;

	return result

__88:
	if !(lookahead == 'h') {
		goto __271
	}
	state = TSStateId(113)
	goto next_state
__271:
	;

	return result

__89:
	if !(lookahead == 'l') {
		goto __272
	}
	state = TSStateId(114)
	goto next_state
__272:
	;

	return result

__90:
	if !(lookahead == 'e') {
		goto __273
	}
	state = TSStateId(115)
	goto next_state
__273:
	;

	return result

__91:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_none
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__92:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_true
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__93:
	if !(lookahead == 't') {
		goto __274
	}
	state = TSStateId(116)
	goto next_state
__274:
	;

	return result

__94:
	if !(lookahead == 'r') {
		goto __275
	}
	state = TSStateId(117)
	goto next_state
__275:
	;

	return result

__95:
	if !(lookahead == 'c') {
		goto __276
	}
	state = TSStateId(118)
	goto next_state
__276:
	;

	return result

__96:
	if !(lookahead == 't') {
		goto __277
	}
	state = TSStateId(119)
	goto next_state
__277:
	;

	return result

__97:
	if !(lookahead == 'k') {
		goto __278
	}
	state = TSStateId(120)
	goto next_state
__278:
	;

	return result

__98:
	if !(lookahead == 's') {
		goto __279
	}
	state = TSStateId(121)
	goto next_state
__279:
	;

	return result

__99:
	if !(lookahead == 'i') {
		goto __280
	}
	state = TSStateId(122)
	goto next_state
__280:
	;

	return result

__100:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_elif
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__101:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_else
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__102:
	if !(lookahead == 'p') {
		goto __281
	}
	state = TSStateId(123)
	goto next_state
__281:
	;

	return result

__103:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_exec
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__104:
	if !(lookahead == 'l') {
		goto __282
	}
	state = TSStateId(124)
	goto next_state
__282:
	;

	return result

__105:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_from
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__106:
	if !(lookahead == 'a') {
		goto __283
	}
	state = TSStateId(125)
	goto next_state
__283:
	;

	return result

__107:
	if !(lookahead == 'r') {
		goto __284
	}
	state = TSStateId(126)
	goto next_state
__284:
	;

	return result

__108:
	if !(lookahead == 'd') {
		goto __285
	}
	state = TSStateId(127)
	goto next_state
__285:
	;

	return result

__109:
	if !(lookahead == 'o') {
		goto __286
	}
	state = TSStateId(128)
	goto next_state
__286:
	;

	return result

__110:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_pass
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__111:
	if !(lookahead == 't') {
		goto __287
	}
	state = TSStateId(129)
	goto next_state
__287:
	;

	return result

__112:
	if !(lookahead == 'e') {
		goto __288
	}
	state = TSStateId(130)
	goto next_state
__288:
	;

	return result

__113:
	if !(lookahead == 'r') {
		goto __289
	}
	state = TSStateId(131)
	goto next_state
__289:
	;

	return result

__114:
	if !(lookahead == 'e') {
		goto __290
	}
	state = TSStateId(132)
	goto next_state
__290:
	;

	return result

__115:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_with
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__116:
	if !(lookahead == 'd') {
		goto __291
	}
	state = TSStateId(133)
	goto next_state
__291:
	;

	return result

__117:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_false
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__118:
	if !(lookahead == 'u') {
		goto __292
	}
	state = TSStateId(134)
	goto next_state
__292:
	;

	return result

__119:
	if !(lookahead == 't') {
		goto __293
	}
	state = TSStateId(135)
	goto next_state
__293:
	;

	return result

__120:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_async
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__121:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_await
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__122:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_break
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__123:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_class
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__124:
	if !(lookahead == 'n') {
		goto __294
	}
	state = TSStateId(136)
	goto next_state
__294:
	;

	return result

__125:
	if !(lookahead == 't') {
		goto __295
	}
	state = TSStateId(137)
	goto next_state
__295:
	;

	return result

__126:
	if !(lookahead == 'l') {
		goto __296
	}
	state = TSStateId(138)
	goto next_state
__296:
	;

	return result

__127:
	if !(lookahead == 'l') {
		goto __297
	}
	state = TSStateId(139)
	goto next_state
__297:
	;

	return result

__128:
	if !(lookahead == 't') {
		goto __298
	}
	state = TSStateId(140)
	goto next_state
__298:
	;

	return result

__129:
	if !(lookahead == 'a') {
		goto __299
	}
	state = TSStateId(141)
	goto next_state
__299:
	;

	return result

__130:
	if !(lookahead == 'c') {
		goto __300
	}
	state = TSStateId(142)
	goto next_state
__300:
	;

	return result

__131:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_print
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__132:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_raise
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__133:
	if !(lookahead == 'n') {
		goto __301
	}
	state = TSStateId(143)
	goto next_state
__301:
	;

	return result

__134:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_while
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__135:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_yield
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__136:
	if !(lookahead == 'r') {
		goto __302
	}
	state = TSStateId(144)
	goto next_state
__302:
	;

	return result

__137:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_assert
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__138:
	if !(lookahead == 'u') {
		goto __303
	}
	state = TSStateId(145)
	goto next_state
__303:
	;

	return result

__139:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_except
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__140:
	if !(lookahead == 'y') {
		goto __304
	}
	state = TSStateId(146)
	goto next_state
__304:
	;

	return result

__141:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_global
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__142:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_import
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__143:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_lambda
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__144:
	if !(lookahead == 'a') {
		goto __305
	}
	state = TSStateId(147)
	goto next_state
__305:
	;

	return result

__145:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_return
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__146:
	if !(lookahead == 'e') {
		goto __306
	}
	state = TSStateId(148)
	goto next_state
__306:
	;

	return result

__147:
	if !(lookahead == 'e') {
		goto __307
	}
	state = TSStateId(149)
	goto next_state
__307:
	;

	return result

__148:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_finally
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__149:
	if !(lookahead == 'l') {
		goto __308
	}
	state = TSStateId(150)
	goto next_state
__308:
	;

	return result

__150:
	if !(lookahead == '_') {
		goto __309
	}
	state = TSStateId(151)
	goto next_state
__309:
	;

	return result

__151:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_continue
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__152:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_nonlocal
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__153:
	if !(lookahead == '_') {
		goto __310
	}
	state = TSStateId(152)
	goto next_state
__310:
	;

	return result

__154:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym___future__
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__155:
	return uint8(False)
__1:
	;
	return uint8(0)
}

var ts_lex_modes = [1088]TSLexMode{{External_lex_state: Uint16_t(1)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(5)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(9), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(3)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(9)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(9)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(9)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(9), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(9)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(38), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(9)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(2)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(9)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(9)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {}, {}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {}, {}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(10)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(10)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {}, {}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {External_lex_state: Uint16_t(6)}, {}, {External_lex_state: Uint16_t(6)}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(4)}, {}, {}, {}, {Lex_state: Uint16_t(10), External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(4)}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {}, {Lex_state: Uint16_t(10)}, {}, {}, {Lex_state: Uint16_t(12), External_lex_state: Uint16_t(7)}, {}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(4)}, {External_lex_state: Uint16_t(6)}, {}, {External_lex_state: Uint16_t(6)}, {}, {}, {}, {}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {}, {}, {Lex_state: Uint16_t(10)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {}, {}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(10)}, {External_lex_state: Uint16_t(6)}, {}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {}, {}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {External_lex_state: Uint16_t(6)}, {}, {}, {External_lex_state: Uint16_t(6)}, {}, {External_lex_state: Uint16_t(6)}, {}, {}, {Lex_state: Uint16_t(4)}, {}, {}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {}, {}, {External_lex_state: Uint16_t(6)}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {}, {External_lex_state: Uint16_t(6)}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(11)}, {External_lex_state: Uint16_t(6)}, {}, {}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(38)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {}, {External_lex_state: Uint16_t(6)}, {}, {External_lex_state: Uint16_t(6)}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(11)}, {}, {Lex_state: Uint16_t(11)}, {}, {External_lex_state: Uint16_t(6)}, {}, {Lex_state: Uint16_t(11)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(11)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {}, {}, {}, {}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {External_lex_state: Uint16_t(6)}, {Lex_state: Uint16_t(11)}, {External_lex_state: Uint16_t(6)}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {Lex_state: Uint16_t(38)}, {Lex_state: Uint16_t(38)}, {}, {}, {}, {}, {}, {Lex_state: Uint16_t(38)}, {}, {}, {}} /* parser.c:3371:18 */

var ts_external_scanner_symbol_map = [6]TSSymbol{Sym__newline, Sym__indent, Sym__dedent, Sym__string_start, Sym__string_content, Sym__string_end} /* parser.c:4471:17 */

var ts_external_scanner_states = [8][6]uint8{1: {uint8(True), uint8(True), uint8(True), uint8(True), uint8(True), uint8(True)}, 2: {3: uint8(True)}, 3: {2: uint8(True), 3: uint8(True)}, 4: {0: uint8(True), 3: uint8(True)}, 5: {0: uint8(True), 1: uint8(True), 3: uint8(True)}, 6: {0: uint8(True)}, 7: {4: uint8(True), 5: uint8(True)},
} /* parser.c:4480:13 */

var ts_parse_table = [101][227]Uint16_t{{0: Uint16_t(1), 1: Uint16_t(1), 2: Uint16_t(1), 3: Uint16_t(1), 4: Uint16_t(1), 5: Uint16_t(1), 6: Uint16_t(1), 7: Uint16_t(1), 8: Uint16_t(1), 9: Uint16_t(1), 10: Uint16_t(1), 11: Uint16_t(1), 12: Uint16_t(1), 13: Uint16_t(1), 14: Uint16_t(1), 15: Uint16_t(1), 16: Uint16_t(1), 17: Uint16_t(1), 18: Uint16_t(1), 19: Uint16_t(1), 20: Uint16_t(1), 21: Uint16_t(1), 22: Uint16_t(1), 23: Uint16_t(1), 24: Uint16_t(1), 25: Uint16_t(1), 26: Uint16_t(1), 27: Uint16_t(1), 28: Uint16_t(1), 29: Uint16_t(1), 30: Uint16_t(1), 31: Uint16_t(1), 32: Uint16_t(1), 33: Uint16_t(1), 34: Uint16_t(1), 35: Uint16_t(1), 36: Uint16_t(1), 37: Uint16_t(1), 38: Uint16_t(1), 39: Uint16_t(1), 40: Uint16_t(1), 41: Uint16_t(1), 42: Uint16_t(1), 43: Uint16_t(1), 44: Uint16_t(1), 45: Uint16_t(1), 46: Uint16_t(1), 47: Uint16_t(1), 48: Uint16_t(1), 49: Uint16_t(1), 50: Uint16_t(1), 51: Uint16_t(1), 52: Uint16_t(1), 53: Uint16_t(1), 54: Uint16_t(1), 55: Uint16_t(1), 56: Uint16_t(1), 57: Uint16_t(1), 58: Uint16_t(1), 59: Uint16_t(1), 60: Uint16_t(1), 61: Uint16_t(1), 62: Uint16_t(1), 63: Uint16_t(1), 64: Uint16_t(1), 65: Uint16_t(1), 66: Uint16_t(1), 67: Uint16_t(1), 68: Uint16_t(1), 69: Uint16_t(1), 70: Uint16_t(1), 71: Uint16_t(1), 72: Uint16_t(1), 73: Uint16_t(1), 74: Uint16_t(1), 75: Uint16_t(1), 76: Uint16_t(1), 77: Uint16_t(1), 78: Uint16_t(1), 79: Uint16_t(1), 80: Uint16_t(1), 81: Uint16_t(1), 82: Uint16_t(1), 86: Uint16_t(1), 87: Uint16_t(1), 88: Uint16_t(1), 89: Uint16_t(1), 90: Uint16_t(1), 91: Uint16_t(1), 92: Uint16_t(1), 93: Uint16_t(3), 94: Uint16_t(1), 95: Uint16_t(1), 96: Uint16_t(1), 97: Uint16_t(1), 98: Uint16_t(1), 99: Uint16_t(1), 100: Uint16_t(1)}, {0: Uint16_t(5), 1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(33), 25: Uint16_t(35), 26: Uint16_t(37), 28: Uint16_t(39), 29: Uint16_t(41), 32: Uint16_t(43), 33: Uint16_t(45), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(53), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 98: Uint16_t(75), 101: Uint16_t(1065), 102: Uint16_t(45), 103: Uint16_t(45), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 123: Uint16_t(45), 126: Uint16_t(45), 127: Uint16_t(45), 128: Uint16_t(45), 131: Uint16_t(45), 134: Uint16_t(45), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 142: Uint16_t(45), 145: Uint16_t(45), 146: Uint16_t(720), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(45), 214: Uint16_t(720)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(336), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(281), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(386), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(309), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(333), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(358), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(410), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(331), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(353), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(97), 98: Uint16_t(75), 102: Uint16_t(43), 103: Uint16_t(43), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(43), 126: Uint16_t(43), 127: Uint16_t(43), 128: Uint16_t(43), 131: Uint16_t(43), 134: Uint16_t(43), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(43), 145: Uint16_t(43), 146: Uint16_t(717), 147: Uint16_t(797), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(43), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(344), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(378), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(415), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(190), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(346), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(420), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(397), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(423), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(196), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(389), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(335), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(303), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(337), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(400), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(352), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(408), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(379), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(361), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(368), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(267), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(321), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(369), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(363), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(97), 98: Uint16_t(75), 102: Uint16_t(43), 103: Uint16_t(43), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(43), 126: Uint16_t(43), 127: Uint16_t(43), 128: Uint16_t(43), 131: Uint16_t(43), 134: Uint16_t(43), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(43), 145: Uint16_t(43), 146: Uint16_t(717), 147: Uint16_t(794), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(43), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(418), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(95), 98: Uint16_t(75), 102: Uint16_t(44), 103: Uint16_t(44), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(44), 126: Uint16_t(44), 127: Uint16_t(44), 128: Uint16_t(44), 131: Uint16_t(44), 134: Uint16_t(44), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(44), 145: Uint16_t(44), 146: Uint16_t(717), 147: Uint16_t(385), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(44), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(338), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(93), 98: Uint16_t(75), 102: Uint16_t(41), 103: Uint16_t(41), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(41), 126: Uint16_t(41), 127: Uint16_t(41), 128: Uint16_t(41), 131: Uint16_t(41), 134: Uint16_t(41), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(41), 145: Uint16_t(41), 146: Uint16_t(717), 147: Uint16_t(314), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(41), 214: Uint16_t(717)}, {1: Uint16_t(99), 2: Uint16_t(102), 4: Uint16_t(105), 6: Uint16_t(108), 10: Uint16_t(111), 11: Uint16_t(114), 13: Uint16_t(117), 15: Uint16_t(120), 16: Uint16_t(123), 17: Uint16_t(126), 18: Uint16_t(129), 19: Uint16_t(132), 20: Uint16_t(135), 21: Uint16_t(138), 25: Uint16_t(141), 26: Uint16_t(144), 28: Uint16_t(147), 29: Uint16_t(150), 32: Uint16_t(153), 33: Uint16_t(156), 36: Uint16_t(159), 37: Uint16_t(162), 38: Uint16_t(165), 39: Uint16_t(168), 40: Uint16_t(171), 41: Uint16_t(174), 44: Uint16_t(177), 47: Uint16_t(180), 48: Uint16_t(180), 56: Uint16_t(180), 65: Uint16_t(183), 79: Uint16_t(186), 80: Uint16_t(189), 81: Uint16_t(192), 87: Uint16_t(195), 88: Uint16_t(189), 89: Uint16_t(198), 90: Uint16_t(195), 91: Uint16_t(195), 92: Uint16_t(195), 93: Uint16_t(3), 97: Uint16_t(201), 98: Uint16_t(203), 102: Uint16_t(40), 103: Uint16_t(40), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(40), 126: Uint16_t(40), 127: Uint16_t(40), 128: Uint16_t(40), 131: Uint16_t(40), 134: Uint16_t(40), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(40), 145: Uint16_t(40), 146: Uint16_t(717), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(40), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(206), 98: Uint16_t(75), 102: Uint16_t(40), 103: Uint16_t(40), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(40), 126: Uint16_t(40), 127: Uint16_t(40), 128: Uint16_t(40), 131: Uint16_t(40), 134: Uint16_t(40), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(40), 145: Uint16_t(40), 146: Uint16_t(717), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(40), 214: Uint16_t(717)}, {0: Uint16_t(201), 1: Uint16_t(99), 2: Uint16_t(102), 4: Uint16_t(105), 6: Uint16_t(108), 10: Uint16_t(111), 11: Uint16_t(114), 13: Uint16_t(117), 15: Uint16_t(120), 16: Uint16_t(123), 17: Uint16_t(126), 18: Uint16_t(129), 19: Uint16_t(132), 20: Uint16_t(135), 21: Uint16_t(208), 25: Uint16_t(211), 26: Uint16_t(214), 28: Uint16_t(217), 29: Uint16_t(220), 32: Uint16_t(223), 33: Uint16_t(226), 36: Uint16_t(159), 37: Uint16_t(162), 38: Uint16_t(165), 39: Uint16_t(229), 40: Uint16_t(171), 41: Uint16_t(174), 44: Uint16_t(177), 47: Uint16_t(180), 48: Uint16_t(180), 56: Uint16_t(180), 65: Uint16_t(183), 79: Uint16_t(186), 80: Uint16_t(189), 81: Uint16_t(192), 87: Uint16_t(195), 88: Uint16_t(189), 89: Uint16_t(198), 90: Uint16_t(195), 91: Uint16_t(195), 92: Uint16_t(195), 93: Uint16_t(3), 98: Uint16_t(203), 102: Uint16_t(42), 103: Uint16_t(42), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 123: Uint16_t(42), 126: Uint16_t(42), 127: Uint16_t(42), 128: Uint16_t(42), 131: Uint16_t(42), 134: Uint16_t(42), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 142: Uint16_t(42), 145: Uint16_t(42), 146: Uint16_t(720), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(42), 214: Uint16_t(720)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(232), 98: Uint16_t(75), 102: Uint16_t(40), 103: Uint16_t(40), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(40), 126: Uint16_t(40), 127: Uint16_t(40), 128: Uint16_t(40), 131: Uint16_t(40), 134: Uint16_t(40), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(40), 145: Uint16_t(40), 146: Uint16_t(717), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(40), 214: Uint16_t(717)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(77), 25: Uint16_t(79), 26: Uint16_t(81), 28: Uint16_t(83), 29: Uint16_t(85), 32: Uint16_t(87), 33: Uint16_t(89), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(91), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 97: Uint16_t(234), 98: Uint16_t(75), 102: Uint16_t(40), 103: Uint16_t(40), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 123: Uint16_t(40), 126: Uint16_t(40), 127: Uint16_t(40), 128: Uint16_t(40), 131: Uint16_t(40), 134: Uint16_t(40), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 142: Uint16_t(40), 145: Uint16_t(40), 146: Uint16_t(717), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(40), 214: Uint16_t(717)}, {0: Uint16_t(236), 1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 21: Uint16_t(33), 25: Uint16_t(35), 26: Uint16_t(37), 28: Uint16_t(39), 29: Uint16_t(41), 32: Uint16_t(43), 33: Uint16_t(45), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 39: Uint16_t(53), 40: Uint16_t(55), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 98: Uint16_t(75), 102: Uint16_t(42), 103: Uint16_t(42), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 123: Uint16_t(42), 126: Uint16_t(42), 127: Uint16_t(42), 128: Uint16_t(42), 131: Uint16_t(42), 134: Uint16_t(42), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 142: Uint16_t(42), 145: Uint16_t(42), 146: Uint16_t(720), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709), 203: Uint16_t(42), 214: Uint16_t(720)}, {1: Uint16_t(238), 3: Uint16_t(240), 6: Uint16_t(242), 8: Uint16_t(244), 10: Uint16_t(240), 11: Uint16_t(247), 12: Uint16_t(249), 21: Uint16_t(240), 22: Uint16_t(251), 25: Uint16_t(247), 27: Uint16_t(240), 35: Uint16_t(240), 38: Uint16_t(247), 40: Uint16_t(240), 41: Uint16_t(242), 43: Uint16_t(253), 44: Uint16_t(240), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(240), 48: Uint16_t(240), 49: Uint16_t(240), 50: Uint16_t(240), 51: Uint16_t(240), 52: Uint16_t(240), 53: Uint16_t(240), 54: Uint16_t(240), 55: Uint16_t(240), 56: Uint16_t(61), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(63), 66: Uint16_t(251), 67: Uint16_t(251), 68: Uint16_t(251), 69: Uint16_t(251), 70: Uint16_t(251), 71: Uint16_t(251), 72: Uint16_t(251), 73: Uint16_t(251), 74: Uint16_t(251), 75: Uint16_t(251), 76: Uint16_t(251), 77: Uint16_t(251), 78: Uint16_t(251), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(255), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 94: Uint16_t(242), 95: Uint16_t(242), 98: Uint16_t(75), 113: Uint16_t(855), 116: Uint16_t(709), 161: Uint16_t(742), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 175: Uint16_t(605), 176: Uint16_t(605), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(238), 3: Uint16_t(240), 6: Uint16_t(257), 8: Uint16_t(244), 10: Uint16_t(240), 11: Uint16_t(247), 12: Uint16_t(240), 21: Uint16_t(240), 22: Uint16_t(251), 25: Uint16_t(247), 27: Uint16_t(240), 35: Uint16_t(240), 38: Uint16_t(247), 40: Uint16_t(240), 41: Uint16_t(259), 43: Uint16_t(253), 44: Uint16_t(59), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(261), 48: Uint16_t(261), 49: Uint16_t(240), 50: Uint16_t(240), 51: Uint16_t(240), 52: Uint16_t(240), 53: Uint16_t(240), 54: Uint16_t(240), 55: Uint16_t(240), 56: Uint16_t(61), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(63), 66: Uint16_t(251), 67: Uint16_t(251), 68: Uint16_t(251), 69: Uint16_t(251), 70: Uint16_t(251), 71: Uint16_t(251), 72: Uint16_t(251), 73: Uint16_t(251), 74: Uint16_t(251), 75: Uint16_t(251), 76: Uint16_t(251), 77: Uint16_t(251), 78: Uint16_t(251), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(255), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 94: Uint16_t(242), 95: Uint16_t(242), 98: Uint16_t(75), 116: Uint16_t(709), 161: Uint16_t(710), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 175: Uint16_t(605), 176: Uint16_t(605), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(265), 96: Uint16_t(267), 98: Uint16_t(75), 103: Uint16_t(421), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(269), 96: Uint16_t(271), 98: Uint16_t(75), 103: Uint16_t(329), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(273), 96: Uint16_t(275), 98: Uint16_t(75), 103: Uint16_t(409), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(277), 96: Uint16_t(279), 98: Uint16_t(75), 103: Uint16_t(328), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(281), 96: Uint16_t(283), 98: Uint16_t(75), 103: Uint16_t(279), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(285), 96: Uint16_t(287), 98: Uint16_t(75), 103: Uint16_t(377), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(289), 96: Uint16_t(291), 98: Uint16_t(75), 103: Uint16_t(371), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(293), 96: Uint16_t(295), 98: Uint16_t(75), 103: Uint16_t(398), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(297), 96: Uint16_t(299), 98: Uint16_t(75), 103: Uint16_t(260), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(301), 96: Uint16_t(303), 98: Uint16_t(75), 103: Uint16_t(362), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(305), 96: Uint16_t(307), 98: Uint16_t(75), 103: Uint16_t(339), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(309), 96: Uint16_t(311), 98: Uint16_t(75), 103: Uint16_t(342), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(313), 96: Uint16_t(315), 98: Uint16_t(75), 103: Uint16_t(341), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(317), 96: Uint16_t(319), 98: Uint16_t(75), 103: Uint16_t(209), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(321), 96: Uint16_t(323), 98: Uint16_t(75), 103: Uint16_t(295), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(325), 96: Uint16_t(327), 98: Uint16_t(75), 103: Uint16_t(427), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(329), 96: Uint16_t(331), 98: Uint16_t(75), 103: Uint16_t(413), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(333), 96: Uint16_t(335), 98: Uint16_t(75), 103: Uint16_t(812), 104: Uint16_t(878), 107: Uint16_t(878), 108: Uint16_t(878), 112: Uint16_t(878), 114: Uint16_t(878), 115: Uint16_t(878), 116: Uint16_t(709), 117: Uint16_t(878), 118: Uint16_t(878), 119: Uint16_t(878), 120: Uint16_t(878), 121: Uint16_t(878), 122: Uint16_t(878), 139: Uint16_t(878), 140: Uint16_t(878), 141: Uint16_t(878), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(337), 96: Uint16_t(339), 98: Uint16_t(75), 103: Uint16_t(381), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(341), 96: Uint16_t(343), 98: Uint16_t(75), 103: Uint16_t(354), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(345), 96: Uint16_t(347), 98: Uint16_t(75), 103: Uint16_t(205), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(349), 96: Uint16_t(351), 98: Uint16_t(75), 103: Uint16_t(345), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(353), 96: Uint16_t(355), 98: Uint16_t(75), 103: Uint16_t(403), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(357), 96: Uint16_t(359), 98: Uint16_t(75), 103: Uint16_t(404), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(361), 96: Uint16_t(363), 98: Uint16_t(75), 103: Uint16_t(326), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(365), 96: Uint16_t(367), 98: Uint16_t(75), 103: Uint16_t(254), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(369), 96: Uint16_t(371), 98: Uint16_t(75), 103: Uint16_t(366), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(373), 96: Uint16_t(375), 98: Uint16_t(75), 103: Uint16_t(393), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(377), 96: Uint16_t(379), 98: Uint16_t(75), 103: Uint16_t(349), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(381), 96: Uint16_t(383), 98: Uint16_t(75), 103: Uint16_t(384), 104: Uint16_t(883), 107: Uint16_t(883), 108: Uint16_t(883), 112: Uint16_t(883), 114: Uint16_t(883), 115: Uint16_t(883), 116: Uint16_t(709), 117: Uint16_t(883), 118: Uint16_t(883), 119: Uint16_t(883), 120: Uint16_t(883), 121: Uint16_t(883), 122: Uint16_t(883), 139: Uint16_t(883), 140: Uint16_t(883), 141: Uint16_t(883), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(385), 96: Uint16_t(387), 98: Uint16_t(75), 103: Uint16_t(375), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(389), 96: Uint16_t(391), 98: Uint16_t(75), 103: Uint16_t(315), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(393), 96: Uint16_t(395), 98: Uint16_t(75), 103: Uint16_t(809), 104: Uint16_t(878), 107: Uint16_t(878), 108: Uint16_t(878), 112: Uint16_t(878), 114: Uint16_t(878), 115: Uint16_t(878), 116: Uint16_t(709), 117: Uint16_t(878), 118: Uint16_t(878), 119: Uint16_t(878), 120: Uint16_t(878), 121: Uint16_t(878), 122: Uint16_t(878), 139: Uint16_t(878), 140: Uint16_t(878), 141: Uint16_t(878), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(397), 96: Uint16_t(399), 98: Uint16_t(75), 103: Uint16_t(407), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(401), 96: Uint16_t(403), 98: Uint16_t(75), 103: Uint16_t(273), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(405), 96: Uint16_t(407), 98: Uint16_t(75), 103: Uint16_t(405), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(409), 96: Uint16_t(411), 98: Uint16_t(75), 103: Uint16_t(334), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(413), 96: Uint16_t(415), 98: Uint16_t(75), 103: Uint16_t(392), 104: Uint16_t(953), 107: Uint16_t(953), 108: Uint16_t(953), 112: Uint16_t(953), 114: Uint16_t(953), 115: Uint16_t(953), 116: Uint16_t(709), 117: Uint16_t(953), 118: Uint16_t(953), 119: Uint16_t(953), 120: Uint16_t(953), 121: Uint16_t(953), 122: Uint16_t(953), 139: Uint16_t(953), 140: Uint16_t(953), 141: Uint16_t(953), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(417), 98: Uint16_t(75), 104: Uint16_t(955), 107: Uint16_t(955), 108: Uint16_t(955), 112: Uint16_t(955), 114: Uint16_t(955), 115: Uint16_t(955), 116: Uint16_t(709), 117: Uint16_t(955), 118: Uint16_t(955), 119: Uint16_t(955), 120: Uint16_t(955), 121: Uint16_t(955), 122: Uint16_t(955), 139: Uint16_t(955), 140: Uint16_t(955), 141: Uint16_t(955), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(419), 98: Uint16_t(75), 104: Uint16_t(955), 107: Uint16_t(955), 108: Uint16_t(955), 112: Uint16_t(955), 114: Uint16_t(955), 115: Uint16_t(955), 116: Uint16_t(709), 117: Uint16_t(955), 118: Uint16_t(955), 119: Uint16_t(955), 120: Uint16_t(955), 121: Uint16_t(955), 122: Uint16_t(955), 139: Uint16_t(955), 140: Uint16_t(955), 141: Uint16_t(955), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(421), 98: Uint16_t(75), 104: Uint16_t(955), 107: Uint16_t(955), 108: Uint16_t(955), 112: Uint16_t(955), 114: Uint16_t(955), 115: Uint16_t(955), 116: Uint16_t(709), 117: Uint16_t(955), 118: Uint16_t(955), 119: Uint16_t(955), 120: Uint16_t(955), 121: Uint16_t(955), 122: Uint16_t(955), 139: Uint16_t(955), 140: Uint16_t(955), 141: Uint16_t(955), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(423), 98: Uint16_t(75), 104: Uint16_t(955), 107: Uint16_t(955), 108: Uint16_t(955), 112: Uint16_t(955), 114: Uint16_t(955), 115: Uint16_t(955), 116: Uint16_t(709), 117: Uint16_t(955), 118: Uint16_t(955), 119: Uint16_t(955), 120: Uint16_t(955), 121: Uint16_t(955), 122: Uint16_t(955), 139: Uint16_t(955), 140: Uint16_t(955), 141: Uint16_t(955), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(425), 98: Uint16_t(75), 104: Uint16_t(955), 107: Uint16_t(955), 108: Uint16_t(955), 112: Uint16_t(955), 114: Uint16_t(955), 115: Uint16_t(955), 116: Uint16_t(709), 117: Uint16_t(955), 118: Uint16_t(955), 119: Uint16_t(955), 120: Uint16_t(955), 121: Uint16_t(955), 122: Uint16_t(955), 139: Uint16_t(955), 140: Uint16_t(955), 141: Uint16_t(955), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 95: Uint16_t(427), 98: Uint16_t(75), 104: Uint16_t(955), 107: Uint16_t(955), 108: Uint16_t(955), 112: Uint16_t(955), 114: Uint16_t(955), 115: Uint16_t(955), 116: Uint16_t(709), 117: Uint16_t(955), 118: Uint16_t(955), 119: Uint16_t(955), 120: Uint16_t(955), 121: Uint16_t(955), 122: Uint16_t(955), 139: Uint16_t(955), 140: Uint16_t(955), 141: Uint16_t(955), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(7), 2: Uint16_t(9), 4: Uint16_t(11), 6: Uint16_t(13), 10: Uint16_t(15), 11: Uint16_t(17), 13: Uint16_t(19), 15: Uint16_t(21), 16: Uint16_t(23), 17: Uint16_t(25), 18: Uint16_t(27), 19: Uint16_t(29), 20: Uint16_t(31), 25: Uint16_t(263), 36: Uint16_t(47), 37: Uint16_t(49), 38: Uint16_t(51), 41: Uint16_t(57), 44: Uint16_t(59), 47: Uint16_t(61), 48: Uint16_t(61), 56: Uint16_t(61), 65: Uint16_t(63), 79: Uint16_t(65), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(73), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 98: Uint16_t(75), 104: Uint16_t(955), 107: Uint16_t(955), 108: Uint16_t(955), 112: Uint16_t(955), 114: Uint16_t(955), 115: Uint16_t(955), 116: Uint16_t(709), 117: Uint16_t(955), 118: Uint16_t(955), 119: Uint16_t(955), 120: Uint16_t(955), 121: Uint16_t(955), 122: Uint16_t(955), 139: Uint16_t(955), 140: Uint16_t(955), 141: Uint16_t(955), 153: Uint16_t(655), 154: Uint16_t(646), 155: Uint16_t(646), 158: Uint16_t(646), 161: Uint16_t(725), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 170: Uint16_t(981), 171: Uint16_t(981), 172: Uint16_t(656), 174: Uint16_t(981), 175: Uint16_t(208), 176: Uint16_t(208), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(429), 3: Uint16_t(240), 6: Uint16_t(431), 7: Uint16_t(242), 8: Uint16_t(242), 10: Uint16_t(240), 11: Uint16_t(433), 12: Uint16_t(242), 21: Uint16_t(240), 22: Uint16_t(242), 24: Uint16_t(240), 25: Uint16_t(433), 27: Uint16_t(240), 35: Uint16_t(242), 38: Uint16_t(433), 40: Uint16_t(242), 41: Uint16_t(435), 42: Uint16_t(242), 43: Uint16_t(240), 44: Uint16_t(437), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(439), 48: Uint16_t(439), 49: Uint16_t(240), 50: Uint16_t(242), 51: Uint16_t(242), 52: Uint16_t(242), 53: Uint16_t(242), 54: Uint16_t(242), 55: Uint16_t(242), 56: Uint16_t(439), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(441), 80: Uint16_t(443), 81: Uint16_t(445), 82: Uint16_t(242), 86: Uint16_t(242), 87: Uint16_t(447), 88: Uint16_t(443), 89: Uint16_t(449), 90: Uint16_t(447), 91: Uint16_t(447), 92: Uint16_t(447), 93: Uint16_t(3), 98: Uint16_t(451), 116: Uint16_t(664), 161: Uint16_t(663), 162: Uint16_t(446), 163: Uint16_t(664), 164: Uint16_t(664), 165: Uint16_t(443), 166: Uint16_t(443), 167: Uint16_t(664), 168: Uint16_t(664), 175: Uint16_t(443), 176: Uint16_t(443), 178: Uint16_t(443), 182: Uint16_t(443), 183: Uint16_t(443), 184: Uint16_t(443), 185: Uint16_t(443), 187: Uint16_t(443), 188: Uint16_t(443), 189: Uint16_t(443), 190: Uint16_t(443), 192: Uint16_t(443), 196: Uint16_t(664), 197: Uint16_t(443), 198: Uint16_t(348), 202: Uint16_t(664)}, {1: Uint16_t(453), 3: Uint16_t(240), 6: Uint16_t(455), 7: Uint16_t(242), 8: Uint16_t(242), 9: Uint16_t(240), 10: Uint16_t(240), 11: Uint16_t(457), 12: Uint16_t(242), 21: Uint16_t(240), 22: Uint16_t(242), 25: Uint16_t(457), 26: Uint16_t(240), 27: Uint16_t(240), 35: Uint16_t(242), 38: Uint16_t(457), 40: Uint16_t(242), 41: Uint16_t(459), 42: Uint16_t(242), 44: Uint16_t(461), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(463), 48: Uint16_t(463), 49: Uint16_t(240), 50: Uint16_t(242), 51: Uint16_t(242), 52: Uint16_t(242), 53: Uint16_t(242), 54: Uint16_t(242), 55: Uint16_t(242), 56: Uint16_t(463), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(465), 80: Uint16_t(443), 81: Uint16_t(445), 82: Uint16_t(242), 87: Uint16_t(447), 88: Uint16_t(443), 89: Uint16_t(467), 90: Uint16_t(447), 91: Uint16_t(447), 92: Uint16_t(447), 93: Uint16_t(3), 98: Uint16_t(451), 116: Uint16_t(664), 161: Uint16_t(663), 162: Uint16_t(448), 163: Uint16_t(664), 164: Uint16_t(664), 165: Uint16_t(443), 166: Uint16_t(443), 167: Uint16_t(664), 168: Uint16_t(664), 175: Uint16_t(443), 176: Uint16_t(443), 178: Uint16_t(443), 182: Uint16_t(443), 183: Uint16_t(443), 184: Uint16_t(443), 185: Uint16_t(443), 187: Uint16_t(443), 188: Uint16_t(443), 189: Uint16_t(443), 190: Uint16_t(443), 192: Uint16_t(443), 196: Uint16_t(664), 197: Uint16_t(443), 198: Uint16_t(348), 202: Uint16_t(664)}, {1: Uint16_t(238), 3: Uint16_t(240), 4: Uint16_t(240), 6: Uint16_t(257), 8: Uint16_t(242), 10: Uint16_t(240), 11: Uint16_t(247), 12: Uint16_t(242), 21: Uint16_t(240), 25: Uint16_t(247), 27: Uint16_t(240), 35: Uint16_t(242), 38: Uint16_t(247), 40: Uint16_t(242), 41: Uint16_t(259), 43: Uint16_t(240), 44: Uint16_t(59), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(61), 48: Uint16_t(61), 49: Uint16_t(240), 50: Uint16_t(242), 51: Uint16_t(242), 52: Uint16_t(242), 53: Uint16_t(242), 54: Uint16_t(242), 55: Uint16_t(242), 56: Uint16_t(61), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(63), 80: Uint16_t(67), 81: Uint16_t(69), 87: Uint16_t(71), 88: Uint16_t(67), 89: Uint16_t(255), 90: Uint16_t(71), 91: Uint16_t(71), 92: Uint16_t(71), 93: Uint16_t(3), 94: Uint16_t(242), 95: Uint16_t(242), 98: Uint16_t(75), 116: Uint16_t(709), 161: Uint16_t(710), 162: Uint16_t(487), 163: Uint16_t(709), 164: Uint16_t(709), 165: Uint16_t(605), 166: Uint16_t(605), 167: Uint16_t(709), 168: Uint16_t(709), 175: Uint16_t(605), 176: Uint16_t(605), 178: Uint16_t(605), 182: Uint16_t(605), 183: Uint16_t(605), 184: Uint16_t(605), 185: Uint16_t(605), 187: Uint16_t(605), 188: Uint16_t(605), 189: Uint16_t(605), 190: Uint16_t(605), 192: Uint16_t(605), 196: Uint16_t(709), 197: Uint16_t(605), 198: Uint16_t(492), 202: Uint16_t(709)}, {1: Uint16_t(453), 3: Uint16_t(240), 6: Uint16_t(455), 7: Uint16_t(244), 8: Uint16_t(244), 10: Uint16_t(240), 11: Uint16_t(457), 12: Uint16_t(242), 21: Uint16_t(240), 25: Uint16_t(457), 26: Uint16_t(240), 27: Uint16_t(240), 35: Uint16_t(242), 38: Uint16_t(457), 40: Uint16_t(242), 41: Uint16_t(459), 42: Uint16_t(244), 44: Uint16_t(461), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(463), 48: Uint16_t(463), 49: Uint16_t(240), 50: Uint16_t(242), 51: Uint16_t(242), 52: Uint16_t(242), 53: Uint16_t(242), 54: Uint16_t(242), 55: Uint16_t(242), 56: Uint16_t(463), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(465), 80: Uint16_t(443), 81: Uint16_t(445), 87: Uint16_t(447), 88: Uint16_t(443), 89: Uint16_t(467), 90: Uint16_t(447), 91: Uint16_t(447), 92: Uint16_t(447), 93: Uint16_t(3), 98: Uint16_t(451), 116: Uint16_t(664), 161: Uint16_t(663), 162: Uint16_t(448), 163: Uint16_t(664), 164: Uint16_t(664), 165: Uint16_t(443), 166: Uint16_t(443), 167: Uint16_t(664), 168: Uint16_t(664), 175: Uint16_t(443), 176: Uint16_t(443), 178: Uint16_t(443), 182: Uint16_t(443), 183: Uint16_t(443), 184: Uint16_t(443), 185: Uint16_t(443), 187: Uint16_t(443), 188: Uint16_t(443), 189: Uint16_t(443), 190: Uint16_t(443), 192: Uint16_t(443), 196: Uint16_t(664), 197: Uint16_t(443), 198: Uint16_t(348), 202: Uint16_t(664)}, {1: Uint16_t(469), 3: Uint16_t(240), 6: Uint16_t(471), 7: Uint16_t(242), 8: Uint16_t(242), 9: Uint16_t(240), 10: Uint16_t(240), 11: Uint16_t(433), 12: Uint16_t(242), 21: Uint16_t(240), 22: Uint16_t(242), 25: Uint16_t(433), 27: Uint16_t(240), 35: Uint16_t(242), 38: Uint16_t(433), 40: Uint16_t(242), 41: Uint16_t(473), 44: Uint16_t(475), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(477), 48: Uint16_t(477), 49: Uint16_t(240), 50: Uint16_t(242), 51: Uint16_t(242), 52: Uint16_t(242), 53: Uint16_t(242), 54: Uint16_t(242), 55: Uint16_t(242), 56: Uint16_t(477), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(479), 80: Uint16_t(481), 81: Uint16_t(483), 87: Uint16_t(485), 88: Uint16_t(481), 89: Uint16_t(487), 90: Uint16_t(485), 91: Uint16_t(485), 92: Uint16_t(485), 93: Uint16_t(3), 98: Uint16_t(489), 116: Uint16_t(749), 161: Uint16_t(757), 162: Uint16_t(496), 163: Uint16_t(749), 164: Uint16_t(749), 165: Uint16_t(628), 166: Uint16_t(628), 167: Uint16_t(749), 168: Uint16_t(749), 175: Uint16_t(628), 176: Uint16_t(628), 178: Uint16_t(628), 182: Uint16_t(628), 183: Uint16_t(628), 184: Uint16_t(628), 185: Uint16_t(628), 187: Uint16_t(628), 188: Uint16_t(628), 189: Uint16_t(628), 190: Uint16_t(628), 192: Uint16_t(628), 196: Uint16_t(749), 197: Uint16_t(628), 198: Uint16_t(501), 202: Uint16_t(749)}, {1: Uint16_t(453), 3: Uint16_t(240), 6: Uint16_t(455), 7: Uint16_t(242), 8: Uint16_t(242), 10: Uint16_t(240), 11: Uint16_t(457), 12: Uint16_t(242), 21: Uint16_t(240), 25: Uint16_t(457), 26: Uint16_t(240), 27: Uint16_t(240), 35: Uint16_t(242), 38: Uint16_t(457), 40: Uint16_t(242), 41: Uint16_t(459), 43: Uint16_t(491), 44: Uint16_t(461), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(463), 48: Uint16_t(463), 49: Uint16_t(240), 50: Uint16_t(242), 51: Uint16_t(242), 52: Uint16_t(242), 53: Uint16_t(242), 54: Uint16_t(242), 55: Uint16_t(242), 56: Uint16_t(463), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(465), 80: Uint16_t(443), 81: Uint16_t(445), 87: Uint16_t(447), 88: Uint16_t(443), 89: Uint16_t(467), 90: Uint16_t(447), 91: Uint16_t(447), 92: Uint16_t(447), 93: Uint16_t(3), 98: Uint16_t(451), 116: Uint16_t(664), 161: Uint16_t(663), 162: Uint16_t(448), 163: Uint16_t(664), 164: Uint16_t(664), 165: Uint16_t(443), 166: Uint16_t(443), 167: Uint16_t(664), 168: Uint16_t(664), 175: Uint16_t(443), 176: Uint16_t(443), 178: Uint16_t(443), 182: Uint16_t(443), 183: Uint16_t(443), 184: Uint16_t(443), 185: Uint16_t(443), 187: Uint16_t(443), 188: Uint16_t(443), 189: Uint16_t(443), 190: Uint16_t(443), 192: Uint16_t(443), 196: Uint16_t(664), 197: Uint16_t(443), 198: Uint16_t(348), 202: Uint16_t(664)}, {1: Uint16_t(429), 3: Uint16_t(240), 6: Uint16_t(431), 7: Uint16_t(242), 8: Uint16_t(242), 10: Uint16_t(240), 11: Uint16_t(433), 12: Uint16_t(242), 21: Uint16_t(240), 25: Uint16_t(433), 27: Uint16_t(240), 35: Uint16_t(242), 38: Uint16_t(433), 40: Uint16_t(242), 41: Uint16_t(435), 43: Uint16_t(491), 44: Uint16_t(437), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(439), 48: Uint16_t(439), 49: Uint16_t(240), 50: Uint16_t(242), 51: Uint16_t(242), 52: Uint16_t(242), 53: Uint16_t(242), 54: Uint16_t(242), 55: Uint16_t(242), 56: Uint16_t(439), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(441), 80: Uint16_t(443), 81: Uint16_t(445), 87: Uint16_t(447), 88: Uint16_t(443), 89: Uint16_t(449), 90: Uint16_t(447), 91: Uint16_t(447), 92: Uint16_t(447), 93: Uint16_t(3), 98: Uint16_t(451), 116: Uint16_t(664), 161: Uint16_t(663), 162: Uint16_t(446), 163: Uint16_t(664), 164: Uint16_t(664), 165: Uint16_t(443), 166: Uint16_t(443), 167: Uint16_t(664), 168: Uint16_t(664), 175: Uint16_t(443), 176: Uint16_t(443), 178: Uint16_t(443), 182: Uint16_t(443), 183: Uint16_t(443), 184: Uint16_t(443), 185: Uint16_t(443), 187: Uint16_t(443), 188: Uint16_t(443), 189: Uint16_t(443), 190: Uint16_t(443), 192: Uint16_t(443), 196: Uint16_t(664), 197: Uint16_t(443), 198: Uint16_t(348), 202: Uint16_t(664)}, {1: Uint16_t(429), 3: Uint16_t(240), 6: Uint16_t(431), 7: Uint16_t(493), 8: Uint16_t(493), 10: Uint16_t(240), 11: Uint16_t(433), 12: Uint16_t(242), 21: Uint16_t(240), 25: Uint16_t(433), 27: Uint16_t(240), 35: Uint16_t(242), 38: Uint16_t(433), 40: Uint16_t(242), 41: Uint16_t(435), 42: Uint16_t(493), 44: Uint16_t(437), 45: Uint16_t(240), 46: Uint16_t(240), 47: Uint16_t(439), 48: Uint16_t(439), 49: Uint16_t(240), 50: Uint16_t(242), 51: Uint16_t(242), 52: Uint16_t(242), 53: Uint16_t(242), 54: Uint16_t(242), 55: Uint16_t(242), 56: Uint16_t(439), 57: Uint16_t(240), 58: Uint16_t(242), 59: Uint16_t(242), 60: Uint16_t(242), 61: Uint16_t(242), 62: Uint16_t(240), 63: Uint16_t(242), 64: Uint16_t(240), 65: Uint16_t(441), 80: Uint16_t(443), 81: Uint16_t(445), 87: Uint16_t(447), 88: Uint16_t(443), 89: Uint16_t(449), 90: Uint16_t(447), 91: Uint16_t(447), 92: Uint16_t(447), 93: Uint16_t(3), 98: Uint16_t(451), 116: Uint16_t(664), 161: Uint16_t(663), 162: Uint16_t(446), 163: Uint16_t(664), 164: Uint16_t(664), 165: Uint16_t(443), 166: Uint16_t(443), 167: Uint16_t(664), 168: Uint16_t(664), 175: Uint16_t(443), 176: Uint16_t(443), 178: Uint16_t(443), 182: Uint16_t(443), 183: Uint16_t(443), 184: Uint16_t(443), 185: Uint16_t(443), 187: Uint16_t(443), 188: Uint16_t(443), 189: Uint16_t(443), 190: Uint16_t(443), 192: Uint16_t(443), 196: Uint16_t(664), 197: Uint16_t(443), 198: Uint16_t(348), 202: Uint16_t(664)}} /* parser.c:4514:17 */

var ts_small_parse_table = [42179]Uint16_t{Uint16_t(27),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(496), Uint16_t(1),
	Sym_identifier,
	Uint16_t(498), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(500), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(504), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(506), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(510), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(690), Uint16_t(1),
	Sym_expression,
	Uint16_t(824), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1071), Uint16_t(1),
	Sym__patterns,
	Uint16_t(1076), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(579), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(502), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(27),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(496), Uint16_t(1),
	Sym_identifier,
	Uint16_t(498), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(500), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(504), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(510), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(512), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(692), Uint16_t(1),
	Sym_expression,
	Uint16_t(824), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1064), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(1071), Uint16_t(1),
	Sym__patterns,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(579), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(502), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(25),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(7), Uint16_t(1),
	Sym_identifier,
	Uint16_t(13), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(57), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(65), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(73), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(655), Uint16_t(1),
	Sym_pattern,
	Uint16_t(656), Uint16_t(1),
	Sym_pattern_list,
	Uint16_t(729), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(208), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(263), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(990), Uint16_t(5),
	Sym_expression_list,
	Sym_assignment,
	Sym_augmented_assignment,
	Sym__right_hand_side,
	Sym_yield,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(28),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(496), Uint16_t(1),
	Sym_identifier,
	Uint16_t(498), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(500), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(504), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(510), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(514), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(694), Uint16_t(1),
	Sym_expression,
	Uint16_t(824), Uint16_t(1),
	Sym_pattern,
	Uint16_t(914), Uint16_t(1),
	Sym_yield,
	Uint16_t(1000), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(1014), Uint16_t(1),
	Sym__patterns,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(579), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(814), Uint16_t(2),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(502), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(29),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(496), Uint16_t(1),
	Sym_identifier,
	Uint16_t(498), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(500), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(504), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(510), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(516), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(691), Uint16_t(1),
	Sym_expression,
	Uint16_t(824), Uint16_t(1),
	Sym_pattern,
	Uint16_t(882), Uint16_t(1),
	Sym_yield,
	Uint16_t(885), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(889), Uint16_t(1),
	Sym_list_splat,
	Uint16_t(1014), Uint16_t(1),
	Sym__patterns,
	Uint16_t(1067), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(579), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(502), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(27),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(496), Uint16_t(1),
	Sym_identifier,
	Uint16_t(498), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(500), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(504), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(510), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(518), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(692), Uint16_t(1),
	Sym_expression,
	Uint16_t(824), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1064), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(1071), Uint16_t(1),
	Sym__patterns,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(579), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(502), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(25),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(7), Uint16_t(1),
	Sym_identifier,
	Uint16_t(13), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(57), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(65), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(73), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(655), Uint16_t(1),
	Sym_pattern,
	Uint16_t(656), Uint16_t(1),
	Sym_pattern_list,
	Uint16_t(729), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(208), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(263), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(986), Uint16_t(5),
	Sym_expression_list,
	Sym_assignment,
	Sym_augmented_assignment,
	Sym__right_hand_side,
	Sym_yield,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(28),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(496), Uint16_t(1),
	Sym_identifier,
	Uint16_t(498), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(500), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(504), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(510), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(520), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(691), Uint16_t(1),
	Sym_expression,
	Uint16_t(824), Uint16_t(1),
	Sym_pattern,
	Uint16_t(882), Uint16_t(1),
	Sym_yield,
	Uint16_t(1014), Uint16_t(1),
	Sym__patterns,
	Uint16_t(1067), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(579), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(814), Uint16_t(2),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(502), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(25),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(7), Uint16_t(1),
	Sym_identifier,
	Uint16_t(13), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(57), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(65), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(73), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(655), Uint16_t(1),
	Sym_pattern,
	Uint16_t(656), Uint16_t(1),
	Sym_pattern_list,
	Uint16_t(729), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(208), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(263), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(987), Uint16_t(5),
	Sym_expression_list,
	Sym_assignment,
	Sym_augmented_assignment,
	Sym__right_hand_side,
	Sym_yield,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(27),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(524), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(530), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(673), Uint16_t(1),
	Sym_expression,
	Uint16_t(730), Uint16_t(1),
	Sym_pair,
	Uint16_t(891), Uint16_t(1),
	Sym_dictionary_splat,
	Uint16_t(1054), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(27),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(532), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(534), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(682), Uint16_t(1),
	Sym_expression,
	Uint16_t(748), Uint16_t(1),
	Sym_pair,
	Uint16_t(926), Uint16_t(1),
	Sym_dictionary_splat,
	Uint16_t(1027), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(27),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(536), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(538), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(678), Uint16_t(1),
	Sym_expression,
	Uint16_t(754), Uint16_t(1),
	Sym_pair,
	Uint16_t(906), Uint16_t(1),
	Sym_dictionary_splat,
	Uint16_t(1025), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(439), Uint16_t(1),
	Anon_sym_TILDE,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(544), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(550), Uint16_t(1),
	Anon_sym_in,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(647), Uint16_t(1),
	Sym_pattern,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(554), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string,
	Uint16_t(548), Uint16_t(15),
	Anon_sym_COLON,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(439), Uint16_t(1),
	Anon_sym_TILDE,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(544), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(558), Uint16_t(1),
	Anon_sym_in,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(647), Uint16_t(1),
	Sym_pattern,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(554), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string,
	Uint16_t(556), Uint16_t(15),
	Anon_sym_COLON,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(22),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(724), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(562), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(867), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(568), Uint16_t(17),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_EQ,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(566), Uint16_t(36),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(572), Uint16_t(17),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_EQ,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(570), Uint16_t(36),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(24),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(574), Uint16_t(1),
	Sym_identifier,
	Uint16_t(576), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(578), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(582), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(693), Uint16_t(1),
	Sym_expression,
	Uint16_t(935), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(932), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(22),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(724), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(584), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(867), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(24),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(574), Uint16_t(1),
	Sym_identifier,
	Uint16_t(582), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(586), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(588), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(696), Uint16_t(1),
	Sym_expression,
	Uint16_t(920), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(919), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(592), Uint16_t(17),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_EQ,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(590), Uint16_t(36),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(24),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(574), Uint16_t(1),
	Sym_identifier,
	Uint16_t(582), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(594), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(596), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(695), Uint16_t(1),
	Sym_expression,
	Uint16_t(907), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(912), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(25),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(598), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(670), Uint16_t(1),
	Sym_expression,
	Uint16_t(884), Uint16_t(1),
	Sym_with_item,
	Uint16_t(929), Uint16_t(1),
	Sym_yield,
	Uint16_t(1038), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(814), Uint16_t(2),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(24),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(586), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(588), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(790), Uint16_t(1),
	Sym_expression,
	Uint16_t(920), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(919), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(606), Uint16_t(17),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_EQ,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(604), Uint16_t(36),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(612), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(700), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(2),
	Anon_sym_print,
	Anon_sym_exec,
	Uint16_t(747), Uint16_t(2),
	Sym__expression_within_for_in_clause,
	Sym_lambda_within_for_in_clause,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(608), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(610), Uint16_t(3),
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(614), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(689), Uint16_t(1),
	Sym_expression,
	Uint16_t(1034), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(612), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(700), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(2),
	Anon_sym_print,
	Anon_sym_exec,
	Uint16_t(747), Uint16_t(2),
	Sym__expression_within_for_in_clause,
	Sym_lambda_within_for_in_clause,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(616), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(618), Uint16_t(3),
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(620), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(622), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(624), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(626), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(25),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(628), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(691), Uint16_t(1),
	Sym_expression,
	Uint16_t(882), Uint16_t(1),
	Sym_yield,
	Uint16_t(885), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(889), Uint16_t(1),
	Sym_list_splat,
	Uint16_t(1067), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(24),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(598), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(688), Uint16_t(1),
	Sym_expression,
	Uint16_t(929), Uint16_t(1),
	Sym_yield,
	Uint16_t(1038), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(814), Uint16_t(2),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(24),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(598), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(691), Uint16_t(1),
	Sym_expression,
	Uint16_t(882), Uint16_t(1),
	Sym_yield,
	Uint16_t(1067), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(814), Uint16_t(2),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(630), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(632), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(634), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(636), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(25),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(598), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(691), Uint16_t(1),
	Sym_expression,
	Uint16_t(882), Uint16_t(1),
	Sym_yield,
	Uint16_t(885), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(889), Uint16_t(1),
	Sym_list_splat,
	Uint16_t(1067), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(638), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(640), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(690), Uint16_t(1),
	Sym_expression,
	Uint16_t(1076), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(642), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(612), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(700), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(2),
	Anon_sym_print,
	Anon_sym_exec,
	Uint16_t(747), Uint16_t(2),
	Sym__expression_within_for_in_clause,
	Sym_lambda_within_for_in_clause,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(644), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(646), Uint16_t(3),
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(648), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(24),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(628), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(691), Uint16_t(1),
	Sym_expression,
	Uint16_t(882), Uint16_t(1),
	Sym_yield,
	Uint16_t(1067), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(814), Uint16_t(2),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(650), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(692), Uint16_t(1),
	Sym_expression,
	Uint16_t(1064), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(24),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(652), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(694), Uint16_t(1),
	Sym_expression,
	Uint16_t(914), Uint16_t(1),
	Sym_yield,
	Uint16_t(1000), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(814), Uint16_t(2),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(522), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(614), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(692), Uint16_t(1),
	Sym_expression,
	Uint16_t(1064), Uint16_t(1),
	Sym__collection_elements,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(814), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(23),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(654), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(612), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(700), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(2),
	Anon_sym_print,
	Anon_sym_exec,
	Uint16_t(747), Uint16_t(2),
	Sym__expression_within_for_in_clause,
	Sym_lambda_within_for_in_clause,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(656), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(658), Uint16_t(3),
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(660), Uint16_t(1),
	Anon_sym_from,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(708), Uint16_t(1),
	Sym_expression,
	Uint16_t(869), Uint16_t(1),
	Sym_expression_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(662), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(22),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(526), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(600), Uint16_t(1),
	Sym_identifier,
	Uint16_t(602), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(823), Uint16_t(1),
	Sym_expression,
	Uint16_t(983), Uint16_t(1),
	Sym_parenthesized_list_splat,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(580), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(984), Uint16_t(3),
	Sym_list_splat,
	Sym_dictionary_splat,
	Sym_keyword_argument,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(244), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(253), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(664), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(666), Uint16_t(1),
	Anon_sym_with,
	Uint16_t(668), Uint16_t(1),
	Anon_sym_def,
	Uint16_t(251), Uint16_t(14),
	Anon_sym_COLON,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Uint16_t(240), Uint16_t(15),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(16),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(718), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(670), Uint16_t(5),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(718), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(672), Uint16_t(5),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(244), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(253), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(674), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(676), Uint16_t(1),
	Anon_sym_with,
	Uint16_t(678), Uint16_t(1),
	Anon_sym_def,
	Uint16_t(251), Uint16_t(14),
	Anon_sym_COLON,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Uint16_t(240), Uint16_t(15),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(16),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(508), Uint16_t(1),
	Anon_sym_yield,
	Uint16_t(560), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(564), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(724), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(867), Uint16_t(3),
	Sym_list_splat,
	Sym_parenthesized_list_splat,
	Sym_yield,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(680), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(856), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(991), Uint16_t(2),
	Sym_dictionary_splat,
	Sym_pair,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(682), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(856), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(991), Uint16_t(2),
	Sym_dictionary_splat,
	Sym_pair,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(684), Uint16_t(1),
	Anon_sym_from,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(719), Uint16_t(1),
	Sym_expression,
	Uint16_t(942), Uint16_t(1),
	Sym_expression_list,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(686), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(688), Uint16_t(1),
	Anon_sym_from,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(751), Uint16_t(1),
	Sym_expression,
	Uint16_t(959), Uint16_t(1),
	Sym_expression_list,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(662), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(690), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(856), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(991), Uint16_t(2),
	Sym_dictionary_splat,
	Sym_pair,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(698), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(700), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(327), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(365), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(197), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1,
	Uint16_t(692), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(694), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(708), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(710), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(330), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(417), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(218), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1,
	Uint16_t(704), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(702), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(244), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(253), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(712), Uint16_t(1),
	Sym__string_start,
	Uint16_t(946), Uint16_t(1),
	Sym_string,
	Uint16_t(251), Uint16_t(14),
	Anon_sym_COLON,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Uint16_t(240), Uint16_t(15),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(16),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(714), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(856), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(991), Uint16_t(2),
	Sym_dictionary_splat,
	Sym_pair,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(698), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(700), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(340), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(359), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(197), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1,
	Uint16_t(704), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(702), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(716), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(856), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(991), Uint16_t(2),
	Sym_dictionary_splat,
	Sym_pair,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(718), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(856), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(991), Uint16_t(2),
	Sym_dictionary_splat,
	Sym_pair,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(708), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(710), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(347), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(370), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(218), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1,
	Uint16_t(692), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(694), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(606), Uint16_t(16),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_EQ,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(604), Uint16_t(32),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Sym__semicolon, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(722), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(768), Uint16_t(1),
	Sym_expression,
	Uint16_t(982), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(592), Uint16_t(16),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_EQ,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(590), Uint16_t(32),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Sym__semicolon, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(726), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(731), Uint16_t(1),
	Anon_sym_COLON_EQ,
	Uint16_t(733), Uint16_t(2),
	Anon_sym_COLON,
	Anon_sym_EQ,
	Uint16_t(735), Uint16_t(13),
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Uint16_t(729), Uint16_t(15),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(16),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(737), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(768), Uint16_t(1),
	Sym_expression,
	Uint16_t(982), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(528), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(856), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(991), Uint16_t(2),
	Sym_dictionary_splat,
	Sym_pair,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(739), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(768), Uint16_t(1),
	Sym_expression,
	Uint16_t(982), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(743), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(787), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(741), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(731), Uint16_t(1),
	Sym_expression,
	Uint16_t(980), Uint16_t(1),
	Sym_expression_list,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(745), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(747), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(768), Uint16_t(1),
	Sym_expression,
	Uint16_t(982), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(568), Uint16_t(16),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_EQ,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(566), Uint16_t(32),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Sym__semicolon, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(749), Uint16_t(1),
	Anon_sym_from,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(767), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(670), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(751), Uint16_t(1),
	Anon_sym_from,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(767), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(672), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(572), Uint16_t(16),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_EQ,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(570), Uint16_t(32),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Sym__semicolon, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(755), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(780), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(753), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(757), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(768), Uint16_t(1),
	Sym_expression,
	Uint16_t(982), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(21),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(759), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(768), Uint16_t(1),
	Sym_expression,
	Uint16_t(982), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(767), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(761), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(767), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(202), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(332), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(388), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(763), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(765), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(768), Uint16_t(1),
	Sym_expression,
	Uint16_t(982), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(612), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(700), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(721), Uint16_t(2),
	Sym__expression_within_for_in_clause,
	Sym_lambda_within_for_in_clause,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(819), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(753), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(769), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(740), Uint16_t(1),
	Sym_expression,
	Uint16_t(873), Uint16_t(1),
	Sym_with_item,
	Uint16_t(1058), Uint16_t(1),
	Sym_with_clause,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(775), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(230), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(343), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(394), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(773), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(771), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(775), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(206), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(343), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(355), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(763), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(765), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(781), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(197), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1,
	Uint16_t(777), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(779), Uint16_t(32),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(612), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(700), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(747), Uint16_t(2),
	Sym__expression_within_for_in_clause,
	Sym_lambda_within_for_in_clause,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(769), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(740), Uint16_t(1),
	Sym_expression,
	Uint16_t(873), Uint16_t(1),
	Sym_with_item,
	Uint16_t(1084), Uint16_t(1),
	Sym_with_clause,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(767), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(784), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(788), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(795), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(793), Uint16_t(14),
	Anon_sym_COLON,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Uint16_t(791), Uint16_t(15),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(786), Uint16_t(16),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(767), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(241), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(332), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(387), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(797), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(799), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(782), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(801), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(782), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(803), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(775), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(195), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(343), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(411), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(807), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(805), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(775), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(230), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(343), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(364), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(797), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(799), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(803), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(809), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(726), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(733), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(735), Uint16_t(14),
	Anon_sym_COLON,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Uint16_t(729), Uint16_t(15),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(16),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(767), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(217), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(332), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(422), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(807), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(805), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(769), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(740), Uint16_t(1),
	Sym_expression,
	Uint16_t(873), Uint16_t(1),
	Sym_with_item,
	Uint16_t(1036), Uint16_t(1),
	Sym_with_clause,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(801), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(811), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(762), Uint16_t(1),
	Sym_expression,
	Uint16_t(923), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(782), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(813), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(782), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(815), Uint16_t(2),
	Sym__newline,
	Sym__semicolon,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(759), Uint16_t(1),
	Sym_expression,
	Uint16_t(936), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(819), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(826), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(824), Uint16_t(14),
	Anon_sym_COLON,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Uint16_t(822), Uint16_t(15),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(817), Uint16_t(16),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(767), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(241), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(332), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(390), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(773), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(771), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(828), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(218), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1,
	Uint16_t(777), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(779), Uint16_t(32),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(769), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(740), Uint16_t(1),
	Sym_expression,
	Uint16_t(873), Uint16_t(1),
	Sym_with_item,
	Uint16_t(1042), Uint16_t(1),
	Sym_with_clause,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(612), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(698), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(743), Uint16_t(2),
	Sym__expression_within_for_in_clause,
	Sym_lambda_within_for_in_clause,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(244), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(253), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(251), Uint16_t(14),
	Anon_sym_COLON,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ,
	Uint16_t(240), Uint16_t(15),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(16),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(612), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(699), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(752), Uint16_t(2),
	Sym__expression_within_for_in_clause,
	Sym_lambda_within_for_in_clause,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(612), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(700), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(704), Uint16_t(2),
	Sym__expression_within_for_in_clause,
	Sym_lambda_within_for_in_clause,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(720), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(763), Uint16_t(1),
	Sym_expression,
	Uint16_t(904), Uint16_t(1),
	Sym_slice,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(783), Uint16_t(1),
	Sym_expression,
	Uint16_t(1024), Uint16_t(1),
	Sym_expression_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(831), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(833), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(740), Uint16_t(1),
	Sym_expression,
	Uint16_t(951), Uint16_t(1),
	Sym_with_item,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(835), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(837), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(737), Uint16_t(1),
	Sym_expression,
	Uint16_t(1057), Uint16_t(1),
	Sym_type,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(843), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(230), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(343), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(841), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(839), Uint16_t(31),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(846), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(777), Uint16_t(1),
	Sym_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(848), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(769), Uint16_t(1),
	Sym_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(779), Uint16_t(1),
	Sym_expression,
	Uint16_t(1047), Uint16_t(1),
	Sym_expression_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(792), Uint16_t(1),
	Sym_expression,
	Uint16_t(1070), Uint16_t(1),
	Sym_expression_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(850), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(852), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(778), Uint16_t(1),
	Sym_expression,
	Uint16_t(1052), Uint16_t(1),
	Sym_expression_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(850), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(852), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(856), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(854), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(737), Uint16_t(1),
	Sym_expression,
	Uint16_t(1030), Uint16_t(1),
	Sym_type,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(856), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(854), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(858), Uint16_t(1),
	Anon_sym_elif,
	Uint16_t(241), Uint16_t(1),
	Aux_sym_if_statement_repeat1,
	Uint16_t(332), Uint16_t(1),
	Sym_elif_clause,
	Uint16_t(841), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(839), Uint16_t(31),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(831), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(833), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(737), Uint16_t(1),
	Sym_expression,
	Uint16_t(859), Uint16_t(1),
	Sym_type,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(737), Uint16_t(1),
	Sym_expression,
	Uint16_t(1059), Uint16_t(1),
	Sym_type,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(863), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(861), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(737), Uint16_t(1),
	Sym_expression,
	Uint16_t(1055), Uint16_t(1),
	Sym_type,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(835), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(837), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(737), Uint16_t(1),
	Sym_expression,
	Uint16_t(927), Uint16_t(1),
	Sym_type,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(788), Uint16_t(1),
	Sym_expression,
	Uint16_t(925), Uint16_t(1),
	Sym_type,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(863), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(861), Uint16_t(34),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(732), Uint16_t(1),
	Sym_expression,
	Uint16_t(978), Uint16_t(1),
	Sym_expression_list,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(760), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(705), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(867), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(865), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(750), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(739), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(854), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(677), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(851), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(867), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(865), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(848), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(805), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(865), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(857), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(712), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(680), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(871), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(869), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(829), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(722), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(789), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(766), Uint16_t(1),
	Sym_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(828), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(875), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(873), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(827), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(675), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(852), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(850), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(738), Uint16_t(1),
	Sym_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(875), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(873), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(756), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(871), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(869), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(745), Uint16_t(1),
	Sym_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(676), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(684), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(727), Uint16_t(1),
	Sym_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(679), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(753), Uint16_t(1),
	Sym_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(877), Uint16_t(1),
	Sym_identifier,
	Uint16_t(881), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(760), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(635), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(879), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(661), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(728), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(775), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(672), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(755), Uint16_t(1),
	Sym_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(686), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(883), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(885), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(741), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(772), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(661), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(681), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(718), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(683), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(687), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(887), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(889), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(711), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(821), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(685), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(767), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(798), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(891), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(893), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(822), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(800), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(469), Uint16_t(1),
	Sym_identifier,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(475), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(479), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(487), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(496), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(761), Uint16_t(1),
	Sym_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(485), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(749), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(706), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(887), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(889), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(883), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(885), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(849), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(782), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(453), Uint16_t(1),
	Sym_identifier,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(461), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(465), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(467), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(448), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(707), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(457), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(716), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(825), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(891), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(893), Uint16_t(33),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_except,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(815), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(785), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(429), Uint16_t(1),
	Sym_identifier,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(437), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(441), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(449), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(446), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(832), Uint16_t(1),
	Sym_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(433), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(664), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(63), Uint16_t(1),
	Anon_sym_lambda,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(238), Uint16_t(1),
	Sym_identifier,
	Uint16_t(255), Uint16_t(1),
	Anon_sym_await,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(487), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(713), Uint16_t(1),
	Sym_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(3),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Uint16_t(71), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(709), Uint16_t(7),
	Sym_named_expression,
	Sym_not_operator,
	Sym_boolean_operator,
	Sym_comparison_operator,
	Sym_lambda,
	Sym_conditional_expression,
	Sym_await,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(360), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(897), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(895), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(700), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(399), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(899), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(901), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(406), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(897), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(895), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(401), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(905), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(903), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(710), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(374), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(909), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(907), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(911), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(913), Uint16_t(32),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(915), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(917), Uint16_t(32),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(372), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(919), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(921), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(925), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(923), Uint16_t(32),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(376), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(929), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(927), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(419), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(919), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(921), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(911), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(913), Uint16_t(32),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(412), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(933), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(931), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(925), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(923), Uint16_t(32),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(700), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(367), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(909), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(907), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(425), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(905), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(903), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(396), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(935), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(937), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(915), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(917), Uint16_t(32),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_elif,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(395), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(933), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(931), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(706), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(426), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(935), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(937), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(696), Uint16_t(1),
	Anon_sym_else,
	Uint16_t(383), Uint16_t(1),
	Sym_else_clause,
	Uint16_t(929), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(927), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(710), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(391), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(899), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(901), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(351), Uint16_t(2),
	Sym_string,
	Aux_sym_concatenated_string_repeat1,
	Uint16_t(729), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(941), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(939), Uint16_t(31),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(947), Uint16_t(1),
	Sym__string_start,
	Uint16_t(350), Uint16_t(2),
	Sym_string,
	Aux_sym_concatenated_string_repeat1,
	Uint16_t(945), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(943), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(350), Uint16_t(2),
	Sym_string,
	Aux_sym_concatenated_string_repeat1,
	Uint16_t(952), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(950), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(956), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(954), Uint16_t(31),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(956), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(954), Uint16_t(31),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(941), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(939), Uint16_t(31),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_finally,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(960), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(958), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(647), Uint16_t(1),
	Sym_pattern,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(962), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(704), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(702), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(964), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(966), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(909), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(907), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(970), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(968), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(974), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(972), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(976), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(978), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(980), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(982), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(986), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(984), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(899), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(901), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(990), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(988), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(992), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(994), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(964), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(966), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(980), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(982), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(899), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(901), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(996), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(998), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1000), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1002), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(647), Uint16_t(1),
	Sym_pattern,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(1004), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(992), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(994), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1008), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1006), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1012), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1010), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1016), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1014), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1018), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1020), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1024), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1022), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1028), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1026), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1008), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1006), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1028), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1026), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1012), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1010), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1016), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1014), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1024), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1022), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1030), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1032), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(986), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(984), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(960), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(958), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1036), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1034), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1038), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1040), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1044), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1042), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1048), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1046), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1048), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1046), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1038), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1040), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1050), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1052), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1054), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1056), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1058), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1060), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1062), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1064), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1044), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1042), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1036), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1034), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1068), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1066), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(704), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(702), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(976), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(978), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(996), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(998), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1062), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1064), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(970), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(968), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1072), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1070), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1076), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1074), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1080), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1078), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1058), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1060), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1084), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1082), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1050), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1052), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1080), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1078), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(692), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(694), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(974), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(972), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(692), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(694), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(909), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(907), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1030), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1032), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1000), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1002), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1018), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1020), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1072), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1070), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1084), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1082), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1076), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1074), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1086), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(824), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1014), Uint16_t(1),
	Sym__patterns,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1068), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1066), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1054), Uint16_t(12),
	Sym__dedent,
	Sym__string_start,
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(1056), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(990), Uint16_t(12),
	Sym__string_start,
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_LPAREN,
	Anon_sym_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Sym_ellipsis,
	Anon_sym_LBRACE,
	Sym_float,
	Uint16_t(988), Uint16_t(30),
	Anon_sym_import,
	Anon_sym_from,
	Anon_sym_print,
	Anon_sym_assert,
	Anon_sym_return,
	Anon_sym_del,
	Anon_sym_raise,
	Anon_sym_pass,
	Anon_sym_break,
	Anon_sym_continue,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_while,
	Anon_sym_try,
	Anon_sym_with,
	Anon_sym_def,
	Anon_sym_global,
	Anon_sym_nonlocal,
	Anon_sym_exec,
	Anon_sym_class,
	Anon_sym_not,
	Anon_sym_lambda,
	Anon_sym_yield,
	Sym_integer,
	Sym_identifier,
	Anon_sym_await,
	Sym_true,
	Sym_false,
	Sym_none, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(902), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1018), Uint16_t(1),
	Sym_pattern_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(876), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1087), Uint16_t(1),
	Sym_pattern_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(877), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1085), Uint16_t(1),
	Sym_pattern_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1090), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1088), Uint16_t(35),
	Sym__string_start,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1094), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1092), Uint16_t(35),
	Sym__string_start,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(947), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1056), Uint16_t(1),
	Sym_pattern_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(875), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1063), Uint16_t(1),
	Sym_pattern_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(18),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(879), Uint16_t(1),
	Sym_pattern,
	Uint16_t(1082), Uint16_t(1),
	Sym_pattern_list,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(17),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(931), Uint16_t(1),
	Sym_pattern,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1098), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1096), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1102), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1100), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1106), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1104), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1110), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1108), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1114), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1112), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1118), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1116), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(729), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1122), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1120), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(17),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(540), Uint16_t(1),
	Sym_identifier,
	Uint16_t(542), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(552), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(647), Uint16_t(1),
	Sym_pattern,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(527), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(646), Uint16_t(3),
	Sym_tuple_pattern,
	Sym_list_pattern,
	Sym_list_splat_pattern,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(546), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1142), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(1144), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1148), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1150), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1152), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1156), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(640), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1130), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1132), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1146), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(1154), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1138), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1134), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1128), Uint16_t(10),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_RBRACK,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1160), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1158), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1142), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1172), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1176), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1178), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1180), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1184), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(638), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1162), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1164), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1174), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(1182), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1170), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1166), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1128), Uint16_t(10),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_RBRACE, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1188), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1186), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1192), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1190), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1196), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1194), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1200), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1198), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1204), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1202), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1208), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1206), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1212), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1210), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1216), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1214), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1220), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1218), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1224), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1222), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1228), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1226), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1232), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1230), Uint16_t(34),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(15),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1148), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1150), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1152), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1130), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1132), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1146), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1138), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1236), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1234), Uint16_t(18),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1162), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1164), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1174), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1170), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_as,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(21),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(15),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1176), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1178), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1180), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1162), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1164), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1174), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1170), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1244), Uint16_t(3),
	Anon_sym_as,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1242), Uint16_t(18),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1248), Uint16_t(5),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1246), Uint16_t(28),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(14),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1150), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1152), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1130), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1132), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1146), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1138), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(13),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1152), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1130), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1132), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1146), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1138), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(20),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1130), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1132), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1146), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1138), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(21),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1162), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1174), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1170), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_as,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(23),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(10),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1130), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1138), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(25),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(28),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(15),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1148), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1150), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1152), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1130), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1132), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1146), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1138), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1244), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1242), Uint16_t(18),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1130), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1146), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1138), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(23),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(5),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(28),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1248), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1246), Uint16_t(28),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(28),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(5),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(28),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(15),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1176), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1178), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1180), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1162), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1164), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1174), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1170), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1236), Uint16_t(3),
	Anon_sym_as,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1234), Uint16_t(18),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(10),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1162), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1170), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_as,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(25),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(13),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1180), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1162), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1164), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1174), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1170), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_as,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(20),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(14),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1168), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1178), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1180), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1162), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1164), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1174), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1170), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_as,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1250), Uint16_t(1),
	Anon_sym_COLON_EQ,
	Uint16_t(729), Uint16_t(6),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_COLON,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(31),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(822), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(817), Uint16_t(33),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(791), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(786), Uint16_t(33),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1252), Uint16_t(1),
	Anon_sym_COLON_EQ,
	Uint16_t(729), Uint16_t(6),
	Anon_sym_STAR,
	Anon_sym_COLON,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(31),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(15),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(1254), Uint16_t(1),
	Sym_identifier,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(538), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(1256), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(1258), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(240), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(33),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(20),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1142), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1276), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1280), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1282), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1284), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1288), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(644), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1264), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1266), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1278), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(1286), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1272), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1268), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1128), Uint16_t(7),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_and,
	Anon_sym_or,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(240), Uint16_t(5),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(32),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(822), Uint16_t(5),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(817), Uint16_t(32),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(791), Uint16_t(5),
	Anon_sym_as,
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(786), Uint16_t(32),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_RBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(493), Uint16_t(2),
	Sym_string,
	Aux_sym_concatenated_string_repeat1,
	Uint16_t(952), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(950), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(491), Uint16_t(2),
	Sym_string,
	Aux_sym_concatenated_string_repeat1,
	Uint16_t(729), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1290), Uint16_t(1),
	Sym__string_start,
	Uint16_t(493), Uint16_t(2),
	Sym_string,
	Aux_sym_concatenated_string_repeat1,
	Uint16_t(945), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(943), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(14),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1282), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1284), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1264), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1266), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1278), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1272), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(16),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(10),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1264), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1272), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(22),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(19),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1309), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1313), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1315), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1317), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1321), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(653), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1297), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1299), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1311), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(1319), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1305), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1301), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1128), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_and,
	Anon_sym_or, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1248), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1246), Uint16_t(25),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1264), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1266), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1278), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1272), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(18),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(13),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(1323), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(561), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(13),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1325), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(511), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(508), Uint16_t(2),
	Sym_string,
	Aux_sym_concatenated_string_repeat1,
	Uint16_t(729), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(15),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1280), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1282), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1284), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1264), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1266), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1278), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1236), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1272), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1234), Uint16_t(15),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(13),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1284), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1264), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1266), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1278), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1272), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(17),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(13),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1327), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(463), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1329), Uint16_t(1),
	Sym__string_start,
	Uint16_t(505), Uint16_t(2),
	Sym_string,
	Aux_sym_concatenated_string_repeat1,
	Uint16_t(945), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(943), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(25),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(25),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(505), Uint16_t(2),
	Sym_string,
	Aux_sym_concatenated_string_repeat1,
	Uint16_t(952), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(950), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1264), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1278), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1272), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(20),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(13),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(1332), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(471), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(15),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1280), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1282), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1284), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1264), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1266), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1278), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1244), Uint16_t(3),
	Anon_sym_EQ,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1272), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1242), Uint16_t(15),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(506), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(25),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(477), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(643), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(497), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1094), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1092), Uint16_t(30),
	Sym__newline,
	Sym__string_start,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(531), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(462), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(479), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(480), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(478), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(473), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(463), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(468), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(476), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(724), Uint16_t(3),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_LBRACK,
	Uint16_t(729), Uint16_t(13),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Uint16_t(735), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(242), Uint16_t(3),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_LBRACK,
	Uint16_t(240), Uint16_t(13),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Uint16_t(1334), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(817), Uint16_t(3),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_LBRACK,
	Uint16_t(822), Uint16_t(13),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Uint16_t(824), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(786), Uint16_t(3),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_LBRACK,
	Uint16_t(791), Uint16_t(13),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Uint16_t(793), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1248), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1246), Uint16_t(25),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(502), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(475), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(472), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(471), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(470), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1250), Uint16_t(1),
	Anon_sym_COLON_EQ,
	Uint16_t(1336), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(729), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(724), Uint16_t(3),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_LBRACK,
	Uint16_t(729), Uint16_t(13),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Uint16_t(1338), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(469), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(731), Uint16_t(1),
	Anon_sym_COLON_EQ,
	Uint16_t(729), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(465), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(466), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(467), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(509), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(461), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(474), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(14),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(1340), Uint16_t(1),
	Sym_identifier,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(648), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(1342), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(14),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(431), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(435), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(1254), Uint16_t(1),
	Sym_identifier,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(652), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(538), Uint16_t(2),
	Sym_attribute,
	Sym_subscript,
	Uint16_t(439), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(447), Uint16_t(4),
	Sym_integer,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(1258), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(443), Uint16_t(13),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(513), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(242), Uint16_t(3),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_LBRACK,
	Uint16_t(240), Uint16_t(13),
	Anon_sym_STAR,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_SLASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Uint16_t(251), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(560), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(511), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(561), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(562), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(564), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(565), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(566), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(568), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(507), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1240), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1297), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1311), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1305), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(20),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(15),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1313), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1315), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1317), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1244), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1297), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1299), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1311), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1305), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1242), Uint16_t(15),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1240), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1238), Uint16_t(25),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_AT,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(471), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(473), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(483), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(489), Uint16_t(1),
	Sym__string_start,
	Uint16_t(501), Uint16_t(1),
	Sym_string,
	Uint16_t(569), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(481), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(477), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(433), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(485), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(628), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(10),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1240), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1297), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1305), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(22),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(14),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1315), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1317), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1240), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1297), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1299), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1311), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1305), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(16),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(13),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1317), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1240), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1297), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1299), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1311), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1305), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(17),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(495), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1240), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1297), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1299), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1311), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1305), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1238), Uint16_t(18),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(15),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1293), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1295), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1303), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1307), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1313), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1315), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1317), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1236), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1297), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1299), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1311), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(611), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1305), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Uint16_t(1234), Uint16_t(15),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(494), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(445), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(451), Uint16_t(1),
	Sym__string_start,
	Uint16_t(455), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(459), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(348), Uint16_t(1),
	Sym_string,
	Uint16_t(464), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(443), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(463), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(457), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(447), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(443), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1090), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1088), Uint16_t(30),
	Sym__newline,
	Sym__string_start,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1250), Uint16_t(1),
	Anon_sym_COLON_EQ,
	Uint16_t(726), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(729), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(27),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(498), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(69), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(75), Uint16_t(1),
	Sym__string_start,
	Uint16_t(257), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(259), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(492), Uint16_t(1),
	Sym_string,
	Uint16_t(503), Uint16_t(1),
	Sym_primary_expression,
	Uint16_t(67), Uint16_t(2),
	Sym_ellipsis,
	Sym_float,
	Uint16_t(61), Uint16_t(3),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_TILDE,
	Uint16_t(247), Uint16_t(4),
	Anon_sym_print,
	Anon_sym_async,
	Anon_sym_exec,
	Anon_sym_await,
	Uint16_t(71), Uint16_t(5),
	Sym_integer,
	Sym_identifier,
	Sym_true,
	Sym_false,
	Sym_none,
	Uint16_t(605), Uint16_t(15),
	Sym_binary_operator,
	Sym_unary_operator,
	Sym_attribute,
	Sym_subscript,
	Sym_call,
	Sym_list,
	Sym_set,
	Sym_tuple,
	Sym_dictionary,
	Sym_list_comprehension,
	Sym_dictionary_comprehension,
	Sym_set_comprehension,
	Sym_generator_expression,
	Sym_parenthesized_expression,
	Sym_concatenated_string, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1192), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1190), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1102), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1100), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1122), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1120), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(726), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(729), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(27),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1110), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1108), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(822), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(817), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(819), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(822), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(817), Uint16_t(27),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(791), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(786), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1114), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1112), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1160), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1158), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1228), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1226), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(788), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(791), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(786), Uint16_t(27),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1344), Uint16_t(1),
	Anon_sym_COLON_EQ,
	Uint16_t(729), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_COLON,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(28),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1200), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1198), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1118), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1116), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(240), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(491), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(240), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1094), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1092), Uint16_t(30),
	Sym__string_start,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(244), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(240), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(27),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1188), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1186), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1216), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1214), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1212), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1210), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1208), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1206), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1232), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1230), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1090), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1088), Uint16_t(30),
	Sym__string_start,
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1220), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1218), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1098), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1096), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1204), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1202), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1196), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1194), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(729), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1224), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1222), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1106), Uint16_t(5),
	Anon_sym_STAR,
	Anon_sym_EQ,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1104), Uint16_t(29),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_from,
	Anon_sym_LPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1216), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1214), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1160), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1158), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1200), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1198), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1192), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1190), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1196), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1194), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1252), Uint16_t(1),
	Anon_sym_COLON_EQ,
	Uint16_t(1336), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(729), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(27),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(568), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(566), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(572), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(570), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1110), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1108), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1106), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1104), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1228), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1226), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(606), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(604), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(592), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(590), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1188), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1186), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1224), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1222), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1252), Uint16_t(1),
	Anon_sym_COLON_EQ,
	Uint16_t(1346), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(729), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(25),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1204), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1202), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1220), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1218), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1212), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1210), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1208), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1206), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(729), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1232), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1230), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1114), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1112), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1102), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1100), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1098), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1096), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1122), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1120), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1118), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1116), Uint16_t(29),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1346), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(729), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(724), Uint16_t(25),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(493), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Uint16_t(240), Uint16_t(4),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(242), Uint16_t(25),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_if,
	Anon_sym_in,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_not,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Anon_sym_is, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1244), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1352), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1358), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(637), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1355), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1349), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1242), Uint16_t(10),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_RBRACE, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1172), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1184), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(1363), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(637), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1182), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1166), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1361), Uint16_t(10),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_RBRACE, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1244), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(1368), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1374), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(639), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1371), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1365), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1242), Uint16_t(10),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_RBRACK,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1144), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1156), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(1363), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(639), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1154), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1134), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1361), Uint16_t(10),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_RBRACK,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1379), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(641), Uint16_t(1),
	Aux_sym__patterns_repeat1,
	Uint16_t(1377), Uint16_t(18),
	Anon_sym_RPAREN,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1244), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(1385), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1391), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(642), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1388), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1382), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1242), Uint16_t(7),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_and,
	Anon_sym_or,
	Sym__semicolon, Uint16_t(14),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1260), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1262), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1270), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1274), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1280), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1282), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1284), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1394), Uint16_t(1),
	Sym__newline,
	Uint16_t(1264), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1266), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1278), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(576), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1272), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1276), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1288), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(1363), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(642), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1286), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1268), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1361), Uint16_t(7),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_and,
	Anon_sym_or,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(240), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1396), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Uint16_t(242), Uint16_t(14),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(735), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1377), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(729), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1398), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Uint16_t(724), Uint16_t(14),
	Anon_sym_DOT,
	Anon_sym_LPAREN,
	Anon_sym_GT_GT,
	Anon_sym_STAR_STAR,
	Anon_sym_AT,
	Anon_sym_LBRACK,
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH,
	Anon_sym_PIPE,
	Anon_sym_AMP,
	Anon_sym_CARET,
	Anon_sym_LT_LT, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1400), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1402), Uint16_t(19),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1404), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(641), Uint16_t(1),
	Aux_sym__patterns_repeat1,
	Uint16_t(548), Uint16_t(16),
	Anon_sym_COLON,
	Anon_sym_in,
	Anon_sym_EQ,
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(13),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1124), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1126), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1136), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1140), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(1148), Uint16_t(1),
	Anon_sym_PIPE,
	Uint16_t(1150), Uint16_t(1),
	Anon_sym_AMP,
	Uint16_t(1152), Uint16_t(1),
	Anon_sym_CARET,
	Uint16_t(1130), Uint16_t(2),
	Anon_sym_STAR,
	Anon_sym_SLASH,
	Uint16_t(1132), Uint16_t(2),
	Anon_sym_GT_GT,
	Anon_sym_LT_LT,
	Uint16_t(1146), Uint16_t(2),
	Anon_sym_PLUS,
	Anon_sym_DASH,
	Uint16_t(450), Uint16_t(2),
	Sym_argument_list,
	Sym_generator_expression,
	Uint16_t(1138), Uint16_t(3),
	Anon_sym_AT,
	Anon_sym_PERCENT,
	Anon_sym_SLASH_SLASH, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1309), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1321), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(654), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1319), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1301), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1361), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_and,
	Anon_sym_or, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1409), Uint16_t(1),
	Anon_sym_not,
	Uint16_t(1415), Uint16_t(1),
	Anon_sym_is,
	Uint16_t(654), Uint16_t(1),
	Aux_sym_comparison_operator_repeat1,
	Uint16_t(1412), Uint16_t(2),
	Anon_sym_LT,
	Anon_sym_GT,
	Uint16_t(1406), Uint16_t(6),
	Anon_sym_in,
	Anon_sym_LT_EQ,
	Anon_sym_EQ_EQ,
	Anon_sym_BANG_EQ,
	Anon_sym_GT_EQ,
	Anon_sym_LT_GT,
	Uint16_t(1242), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_and,
	Anon_sym_or, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1418), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1420), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1422), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(651), Uint16_t(1),
	Aux_sym__patterns_repeat1,
	Uint16_t(1424), Uint16_t(13),
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1420), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1422), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(1424), Uint16_t(13),
	Anon_sym_PLUS_EQ,
	Anon_sym_DASH_EQ,
	Anon_sym_STAR_EQ,
	Anon_sym_SLASH_EQ,
	Anon_sym_AT_EQ,
	Anon_sym_SLASH_SLASH_EQ,
	Anon_sym_PERCENT_EQ,
	Anon_sym_STAR_STAR_EQ,
	Anon_sym_GT_GT_EQ,
	Anon_sym_LT_LT_EQ,
	Anon_sym_AMP_EQ,
	Anon_sym_CARET_EQ,
	Anon_sym_PIPE_EQ, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1426), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1432), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(949), Uint16_t(1),
	Sym_parameter,
	Uint16_t(1033), Uint16_t(1),
	Sym_lambda_parameters,
	Uint16_t(1078), Uint16_t(1),
	Sym__parameters,
	Uint16_t(960), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1426), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1436), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(949), Uint16_t(1),
	Sym_parameter,
	Uint16_t(1028), Uint16_t(1),
	Sym_lambda_parameters,
	Uint16_t(1078), Uint16_t(1),
	Sym__parameters,
	Uint16_t(960), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1426), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1438), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(949), Uint16_t(1),
	Sym_parameter,
	Uint16_t(1062), Uint16_t(1),
	Sym_lambda_parameters,
	Uint16_t(1078), Uint16_t(1),
	Sym__parameters,
	Uint16_t(960), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1426), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1440), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(949), Uint16_t(1),
	Sym_parameter,
	Uint16_t(1061), Uint16_t(1),
	Sym_lambda_parameters,
	Uint16_t(1078), Uint16_t(1),
	Sym__parameters,
	Uint16_t(960), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1444), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1442), Uint16_t(13),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1426), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1446), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(949), Uint16_t(1),
	Sym_parameter,
	Uint16_t(1077), Uint16_t(1),
	Sym_lambda_parameters,
	Uint16_t(1078), Uint16_t(1),
	Sym__parameters,
	Uint16_t(960), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1450), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1448), Uint16_t(13),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1142), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1128), Uint16_t(13),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_and,
	Anon_sym_or,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(10),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1452), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1454), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(888), Uint16_t(1),
	Sym_parameter,
	Uint16_t(1044), Uint16_t(1),
	Sym__parameters,
	Uint16_t(938), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1426), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1456), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(930), Uint16_t(1),
	Sym_parameter,
	Uint16_t(960), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1426), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1458), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(930), Uint16_t(1),
	Sym_parameter,
	Uint16_t(960), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1452), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1458), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(930), Uint16_t(1),
	Sym_parameter,
	Uint16_t(938), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(9),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1452), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1456), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(930), Uint16_t(1),
	Sym_parameter,
	Uint16_t(938), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1460), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1462), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1465), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(998), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1426), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(930), Uint16_t(1),
	Sym_parameter,
	Uint16_t(960), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1442), Uint16_t(10),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_or,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1481), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1483), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(1008), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1428), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1430), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(1434), Uint16_t(1),
	Anon_sym_STAR_STAR,
	Uint16_t(1452), Uint16_t(1),
	Sym_identifier,
	Uint16_t(930), Uint16_t(1),
	Sym_parameter,
	Uint16_t(938), Uint16_t(2),
	Sym_list_splat_pattern,
	Sym_dictionary_splat_pattern,
	Uint16_t(948), Uint16_t(4),
	Sym_tuple_pattern,
	Sym_default_parameter,
	Sym_typed_default_parameter,
	Sym_typed_parameter, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1485), Uint16_t(8),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1493), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1491), Uint16_t(8),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1497), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1495), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1481), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1483), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(1001), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1499), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1485), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1495), Uint16_t(8),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1503), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1501), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(12),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1481), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1483), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(1002), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1505), Uint16_t(9),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1444), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1442), Uint16_t(9),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_or,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1491), Uint16_t(9),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1507), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1505), Uint16_t(8),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1501), Uint16_t(8),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_else,
	Anon_sym_RBRACK,
	Anon_sym_EQ,
	Anon_sym_RBRACE,
	Sym_type_conversion, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1460), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(998), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1483), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(999), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1483), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(1015), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1509), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(1019), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1483), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(1010), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1511), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1513), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(905), Uint16_t(1),
	Aux_sym_argument_list_repeat1,
	Uint16_t(1046), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1515), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(1046), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1517), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1519), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(903), Uint16_t(1),
	Aux_sym_argument_list_repeat1,
	Uint16_t(998), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(11),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1521), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1523), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(937), Uint16_t(1),
	Aux_sym_argument_list_repeat1,
	Uint16_t(1019), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1527), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1525), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(701), Uint16_t(3),
	Sym_for_in_clause,
	Sym_if_clause,
	Aux_sym__comprehension_clauses_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1529), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1529), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1529), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1533), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1536), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1539), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1531), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(701), Uint16_t(3),
	Sym_for_in_clause,
	Sym_if_clause,
	Aux_sym__comprehension_clauses_repeat1, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1527), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1542), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE,
	Uint16_t(697), Uint16_t(3),
	Sym_for_in_clause,
	Sym_if_clause,
	Aux_sym__comprehension_clauses_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1546), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(714), Uint16_t(1),
	Aux_sym_for_in_clause_repeat1,
	Uint16_t(1544), Uint16_t(6),
	Anon_sym_RPAREN,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1550), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(703), Uint16_t(1),
	Aux_sym_for_in_clause_repeat1,
	Uint16_t(1548), Uint16_t(6),
	Anon_sym_RPAREN,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1442), Uint16_t(8),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_EQ,
	Anon_sym_and,
	Anon_sym_or,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1442), Uint16_t(7),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_EQ,
	Anon_sym_or,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1554), Uint16_t(6),
	Anon_sym_RPAREN,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1558), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(773), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1556), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1128), Uint16_t(8),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_EQ,
	Anon_sym_and,
	Anon_sym_or,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1448), Uint16_t(8),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_EQ,
	Anon_sym_and,
	Anon_sym_or,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1485), Uint16_t(5),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_EQ,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1491), Uint16_t(6),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_EQ,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1505), Uint16_t(6),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_EQ,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1566), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(714), Uint16_t(1),
	Aux_sym_for_in_clause_repeat1,
	Uint16_t(1564), Uint16_t(6),
	Anon_sym_RPAREN,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1571), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(714), Uint16_t(1),
	Aux_sym_for_in_clause_repeat1,
	Uint16_t(1569), Uint16_t(6),
	Anon_sym_RPAREN,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1501), Uint16_t(5),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_EQ,
	Sym__semicolon, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(55), Uint16_t(1),
	Anon_sym_AT,
	Uint16_t(1573), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1575), Uint16_t(1),
	Anon_sym_def,
	Uint16_t(1577), Uint16_t(1),
	Anon_sym_class,
	Uint16_t(380), Uint16_t(2),
	Sym_function_definition,
	Sym_class_definition,
	Uint16_t(791), Uint16_t(2),
	Sym_decorator,
	Aux_sym_decorated_definition_repeat1, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1579), Uint16_t(5),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1581), Uint16_t(1),
	Anon_sym_from,
	Uint16_t(1583), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(796), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1585), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(55), Uint16_t(1),
	Anon_sym_AT,
	Uint16_t(1587), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1589), Uint16_t(1),
	Anon_sym_def,
	Uint16_t(1591), Uint16_t(1),
	Anon_sym_class,
	Uint16_t(382), Uint16_t(2),
	Sym_function_definition,
	Sym_class_definition,
	Uint16_t(791), Uint16_t(2),
	Sym_decorator,
	Aux_sym_decorated_definition_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1595), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(715), Uint16_t(1),
	Aux_sym_for_in_clause_repeat1,
	Uint16_t(1593), Uint16_t(6),
	Anon_sym_RPAREN,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1495), Uint16_t(5),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Anon_sym_EQ,
	Sym__semicolon, Uint16_t(6),
	Uint16_t(1597), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1603), Uint16_t(1),
	Sym__string_content,
	Uint16_t(1605), Uint16_t(1),
	Sym__string_end,
	Uint16_t(1599), Uint16_t(2),
	Sym_escape_sequence,
	Sym__not_escape_sequence,
	Uint16_t(735), Uint16_t(2),
	Sym_interpolation,
	Aux_sym_string_repeat1, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1607), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1609), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(835), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1611), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1613), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1615), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(1617), Uint16_t(1),
	Anon_sym_STAR,
	Uint16_t(820), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(847), Uint16_t(1),
	Sym_aliased_import,
	Uint16_t(967), Uint16_t(2),
	Sym__import_list,
	Sym_wildcard_import, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1442), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_and,
	Anon_sym_or, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1619), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(826), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1621), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1583), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(796), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1623), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1625), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1627), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(910), Uint16_t(1),
	Aux_sym_dictionary_repeat1,
	Uint16_t(1007), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1583), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(796), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1629), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1583), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(796), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1631), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(6),
	Uint16_t(1597), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1635), Uint16_t(1),
	Sym__string_content,
	Uint16_t(1637), Uint16_t(1),
	Sym__string_end,
	Uint16_t(1633), Uint16_t(2),
	Sym_escape_sequence,
	Sym__not_escape_sequence,
	Uint16_t(746), Uint16_t(2),
	Sym_interpolation,
	Aux_sym_string_repeat1, Uint16_t(6),
	Uint16_t(1597), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1603), Uint16_t(1),
	Sym__string_content,
	Uint16_t(1639), Uint16_t(1),
	Sym__string_end,
	Uint16_t(1599), Uint16_t(2),
	Sym_escape_sequence,
	Sym__not_escape_sequence,
	Uint16_t(735), Uint16_t(2),
	Sym_interpolation,
	Aux_sym_string_repeat1, Uint16_t(6),
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1641), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1647), Uint16_t(1),
	Sym__string_content,
	Uint16_t(1650), Uint16_t(1),
	Sym__string_end,
	Uint16_t(1644), Uint16_t(2),
	Sym_escape_sequence,
	Sym__not_escape_sequence,
	Uint16_t(735), Uint16_t(2),
	Sym_interpolation,
	Aux_sym_string_repeat1, Uint16_t(6),
	Uint16_t(1597), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1603), Uint16_t(1),
	Sym__string_content,
	Uint16_t(1652), Uint16_t(1),
	Sym__string_end,
	Uint16_t(1599), Uint16_t(2),
	Sym_escape_sequence,
	Sym__not_escape_sequence,
	Uint16_t(735), Uint16_t(2),
	Sym_interpolation,
	Aux_sym_string_repeat1, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1654), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON,
	Anon_sym_EQ, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1656), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1658), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1660), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1501), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_COLON, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1619), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(862), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1662), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1656), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1658), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1660), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1666), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1664), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1668), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1670), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(863), Uint16_t(1),
	Aux_sym_print_statement_repeat1,
	Uint16_t(1672), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1674), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(6),
	Uint16_t(1597), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1678), Uint16_t(1),
	Sym__string_content,
	Uint16_t(1680), Uint16_t(1),
	Sym__string_end,
	Uint16_t(1676), Uint16_t(2),
	Sym_escape_sequence,
	Sym__not_escape_sequence,
	Uint16_t(723), Uint16_t(2),
	Sym_interpolation,
	Aux_sym_string_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1658), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1660), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1505), Uint16_t(5),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON, Uint16_t(6),
	Uint16_t(1597), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1603), Uint16_t(1),
	Sym__string_content,
	Uint16_t(1682), Uint16_t(1),
	Sym__string_end,
	Uint16_t(1599), Uint16_t(2),
	Sym_escape_sequence,
	Sym__not_escape_sequence,
	Uint16_t(735), Uint16_t(2),
	Sym_interpolation,
	Aux_sym_string_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1564), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1684), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1686), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(916), Uint16_t(1),
	Aux_sym_dictionary_repeat1,
	Uint16_t(1003), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1128), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_and,
	Anon_sym_or, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1467), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1473), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1475), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1688), Uint16_t(4),
	Anon_sym_COMMA,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACE, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1583), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(796), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1556), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1690), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_if,
	Anon_sym_async,
	Anon_sym_for,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1658), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1660), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1491), Uint16_t(5),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1469), Uint16_t(1),
	Anon_sym_async,
	Uint16_t(1471), Uint16_t(1),
	Anon_sym_for,
	Uint16_t(1692), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1694), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(702), Uint16_t(1),
	Sym_for_in_clause,
	Uint16_t(915), Uint16_t(1),
	Aux_sym_dictionary_repeat1,
	Uint16_t(996), Uint16_t(1),
	Sym__comprehension_clauses, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1658), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1442), Uint16_t(6),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_or, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1696), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1698), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(1700), Uint16_t(1),
	Sym_type_conversion,
	Uint16_t(1086), Uint16_t(1),
	Sym_format_specifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1448), Uint16_t(7),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_if,
	Anon_sym_COLON,
	Anon_sym_and,
	Anon_sym_or, Uint16_t(6),
	Uint16_t(1597), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1704), Uint16_t(1),
	Sym__string_content,
	Uint16_t(1706), Uint16_t(1),
	Sym__string_end,
	Uint16_t(1702), Uint16_t(2),
	Sym_escape_sequence,
	Sym__not_escape_sequence,
	Uint16_t(734), Uint16_t(2),
	Sym_interpolation,
	Aux_sym_string_repeat1, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1708), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1710), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1712), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(913), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1714), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1656), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1658), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1660), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1495), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_COLON, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1710), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1716), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1718), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(941), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(8),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1710), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1720), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1722), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(900), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(6),
	Uint16_t(1597), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1726), Uint16_t(1),
	Sym__string_content,
	Uint16_t(1728), Uint16_t(1),
	Sym__string_end,
	Uint16_t(1724), Uint16_t(2),
	Sym_escape_sequence,
	Sym__not_escape_sequence,
	Uint16_t(736), Uint16_t(2),
	Sym_interpolation,
	Aux_sym_string_repeat1, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1730), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1732), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(1734), Uint16_t(1),
	Anon_sym___future__,
	Uint16_t(834), Uint16_t(1),
	Aux_sym_import_prefix_repeat1,
	Uint16_t(899), Uint16_t(1),
	Sym_import_prefix,
	Uint16_t(1020), Uint16_t(2),
	Sym_relative_import,
	Sym_dotted_name, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1656), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1658), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1660), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1485), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as,
	Anon_sym_COLON, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1579), Uint16_t(4),
	Sym__newline,
	Anon_sym_from,
	Anon_sym_COMMA,
	Sym__semicolon, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1710), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1736), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1656), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1658), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1660), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1740), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1738), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_as, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1744), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(771), Uint16_t(1),
	Aux_sym_dotted_name_repeat1,
	Uint16_t(1742), Uint16_t(4),
	Anon_sym_import,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1744), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(776), Uint16_t(1),
	Aux_sym_dotted_name_repeat1,
	Uint16_t(1746), Uint16_t(4),
	Anon_sym_import,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1748), Uint16_t(3),
	Sym__newline,
	Anon_sym_COMMA,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1750), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(774), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(672), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COLON,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1752), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(774), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1579), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COLON,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1755), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1759), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(776), Uint16_t(1),
	Aux_sym_dotted_name_repeat1,
	Uint16_t(1757), Uint16_t(4),
	Anon_sym_import,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1656), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1658), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1660), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1764), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1762), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_as, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1558), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1766), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(773), Uint16_t(1),
	Aux_sym_assert_statement_repeat1, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1558), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1768), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(773), Uint16_t(1),
	Aux_sym_assert_statement_repeat1, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1770), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(811), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1772), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(786), Uint16_t(1),
	Aux_sym_dotted_name_repeat1,
	Uint16_t(1742), Uint16_t(4),
	Sym__newline,
	Anon_sym_COMMA,
	Anon_sym_as,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1774), Uint16_t(3),
	Sym__newline,
	Anon_sym_COMMA,
	Sym__semicolon, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1558), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1776), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(773), Uint16_t(1),
	Aux_sym_assert_statement_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1778), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(784), Uint16_t(1),
	Aux_sym_dotted_name_repeat1,
	Uint16_t(1757), Uint16_t(4),
	Sym__newline,
	Anon_sym_COMMA,
	Anon_sym_as,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1781), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1772), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(784), Uint16_t(1),
	Aux_sym_dotted_name_repeat1,
	Uint16_t(1746), Uint16_t(4),
	Sym__newline,
	Anon_sym_COMMA,
	Anon_sym_as,
	Sym__semicolon, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(755), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(753), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1654), Uint16_t(3),
	Sym__newline,
	Anon_sym_EQ,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1783), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1521), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1523), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(937), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1787), Uint16_t(1),
	Anon_sym_AT,
	Uint16_t(791), Uint16_t(2),
	Sym_decorator,
	Aux_sym_decorated_definition_repeat1,
	Uint16_t(1785), Uint16_t(3),
	Anon_sym_async,
	Anon_sym_def,
	Anon_sym_class, Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1558), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1790), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(773), Uint16_t(1),
	Aux_sym_assert_statement_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1792), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(793), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1579), Uint16_t(3),
	Sym__newline,
	Anon_sym_from,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1795), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(1797), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(414), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(171), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1, Uint16_t(3),
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1801), Uint16_t(2),
	Sym__string_content,
	Sym__string_end,
	Uint16_t(1799), Uint16_t(3),
	Anon_sym_LBRACE,
	Sym_escape_sequence,
	Sym__not_escape_sequence, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1803), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(793), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(672), Uint16_t(3),
	Sym__newline,
	Anon_sym_from,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1805), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(1807), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(416), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(164), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1809), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1811), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(804), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(562), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1813), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(809), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK, Uint16_t(5),
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1815), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1817), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(1819), Uint16_t(1),
	Aux_sym_format_specifier_token1,
	Uint16_t(807), Uint16_t(2),
	Sym_format_expression,
	Aux_sym_format_specifier_repeat1, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1821), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1823), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(804), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(1607), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1688), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1757), Uint16_t(5),
	Sym__newline,
	Anon_sym_DOT,
	Anon_sym_COMMA,
	Anon_sym_as,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1815), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1826), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(1828), Uint16_t(1),
	Aux_sym_format_specifier_token1,
	Uint16_t(817), Uint16_t(2),
	Sym_format_expression,
	Aux_sym_format_specifier_repeat1, Uint16_t(3),
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1832), Uint16_t(2),
	Sym__string_content,
	Sym__string_end,
	Uint16_t(1830), Uint16_t(3),
	Anon_sym_LBRACE,
	Sym_escape_sequence,
	Sym__not_escape_sequence, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1805), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(1807), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(357), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(168), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1757), Uint16_t(5),
	Anon_sym_import,
	Anon_sym_DOT,
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_as, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1613), Uint16_t(1),
	Sym_identifier,
	Uint16_t(1834), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(820), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(847), Uint16_t(1),
	Sym_aliased_import,
	Uint16_t(963), Uint16_t(1),
	Sym__import_list, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1795), Uint16_t(1),
	Anon_sym_except,
	Uint16_t(1797), Uint16_t(1),
	Anon_sym_finally,
	Uint16_t(402), Uint16_t(1),
	Sym_finally_clause,
	Uint16_t(165), Uint16_t(2),
	Sym_except_clause,
	Aux_sym_try_statement_repeat1, Uint16_t(3),
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1838), Uint16_t(2),
	Sym__string_content,
	Sym__string_end,
	Uint16_t(1836), Uint16_t(3),
	Anon_sym_LBRACE,
	Sym_escape_sequence,
	Sym__not_escape_sequence, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1,
	Uint16_t(1483), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1552), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1560), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1562), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1668), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1613), Uint16_t(1),
	Sym_identifier,
	Uint16_t(831), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(943), Uint16_t(1),
	Sym_aliased_import,
	Uint16_t(1840), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(1842), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(1845), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(1847), Uint16_t(1),
	Aux_sym_format_specifier_token1,
	Uint16_t(817), Uint16_t(2),
	Sym_format_expression,
	Aux_sym_format_specifier_repeat1, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1613), Uint16_t(1),
	Sym_identifier,
	Uint16_t(831), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(943), Uint16_t(1),
	Sym_aliased_import,
	Uint16_t(1850), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(811), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1852), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1854), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(836), Uint16_t(1),
	Aux_sym__import_list_repeat1,
	Uint16_t(1856), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1858), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1860), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1862), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1866), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(871), Uint16_t(1),
	Aux_sym__patterns_repeat1,
	Uint16_t(1864), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1868), Uint16_t(1),
	Anon_sym_else, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1619), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(793), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1870), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1872), Uint16_t(1),
	Anon_sym_else, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1874), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1876), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1880), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1882), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(1878), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1854), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1884), Uint16_t(3),
	Sym__newline,
	Anon_sym_COMMA,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1886), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1888), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1892), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(844), Uint16_t(1),
	Aux_sym_import_prefix_repeat1,
	Uint16_t(1890), Uint16_t(2),
	Anon_sym_import,
	Sym_identifier, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1894), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(793), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(761), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1896), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(841), Uint16_t(1),
	Aux_sym__import_list_repeat1,
	Uint16_t(1898), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1900), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(837), Uint16_t(1),
	Aux_sym_print_statement_repeat1,
	Uint16_t(1903), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1905), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(843), Uint16_t(1),
	Aux_sym_global_statement_repeat1,
	Uint16_t(1907), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1850), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1909), Uint16_t(1),
	Sym_identifier,
	Uint16_t(890), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(972), Uint16_t(1),
	Sym_aliased_import, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1911), Uint16_t(4),
	Anon_sym_async,
	Anon_sym_def,
	Anon_sym_class,
	Anon_sym_AT, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1913), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(841), Uint16_t(1),
	Aux_sym__import_list_repeat1,
	Uint16_t(1916), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1905), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(860), Uint16_t(1),
	Aux_sym_global_statement_repeat1,
	Uint16_t(1918), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1905), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(860), Uint16_t(1),
	Aux_sym_global_statement_repeat1,
	Uint16_t(1920), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1924), Uint16_t(1),
	Anon_sym_DOT,
	Uint16_t(844), Uint16_t(1),
	Aux_sym_import_prefix_repeat1,
	Uint16_t(1922), Uint16_t(2),
	Anon_sym_import,
	Sym_identifier, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1905), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(842), Uint16_t(1),
	Aux_sym_global_statement_repeat1,
	Uint16_t(1927), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1909), Uint16_t(1),
	Sym_identifier,
	Uint16_t(868), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(874), Uint16_t(1),
	Sym_aliased_import,
	Uint16_t(1012), Uint16_t(1),
	Sym__import_list, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1852), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(836), Uint16_t(1),
	Aux_sym__import_list_repeat1,
	Uint16_t(1856), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1929), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1931), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1933), Uint16_t(1),
	Anon_sym_else, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1935), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1937), Uint16_t(1),
	Anon_sym_else, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1939), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1941), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1943), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(864), Uint16_t(1),
	Aux_sym_print_statement_repeat1,
	Uint16_t(1945), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1947), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1949), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1840), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1909), Uint16_t(1),
	Sym_identifier,
	Uint16_t(890), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(972), Uint16_t(1),
	Sym_aliased_import, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1953), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(1951), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1955), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(860), Uint16_t(1),
	Aux_sym_global_statement_repeat1,
	Uint16_t(1958), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1962), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(861), Uint16_t(1),
	Aux_sym_with_clause_repeat1,
	Uint16_t(1960), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1619), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(793), Uint16_t(1),
	Aux_sym_assert_statement_repeat1,
	Uint16_t(1965), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1967), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(837), Uint16_t(1),
	Aux_sym_print_statement_repeat1,
	Uint16_t(1969), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1971), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(837), Uint16_t(1),
	Aux_sym_print_statement_repeat1,
	Uint16_t(1973), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1477), Uint16_t(1),
	Anon_sym_and,
	Uint16_t(1487), Uint16_t(1),
	Anon_sym_if,
	Uint16_t(1489), Uint16_t(1),
	Anon_sym_or,
	Uint16_t(1975), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1909), Uint16_t(1),
	Sym_identifier,
	Uint16_t(868), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(874), Uint16_t(1),
	Sym_aliased_import,
	Uint16_t(1013), Uint16_t(1),
	Sym__import_list, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1607), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1856), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1977), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1979), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(880), Uint16_t(1),
	Aux_sym__import_list_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1556), Uint16_t(4),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_RBRACK,
	Anon_sym_RBRACE, Uint16_t(5),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1613), Uint16_t(1),
	Sym_identifier,
	Uint16_t(820), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(847), Uint16_t(1),
	Sym_aliased_import,
	Uint16_t(988), Uint16_t(1),
	Sym__import_list, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1981), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(641), Uint16_t(1),
	Aux_sym__patterns_repeat1,
	Uint16_t(1004), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_RBRACK, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1958), Uint16_t(3),
	Sym__newline,
	Anon_sym_COMMA,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1983), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1985), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(892), Uint16_t(1),
	Aux_sym_with_clause_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1856), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1977), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(880), Uint16_t(1),
	Aux_sym__import_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1418), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1987), Uint16_t(1),
	Anon_sym_in,
	Uint16_t(651), Uint16_t(1),
	Aux_sym__patterns_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1418), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1989), Uint16_t(1),
	Anon_sym_in,
	Uint16_t(651), Uint16_t(1),
	Aux_sym__patterns_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1418), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1991), Uint16_t(1),
	Anon_sym_in,
	Uint16_t(651), Uint16_t(1),
	Aux_sym__patterns_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1993), Uint16_t(1),
	Sym__semicolon,
	Uint16_t(1995), Uint16_t(1),
	Sym__newline,
	Uint16_t(895), Uint16_t(1),
	Aux_sym__simple_statements_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1418), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1997), Uint16_t(1),
	Anon_sym_in,
	Uint16_t(651), Uint16_t(1),
	Aux_sym__patterns_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1898), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1999), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(893), Uint16_t(1),
	Aux_sym__import_list_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1088), Uint16_t(3),
	Sym__newline,
	Anon_sym_in,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1509), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2001), Uint16_t(1),
	Sym__semicolon,
	Uint16_t(2003), Uint16_t(1),
	Sym__newline,
	Uint16_t(934), Uint16_t(1),
	Aux_sym__simple_statements_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1983), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2005), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(950), Uint16_t(1),
	Aux_sym_with_clause_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2007), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1, Uint16_t(3),
	Uint16_t(1601), Uint16_t(1),
	Sym_comment,
	Uint16_t(2011), Uint16_t(1),
	Aux_sym_format_specifier_token1,
	Uint16_t(2009), Uint16_t(2),
	Anon_sym_LBRACE,
	Anon_sym_RBRACE, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1613), Uint16_t(1),
	Sym_identifier,
	Uint16_t(831), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(943), Uint16_t(1),
	Sym_aliased_import, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2013), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2015), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(908), Uint16_t(1),
	Aux_sym__parameters_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2017), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1979), Uint16_t(1),
	Anon_sym_as,
	Uint16_t(1884), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1625), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1627), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(910), Uint16_t(1),
	Aux_sym_dictionary_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1983), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2019), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(861), Uint16_t(1),
	Aux_sym_with_clause_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1916), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2021), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(893), Uint16_t(1),
	Aux_sym__import_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2024), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2027), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(894), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(425), Uint16_t(1),
	Sym__newline,
	Uint16_t(2029), Uint16_t(1),
	Sym__semicolon,
	Uint16_t(924), Uint16_t(1),
	Aux_sym__simple_statements_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1862), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2031), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(896), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2034), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(2036), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1045), Uint16_t(1),
	Sym_argument_list, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1909), Uint16_t(1),
	Sym_identifier,
	Uint16_t(890), Uint16_t(1),
	Sym_dotted_name,
	Uint16_t(972), Uint16_t(1),
	Sym_aliased_import, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1730), Uint16_t(1),
	Sym_identifier,
	Uint16_t(2038), Uint16_t(1),
	Anon_sym_import,
	Uint16_t(1017), Uint16_t(1),
	Sym_dotted_name, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(722), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(2040), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(894), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(648), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2042), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(896), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1418), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2044), Uint16_t(1),
	Anon_sym_in,
	Uint16_t(651), Uint16_t(1),
	Aux_sym__patterns_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(626), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2046), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(896), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1720), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1722), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(900), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(636), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2048), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(896), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1692), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1694), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(915), Uint16_t(1),
	Aux_sym_dictionary_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2050), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2052), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(901), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1456), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2054), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(933), Uint16_t(1),
	Aux_sym__parameters_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1092), Uint16_t(3),
	Sym__newline,
	Anon_sym_in,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(718), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(2056), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(922), Uint16_t(1),
	Aux_sym_dictionary_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1456), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(2058), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(928), Uint16_t(1),
	Aux_sym__parameters_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1517), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1519), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(903), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(757), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(2060), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(894), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1515), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(690), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(2062), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(922), Uint16_t(1),
	Aux_sym_dictionary_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(682), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(2064), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(922), Uint16_t(1),
	Aux_sym_dictionary_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(654), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2066), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(896), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(421), Uint16_t(1),
	Sym__newline,
	Uint16_t(2068), Uint16_t(1),
	Sym__semicolon,
	Uint16_t(924), Uint16_t(1),
	Aux_sym__simple_statements_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1521), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1523), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(937), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2070), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2072), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(939), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(824), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2074), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2077), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(922), Uint16_t(1),
	Aux_sym_dictionary_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1716), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1718), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(941), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2079), Uint16_t(1),
	Sym__semicolon,
	Uint16_t(2082), Uint16_t(1),
	Sym__newline,
	Uint16_t(924), Uint16_t(1),
	Aux_sym__simple_statements_repeat1, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2084), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(2086), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1684), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1686), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(916), Uint16_t(1),
	Aux_sym_dictionary_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1951), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2088), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2091), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(928), Uint16_t(1),
	Aux_sym__parameters_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1460), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1479), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(799), Uint16_t(1),
	Aux_sym__collection_elements_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2091), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2093), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1511), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(1513), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(905), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2091), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2095), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(933), Uint16_t(1),
	Aux_sym__parameters_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(419), Uint16_t(1),
	Sym__newline,
	Uint16_t(2098), Uint16_t(1),
	Sym__semicolon,
	Uint16_t(924), Uint16_t(1),
	Aux_sym__simple_statements_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2100), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2102), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(917), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1708), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(1712), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(913), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(634), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2104), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(896), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2106), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1878), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(632), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(2108), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(896), Uint16_t(1),
	Aux_sym_argument_list_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1696), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(2110), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(1009), Uint16_t(1),
	Sym_format_specifier, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(759), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(2112), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(894), Uint16_t(1),
	Aux_sym_subscript_repeat1, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1581), Uint16_t(1),
	Anon_sym_from,
	Uint16_t(1585), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1884), Uint16_t(3),
	Sym__newline,
	Anon_sym_COMMA,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2034), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(2114), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(1016), Uint16_t(1),
	Sym_argument_list, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2116), Uint16_t(3),
	Sym__newline,
	Anon_sym_COMMA,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2118), Uint16_t(1),
	Anon_sym_in,
	Uint16_t(2120), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1418), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2122), Uint16_t(1),
	Anon_sym_in,
	Uint16_t(651), Uint16_t(1),
	Aux_sym__patterns_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1878), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2013), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(2124), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(911), Uint16_t(1),
	Aux_sym__parameters_repeat1, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1983), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(2126), Uint16_t(1),
	Anon_sym_RPAREN,
	Uint16_t(861), Uint16_t(1),
	Aux_sym_with_clause_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1960), Uint16_t(3),
	Anon_sym_RPAREN,
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1882), Uint16_t(1),
	Anon_sym_EQ,
	Uint16_t(1878), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(4),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2128), Uint16_t(1),
	Sym__semicolon,
	Uint16_t(2130), Uint16_t(1),
	Sym__newline,
	Uint16_t(918), Uint16_t(1),
	Aux_sym__simple_statements_repeat1, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2132), Uint16_t(2),
	Anon_sym_COLON,
	Anon_sym_DASH_GT, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2082), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(856), Uint16_t(2),
	Anon_sym_except,
	Anon_sym_finally, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2134), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(971), Uint16_t(1),
	Sym_parameters, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2136), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1556), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1878), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2138), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2140), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2142), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2134), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(977), Uint16_t(1),
	Sym_parameters, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2144), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2134), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(979), Uint16_t(1),
	Sym_parameters, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2146), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(863), Uint16_t(2),
	Anon_sym_except,
	Anon_sym_finally, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2148), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2134), Uint16_t(1),
	Anon_sym_LPAREN,
	Uint16_t(973), Uint16_t(1),
	Sym_parameters, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2150), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(2152), Uint16_t(1),
	Anon_sym_DASH_GT, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1884), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2154), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(2156), Uint16_t(1),
	Anon_sym_DASH_GT, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2116), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2158), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(835), Uint16_t(2),
	Anon_sym_except,
	Anon_sym_finally, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2160), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(2162), Uint16_t(1),
	Anon_sym_DASH_GT, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1631), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(3),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2164), Uint16_t(1),
	Anon_sym_COLON,
	Uint16_t(2166), Uint16_t(1),
	Anon_sym_DASH_GT, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1629), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1611), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1736), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2168), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1862), Uint16_t(2),
	Anon_sym_RPAREN,
	Anon_sym_COMMA, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(831), Uint16_t(2),
	Anon_sym_except,
	Anon_sym_finally, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2170), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2172), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2174), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2176), Uint16_t(2),
	Anon_sym_COLON,
	Anon_sym_DASH_GT, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2178), Uint16_t(2),
	Sym__newline,
	Sym__semicolon, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2077), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(850), Uint16_t(2),
	Anon_sym_except,
	Anon_sym_finally, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2180), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2182), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2184), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2186), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2188), Uint16_t(1),
	Anon_sym_in, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2190), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2192), Uint16_t(1),
	Anon_sym_RBRACK, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2194), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2196), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2198), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2200), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1521), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2202), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1517), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2204), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2206), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2208), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2210), Uint16_t(1),
	Anon_sym_RBRACK, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2212), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2214), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2216), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2218), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2220), Uint16_t(1),
	Anon_sym_RBRACK, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2222), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2224), Uint16_t(1),
	Anon_sym_import, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2044), Uint16_t(1),
	Anon_sym_in, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2226), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2228), Uint16_t(1),
	Anon_sym_import, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1511), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2230), Uint16_t(1),
	Anon_sym_import, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2232), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1776), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2234), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2236), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2238), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2240), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2242), Uint16_t(1),
	Anon_sym_in, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2244), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1686), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2246), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2248), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2250), Uint16_t(1),
	Anon_sym_RBRACK, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2252), Uint16_t(1),
	Anon_sym_in, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2254), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2256), Uint16_t(1),
	Anon_sym_in, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2258), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2260), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(678), Uint16_t(1),
	Anon_sym_def, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2262), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2264), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2266), Uint16_t(1),
	Anon_sym_for, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2268), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2270), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2272), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1768), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2274), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2276), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2278), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2280), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1766), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2282), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2284), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2286), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2122), Uint16_t(1),
	Anon_sym_in, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2288), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2290), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2292), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1627), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2294), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2296), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1987), Uint16_t(1),
	Anon_sym_in, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2298), Uint16_t(1),
	Anon_sym_RBRACK, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2300), Uint16_t(1),
	Uint16_t(Ts_builtin_sym_end), Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2302), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2304), Uint16_t(1),
	Anon_sym_RPAREN, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2306), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2308), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1790), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2310), Uint16_t(1),
	Anon_sym_RBRACK, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2312), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2314), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2316), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2318), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2320), Uint16_t(1),
	Anon_sym_RBRACK, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2322), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2324), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2326), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2328), Uint16_t(1),
	Sym_identifier, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1694), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1997), Uint16_t(1),
	Anon_sym_in, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(668), Uint16_t(1),
	Anon_sym_def, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2330), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1991), Uint16_t(1),
	Anon_sym_in, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(2110), Uint16_t(1),
	Anon_sym_RBRACE, Uint16_t(2),
	Uint16_t(3), Uint16_t(1),
	Sym_comment,
	Uint16_t(1989), Uint16_t(1),
	Anon_sym_in,
} /* parser.c:14121:17 */

var ts_small_parse_table_map = [987]Uint32_t{Uint32_t(0), Uint32_t(113), Uint32_t(226), Uint32_t(335), Uint32_t(450), Uint32_t(567), Uint32_t(680), Uint32_t(789), Uint32_t(904), Uint32_t(1013), Uint32_t(1125), Uint32_t(1237), Uint32_t(1349), Uint32_t(1447), Uint32_t(1545), Uint32_t(1644), Uint32_t(1705), Uint32_t(1766), Uint32_t(1869), Uint32_t(1968), Uint32_t(2071), Uint32_t(2132), Uint32_t(2235), Uint32_t(2340), Uint32_t(2443), Uint32_t(2504), Uint32_t(2600), Uint32_t(2700), Uint32_t(2796), Uint32_t(2896), Uint32_t(2996), Uint32_t(3096), Uint32_t(3196), Uint32_t(3300), Uint32_t(3402), Uint32_t(3504), Uint32_t(3604), Uint32_t(3704), Uint32_t(3804), Uint32_t(3904), Uint32_t(4008), Uint32_t(4108), Uint32_t(4208), Uint32_t(4308), Uint32_t(4404), Uint32_t(4504), Uint32_t(4606), Uint32_t(4706), Uint32_t(4808), Uint32_t(4908), Uint32_t(5008), Uint32_t(5104), Uint32_t(5199), Uint32_t(5296), Uint32_t(5366), Uint32_t(5456), Uint32_t(5546), Uint32_t(5616), Uint32_t(5710), Uint32_t(5803), Uint32_t(5896), Uint32_t(5989), Uint32_t(6082), Uint32_t(6175), Uint32_t(6244), Uint32_t(6313), Uint32_t(6380), Uint32_t(6473), Uint32_t(6542), Uint32_t(6635), Uint32_t(6728), Uint32_t(6797), Uint32_t(6853), Uint32_t(6945), Uint32_t(7001), Uint32_t(7065), Uint32_t(7157), Uint32_t(7247), Uint32_t(7339), Uint32_t(7429), Uint32_t(7519), Uint32_t(7611), Uint32_t(7667), Uint32_t(7757), Uint32_t(7847), Uint32_t(7903), Uint32_t(7993), Uint32_t(8085), Uint32_t(8177), Uint32_t(8264), Uint32_t(8329), Uint32_t(8418), Uint32_t(8505), Uint32_t(8592), Uint32_t(8681), Uint32_t(8746), Uint32_t(8811), Uint32_t(8870), Uint32_t(8957), Uint32_t(9046), Uint32_t(9133), Uint32_t(9194), Uint32_t(9259), Uint32_t(9346), Uint32_t(9433), Uint32_t(9498), Uint32_t(9563), Uint32_t(9650), Uint32_t(9711), Uint32_t(9776), Uint32_t(9865), Uint32_t(9952), Uint32_t(10041), Uint32_t(10128), Uint32_t(10215), Uint32_t(10304), Uint32_t(10365), Uint32_t(10430), Uint32_t(10489), Uint32_t(10578), Uint32_t(10665), Uint32_t(10726), Uint32_t(10813), Uint32_t(10900), Uint32_t(10989), Uint32_t(11075), Uint32_t(11129), Uint32_t(11215), Uint32_t(11269), Uint32_t(11355), Uint32_t(11415), Uint32_t(11501), Uint32_t(11587), Uint32_t(11673), Uint32_t(11759), Uint32_t(11813), Uint32_t(11899), Uint32_t(11953), Uint32_t(12007), Uint32_t(12093), Uint32_t(12147), Uint32_t(12207), Uint32_t(12261), Uint32_t(12347), Uint32_t(12433), Uint32_t(12487), Uint32_t(12573), Uint32_t(12627), Uint32_t(12713), Uint32_t(12799), Uint32_t(12853), Uint32_t(12939), Uint32_t(13022), Uint32_t(13105), Uint32_t(13158), Uint32_t(13241), Uint32_t(13324), Uint32_t(13407), Uint32_t(13490), Uint32_t(13573), Uint32_t(13626), Uint32_t(13709), Uint32_t(13792), Uint32_t(13875), Uint32_t(13958), Uint32_t(14041), Uint32_t(14124), Uint32_t(14177), Uint32_t(14260), Uint32_t(14343), Uint32_t(14426), Uint32_t(14509), Uint32_t(14592), Uint32_t(14645), Uint32_t(14728), Uint32_t(14811), Uint32_t(14894), Uint32_t(14977), Uint32_t(15060), Uint32_t(15113), Uint32_t(15196), Uint32_t(15249), Uint32_t(15332), Uint32_t(15415), Uint32_t(15498), Uint32_t(15581), Uint32_t(15664), Uint32_t(15747), Uint32_t(15832), Uint32_t(15915), Uint32_t(15998), Uint32_t(16081), Uint32_t(16164), Uint32_t(16247), Uint32_t(16330), Uint32_t(16383), Uint32_t(16466), Uint32_t(16549), Uint32_t(16632), Uint32_t(16715), Uint32_t(16798), Uint32_t(16881), Uint32_t(16964), Uint32_t(17017), Uint32_t(17100), Uint32_t(17183), Uint32_t(17266), Uint32_t(17349), Uint32_t(17432), Uint32_t(17485), Uint32_t(17568), Uint32_t(17651), Uint32_t(17734), Uint32_t(17817), Uint32_t(17870), Uint32_t(17923), Uint32_t(18006), Uint32_t(18089), Uint32_t(18172), Uint32_t(18255), Uint32_t(18338), Uint32_t(18391), Uint32_t(18474), Uint32_t(18557), Uint32_t(18640), Uint32_t(18723), Uint32_t(18779), Uint32_t(18835), Uint32_t(18891), Uint32_t(18947), Uint32_t(19003), Uint32_t(19055), Uint32_t(19107), Uint32_t(19163), Uint32_t(19215), Uint32_t(19271), Uint32_t(19327), Uint32_t(19379), Uint32_t(19435), Uint32_t(19487), Uint32_t(19543), Uint32_t(19599), Uint32_t(19655), Uint32_t(19707), Uint32_t(19763), Uint32_t(19819), Uint32_t(19875), Uint32_t(19931), Uint32_t(19986), Uint32_t(20037), Uint32_t(20092), Uint32_t(20147), Uint32_t(20198), Uint32_t(20249), Uint32_t(20300), Uint32_t(20350), Uint32_t(20430), Uint32_t(20480), Uint32_t(20530), Uint32_t(20580), Uint32_t(20630), Uint32_t(20680), Uint32_t(20730), Uint32_t(20780), Uint32_t(20830), Uint32_t(20880), Uint32_t(20930), Uint32_t(20980), Uint32_t(21030), Uint32_t(21080), Uint32_t(21130), Uint32_t(21180), Uint32_t(21230), Uint32_t(21310), Uint32_t(21360), Uint32_t(21410), Uint32_t(21460), Uint32_t(21510), Uint32_t(21560), Uint32_t(21610), Uint32_t(21660), Uint32_t(21710), Uint32_t(21760), Uint32_t(21810), Uint32_t(21860), Uint32_t(21910), Uint32_t(21960), Uint32_t(22010), Uint32_t(22060), Uint32_t(22110), Uint32_t(22160), Uint32_t(22210), Uint32_t(22260), Uint32_t(22310), Uint32_t(22360), Uint32_t(22410), Uint32_t(22460), Uint32_t(22510), Uint32_t(22560), Uint32_t(22610), Uint32_t(22660), Uint32_t(22710), Uint32_t(22760), Uint32_t(22810), Uint32_t(22860), Uint32_t(22910), Uint32_t(22960), Uint32_t(23010), Uint32_t(23060), Uint32_t(23110), Uint32_t(23160), Uint32_t(23210), Uint32_t(23260), Uint32_t(23310), Uint32_t(23360), Uint32_t(23410), Uint32_t(23460), Uint32_t(23510), Uint32_t(23560), Uint32_t(23610), Uint32_t(23660), Uint32_t(23710), Uint32_t(23760), Uint32_t(23810), Uint32_t(23892), Uint32_t(23942), Uint32_t(23992), Uint32_t(24042), Uint32_t(24121), Uint32_t(24200), Uint32_t(24279), Uint32_t(24328), Uint32_t(24377), Uint32_t(24456), Uint32_t(24535), Uint32_t(24614), Uint32_t(24690), Uint32_t(24738), Uint32_t(24786), Uint32_t(24834), Uint32_t(24882), Uint32_t(24930), Uint32_t(24978), Uint32_t(25026), Uint32_t(25074), Uint32_t(25150), Uint32_t(25232), Uint32_t(25280), Uint32_t(25362), Uint32_t(25410), Uint32_t(25458), Uint32_t(25506), Uint32_t(25554), Uint32_t(25602), Uint32_t(25650), Uint32_t(25698), Uint32_t(25746), Uint32_t(25794), Uint32_t(25842), Uint32_t(25890), Uint32_t(25938), Uint32_t(26009), Uint32_t(26074), Uint32_t(26145), Uint32_t(26202), Uint32_t(26271), Uint32_t(26338), Uint32_t(26403), Uint32_t(26466), Uint32_t(26527), Uint32_t(26584), Uint32_t(26655), Uint32_t(26718), Uint32_t(26775), Uint32_t(26832), Uint32_t(26889), Uint32_t(26946), Uint32_t(27017), Uint32_t(27078), Uint32_t(27145), Uint32_t(27214), Uint32_t(27262), Uint32_t(27308), Uint32_t(27354), Uint32_t(27402), Uint32_t(27472), Uint32_t(27518), Uint32_t(27597), Uint32_t(27642), Uint32_t(27687), Uint32_t(27732), Uint32_t(27781), Uint32_t(27830), Uint32_t(27879), Uint32_t(27945), Uint32_t(28003), Uint32_t(28079), Uint32_t(28133), Uint32_t(28195), Uint32_t(28259), Uint32_t(28323), Uint32_t(28371), Uint32_t(28439), Uint32_t(28503), Uint32_t(28567), Uint32_t(28615), Uint32_t(28669), Uint32_t(28723), Uint32_t(28771), Uint32_t(28831), Uint32_t(28895), Uint32_t(28963), Uint32_t(29024), Uint32_t(29077), Uint32_t(29138), Uint32_t(29199), Uint32_t(29260), Uint32_t(29303), Uint32_t(29364), Uint32_t(29425), Uint32_t(29486), Uint32_t(29547), Uint32_t(29608), Uint32_t(29669), Uint32_t(29730), Uint32_t(29791), Uint32_t(29852), Uint32_t(29897), Uint32_t(29942), Uint32_t(29987), Uint32_t(30032), Uint32_t(30085), Uint32_t(30146), Uint32_t(30207), Uint32_t(30268), Uint32_t(30329), Uint32_t(30390), Uint32_t(30437), Uint32_t(30482), Uint32_t(30543), Uint32_t(30588), Uint32_t(30649), Uint32_t(30710), Uint32_t(30771), Uint32_t(30832), Uint32_t(30893), Uint32_t(30954), Uint32_t(31019), Uint32_t(31084), Uint32_t(31145), Uint32_t(31190), Uint32_t(31251), Uint32_t(31312), Uint32_t(31373), Uint32_t(31434), Uint32_t(31495), Uint32_t(31556), Uint32_t(31617), Uint32_t(31678), Uint32_t(31739), Uint32_t(31798), Uint32_t(31865), Uint32_t(31918), Uint32_t(31979), Uint32_t(32036), Uint32_t(32101), Uint32_t(32164), Uint32_t(32225), Uint32_t(32286), Uint32_t(32353), Uint32_t(32414), Uint32_t(32475), Uint32_t(32518), Uint32_t(32565), Uint32_t(32626), Uint32_t(32687), Uint32_t(32729), Uint32_t(32771), Uint32_t(32813), Uint32_t(32857), Uint32_t(32899), Uint32_t(32941), Uint32_t(32985), Uint32_t(33027), Uint32_t(33069), Uint32_t(33111), Uint32_t(33153), Uint32_t(33197), Uint32_t(33241), Uint32_t(33283), Uint32_t(33325), Uint32_t(33367), Uint32_t(33411), Uint32_t(33453), Uint32_t(33497), Uint32_t(33539), Uint32_t(33581), Uint32_t(33623), Uint32_t(33665), Uint32_t(33707), Uint32_t(33749), Uint32_t(33791), Uint32_t(33833), Uint32_t(33875), Uint32_t(33917), Uint32_t(33959), Uint32_t(34001), Uint32_t(34043), Uint32_t(34084), Uint32_t(34125), Uint32_t(34166), Uint32_t(34207), Uint32_t(34248), Uint32_t(34293), Uint32_t(34334), Uint32_t(34375), Uint32_t(34416), Uint32_t(34457), Uint32_t(34498), Uint32_t(34539), Uint32_t(34580), Uint32_t(34621), Uint32_t(34662), Uint32_t(34707), Uint32_t(34748), Uint32_t(34789), Uint32_t(34830), Uint32_t(34871), Uint32_t(34912), Uint32_t(34953), Uint32_t(34994), Uint32_t(35035), Uint32_t(35076), Uint32_t(35117), Uint32_t(35158), Uint32_t(35200), Uint32_t(35242), Uint32_t(35282), Uint32_t(35322), Uint32_t(35362), Uint32_t(35402), Uint32_t(35432), Uint32_t(35469), Uint32_t(35518), Uint32_t(35555), Uint32_t(35584), Uint32_t(35609), Uint32_t(35634), Uint32_t(35663), Uint32_t(35688), Uint32_t(35713), Uint32_t(35741), Uint32_t(35787), Uint32_t(35821), Uint32_t(35855), Uint32_t(35886), Uint32_t(35911), Uint32_t(35949), Uint32_t(35987), Uint32_t(36025), Uint32_t(36063), Uint32_t(36085), Uint32_t(36123), Uint32_t(36145), Uint32_t(36167), Uint32_t(36202), Uint32_t(36234), Uint32_t(36266), Uint32_t(36298), Uint32_t(36330), Uint32_t(36367), Uint32_t(36396), Uint32_t(36415), Uint32_t(36452), Uint32_t(36481), Uint32_t(36504), Uint32_t(36527), Uint32_t(36552), Uint32_t(36589), Uint32_t(36614), Uint32_t(36637), Uint32_t(36662), Uint32_t(36699), Uint32_t(36720), Uint32_t(36741), Uint32_t(36762), Uint32_t(36785), Uint32_t(36808), Uint32_t(36842), Uint32_t(36876), Uint32_t(36910), Uint32_t(36944), Uint32_t(36978), Uint32_t(37012), Uint32_t(37046), Uint32_t(37080), Uint32_t(37114), Uint32_t(37137), Uint32_t(37156), Uint32_t(37175), Uint32_t(37194), Uint32_t(37217), Uint32_t(37240), Uint32_t(37258), Uint32_t(37276), Uint32_t(37290), Uint32_t(37306), Uint32_t(37324), Uint32_t(37348), Uint32_t(37362), Uint32_t(37376), Uint32_t(37396), Uint32_t(37414), Uint32_t(37432), Uint32_t(37450), Uint32_t(37468), Uint32_t(37488), Uint32_t(37512), Uint32_t(37532), Uint32_t(37558), Uint32_t(37582), Uint32_t(37600), Uint32_t(37620), Uint32_t(37641), Uint32_t(37660), Uint32_t(37683), Uint32_t(37706), Uint32_t(37719), Uint32_t(37742), Uint32_t(37765), Uint32_t(37790), Uint32_t(37813), Uint32_t(37836), Uint32_t(37857), Uint32_t(37878), Uint32_t(37899), Uint32_t(37920), Uint32_t(37939), Uint32_t(37958), Uint32_t(37981), Uint32_t(38002), Uint32_t(38021), Uint32_t(38044), Uint32_t(38057), Uint32_t(38078), Uint32_t(38095), Uint32_t(38116), Uint32_t(38129), Uint32_t(38154), Uint32_t(38167), Uint32_t(38186), Uint32_t(38209), Uint32_t(38222), Uint32_t(38239), Uint32_t(38264), Uint32_t(38279), Uint32_t(38304), Uint32_t(38317), Uint32_t(38338), Uint32_t(38363), Uint32_t(38382), Uint32_t(38401), Uint32_t(38426), Uint32_t(38451), Uint32_t(38472), Uint32_t(38495), Uint32_t(38514), Uint32_t(38533), Uint32_t(38553), Uint32_t(38573), Uint32_t(38589), Uint32_t(38605), Uint32_t(38623), Uint32_t(38639), Uint32_t(38655), Uint32_t(38673), Uint32_t(38689), Uint32_t(38709), Uint32_t(38731), Uint32_t(38753), Uint32_t(38773), Uint32_t(38789), Uint32_t(38807), Uint32_t(38829), Uint32_t(38845), Uint32_t(38863), Uint32_t(38879), Uint32_t(38899), Uint32_t(38917), Uint32_t(38935), Uint32_t(38957), Uint32_t(38973), Uint32_t(38995), Uint32_t(39010), Uint32_t(39027), Uint32_t(39040), Uint32_t(39055), Uint32_t(39072), Uint32_t(39089), Uint32_t(39104), Uint32_t(39121), Uint32_t(39138), Uint32_t(39155), Uint32_t(39172), Uint32_t(39187), Uint32_t(39204), Uint32_t(39215), Uint32_t(39232), Uint32_t(39245), Uint32_t(39262), Uint32_t(39273), Uint32_t(39292), Uint32_t(39309), Uint32_t(39322), Uint32_t(39337), Uint32_t(39354), Uint32_t(39371), Uint32_t(39388), Uint32_t(39405), Uint32_t(39422), Uint32_t(39439), Uint32_t(39456), Uint32_t(39473), Uint32_t(39490), Uint32_t(39504), Uint32_t(39520), Uint32_t(39534), Uint32_t(39550), Uint32_t(39566), Uint32_t(39582), Uint32_t(39596), Uint32_t(39608), Uint32_t(39624), Uint32_t(39634), Uint32_t(39648), Uint32_t(39662), Uint32_t(39676), Uint32_t(39690), Uint32_t(39704), Uint32_t(39720), Uint32_t(39730), Uint32_t(39744), Uint32_t(39758), Uint32_t(39772), Uint32_t(39786), Uint32_t(39800), Uint32_t(39816), Uint32_t(39830), Uint32_t(39846), Uint32_t(39862), Uint32_t(39878), Uint32_t(39894), Uint32_t(39910), Uint32_t(39920), Uint32_t(39936), Uint32_t(39950), Uint32_t(39966), Uint32_t(39982), Uint32_t(39998), Uint32_t(40010), Uint32_t(40024), Uint32_t(40038), Uint32_t(40052), Uint32_t(40066), Uint32_t(40080), Uint32_t(40096), Uint32_t(40112), Uint32_t(40122), Uint32_t(40138), Uint32_t(40148), Uint32_t(40164), Uint32_t(40178), Uint32_t(40187), Uint32_t(40200), Uint32_t(40213), Uint32_t(40226), Uint32_t(40239), Uint32_t(40252), Uint32_t(40265), Uint32_t(40278), Uint32_t(40291), Uint32_t(40300), Uint32_t(40313), Uint32_t(40326), Uint32_t(40339), Uint32_t(40352), Uint32_t(40363), Uint32_t(40376), Uint32_t(40389), Uint32_t(40402), Uint32_t(40413), Uint32_t(40426), Uint32_t(40439), Uint32_t(40452), Uint32_t(40465), Uint32_t(40478), Uint32_t(40491), Uint32_t(40504), Uint32_t(40517), Uint32_t(40530), Uint32_t(40543), Uint32_t(40556), Uint32_t(40569), Uint32_t(40582), Uint32_t(40595), Uint32_t(40608), Uint32_t(40621), Uint32_t(40634), Uint32_t(40647), Uint32_t(40656), Uint32_t(40669), Uint32_t(40682), Uint32_t(40695), Uint32_t(40708), Uint32_t(40721), Uint32_t(40734), Uint32_t(40747), Uint32_t(40760), Uint32_t(40773), Uint32_t(40786), Uint32_t(40799), Uint32_t(40808), Uint32_t(40821), Uint32_t(40834), Uint32_t(40847), Uint32_t(40858), Uint32_t(40871), Uint32_t(40880), Uint32_t(40893), Uint32_t(40906), Uint32_t(40915), Uint32_t(40924), Uint32_t(40937), Uint32_t(40950), Uint32_t(40963), Uint32_t(40976), Uint32_t(40989), Uint32_t(41002), Uint32_t(41013), Uint32_t(41026), Uint32_t(41039), Uint32_t(41052), Uint32_t(41063), Uint32_t(41072), Uint32_t(41085), Uint32_t(41094), Uint32_t(41105), Uint32_t(41118), Uint32_t(41127), Uint32_t(41140), Uint32_t(41153), Uint32_t(41162), Uint32_t(41173), Uint32_t(41186), Uint32_t(41194), Uint32_t(41202), Uint32_t(41210), Uint32_t(41220), Uint32_t(41228), Uint32_t(41236), Uint32_t(41244), Uint32_t(41252), Uint32_t(41260), Uint32_t(41268), Uint32_t(41278), Uint32_t(41286), Uint32_t(41296), Uint32_t(41304), Uint32_t(41312), Uint32_t(41320), Uint32_t(41330), Uint32_t(41340), Uint32_t(41348), Uint32_t(41358), Uint32_t(41366), Uint32_t(41374), Uint32_t(41382), Uint32_t(41392), Uint32_t(41400), Uint32_t(41410), Uint32_t(41418), Uint32_t(41426), Uint32_t(41434), Uint32_t(41442), Uint32_t(41450), Uint32_t(41458), Uint32_t(41466), Uint32_t(41474), Uint32_t(41482), Uint32_t(41490), Uint32_t(41498), Uint32_t(41506), Uint32_t(41514), Uint32_t(41521), Uint32_t(41528), Uint32_t(41535), Uint32_t(41542), Uint32_t(41549), Uint32_t(41556), Uint32_t(41563), Uint32_t(41570), Uint32_t(41577), Uint32_t(41584), Uint32_t(41591), Uint32_t(41598), Uint32_t(41605), Uint32_t(41612), Uint32_t(41619), Uint32_t(41626), Uint32_t(41633), Uint32_t(41640), Uint32_t(41647), Uint32_t(41654), Uint32_t(41661), Uint32_t(41668), Uint32_t(41675), Uint32_t(41682), Uint32_t(41689), Uint32_t(41696), Uint32_t(41703), Uint32_t(41710), Uint32_t(41717), Uint32_t(41724), Uint32_t(41731), Uint32_t(41738), Uint32_t(41745), Uint32_t(41752), Uint32_t(41759), Uint32_t(41766), Uint32_t(41773), Uint32_t(41780), Uint32_t(41787), Uint32_t(41794), Uint32_t(41801), Uint32_t(41808), Uint32_t(41815), Uint32_t(41822), Uint32_t(41829), Uint32_t(41836), Uint32_t(41843), Uint32_t(41850), Uint32_t(41857), Uint32_t(41864), Uint32_t(41871), Uint32_t(41878), Uint32_t(41885), Uint32_t(41892), Uint32_t(41899), Uint32_t(41906), Uint32_t(41913), Uint32_t(41920), Uint32_t(41927), Uint32_t(41934), Uint32_t(41941), Uint32_t(41948), Uint32_t(41955), Uint32_t(41962), Uint32_t(41969), Uint32_t(41976), Uint32_t(41983), Uint32_t(41990), Uint32_t(41997), Uint32_t(42004), Uint32_t(42011), Uint32_t(42018), Uint32_t(42025), Uint32_t(42032), Uint32_t(42039), Uint32_t(42046), Uint32_t(42053), Uint32_t(42060), Uint32_t(42067), Uint32_t(42074), Uint32_t(42081), Uint32_t(42088), Uint32_t(42095), Uint32_t(42102), Uint32_t(42109), Uint32_t(42116), Uint32_t(42123), Uint32_t(42130), Uint32_t(42137), Uint32_t(42144), Uint32_t(42151), Uint32_t(42158), Uint32_t(42165), Uint32_t(42172)} /* parser.c:48674:17 */

var ts_parse_actions = [2332]TSParseActionEntry{{}, func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeRecover
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 4)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(0)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_module
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(175)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(870)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(765)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(104)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(548)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(46)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(256)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(180)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(251)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(161)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(958)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(961)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(962)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(263)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(157)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(433)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(264)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1075)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(194)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1074)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1073)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1072)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(166)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1069)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(515)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(101)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(265)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(516)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(662)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(162)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(605)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(112)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(605)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(47)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(744)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(272)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(154)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(435)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(268)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1066)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(210)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1079)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1068)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(247)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(228)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(976)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(175)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(870)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(765)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(104)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(548)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(46)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(256)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(180)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(251)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(161)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(958)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(961)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(962)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(272)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(154)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(435)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(268)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1066)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(210)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1079)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1073)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1072)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(166)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1068)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(515)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(101)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(265)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(516)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(662)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(162)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(605)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(112)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(605)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(47)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(744)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(237)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(263)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(157)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(433)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(264)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1075)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(194)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1074)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_module_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1069)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(992)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(235)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_module
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(540)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_primary_expression
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(1)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_primary_expression
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(1)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(1)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_primary_expression
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(1)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(591)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(297)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(1)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(1)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(95)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(148)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(142)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(516)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(221)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(421)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(7)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(329)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(2)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(409)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(33)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(328)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(12)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(279)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(5)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(377)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(29)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(371)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(19)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(398)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(13)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(260)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(3)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(362)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(18)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(339)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(9)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(342)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(16)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(341)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(6)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(209)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(15)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(295)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(23)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(427)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(37)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(413)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(34)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(812)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(35)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(381)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(25)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(354)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(10)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(205)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(20)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(345)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(22)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(403)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(8)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(404)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(27)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(326)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(38)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(254)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(31)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(366)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(28)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(393)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(4)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(349)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(26)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(384)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(14)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(375)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(21)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(315)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(39)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(809)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(11)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(407)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(30)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(273)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(32)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(405)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(17)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(334)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(24)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(392)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(36)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(242)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(250)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(245)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(985)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(968)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(226)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(484)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(135)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(486)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(149)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(306)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(546)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(657)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(443)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(110)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(443)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(93)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(758)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(481)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(146)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(488)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(147)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(283)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(571)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(660)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(94)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(588)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(134)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(127)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(287)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(518)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(658)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(628)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(111)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(628)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(97)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(733)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(305)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_primary_expression
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(1)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_splat_pattern
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(4)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(573)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(105)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(288)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(594)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(102)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(201)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(152)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(96)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(587)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(216)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(582)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(530)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(529)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(133)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1060)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(252)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(323)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(447)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1031)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(609)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1081)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(585)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(527)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(108)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(548)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(550)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(106)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(546)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(140)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__collection_elements
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(252)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_subscript
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(40)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_subscript
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(40)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_subscript
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(40)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_subscript
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(40)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(537)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(590)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1021)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(592)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(98)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__collection_elements
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(442)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1004)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_attribute
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(21)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_attribute
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(21)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(634)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1006)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(482)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(613)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(99)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_subscript
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(72)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_subscript
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(72)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(82)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(82)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(659)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(483)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(73)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(73)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(616)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(439)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(440)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(624)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(489)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(607)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(451)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(453)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(603)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(617)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(583)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(580)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(74)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(74)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(612)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(490)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(581)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(604)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(59)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(59)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(296)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_yield
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(430)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(219)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1080)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_expression_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_expression_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(429)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(199)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1053)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(632)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(626)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(308)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_raise_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(322)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(597)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(48)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(48)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1023)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(232)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1049)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(33)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(33)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1051)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(231)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1050)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(764)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(437)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(602)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(455)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(179)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(614)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_primary_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_primary_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_primary_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(325)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(619)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(172)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_slice
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(193)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_return_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(125)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_expression_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_expression_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_slice
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(211)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(182)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(116)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_expression_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(44)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(44)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(316)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(123)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(43)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(43)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(261)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_try_statement_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_try_statement_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_try_statement_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(232)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_expression_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(63)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(63)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_print_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_print_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(5)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(31)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(31)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_slice
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_slice
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_print_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(14)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_print_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(13)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_tuple
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_tuple_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_tuple
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_tuple
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_tuple_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_tuple_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_try_statement_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(231)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__simple_statements
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__simple_statements
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_block
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_block
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_if_statement_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(61)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_if_statement_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(61)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_if_statement_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(61)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(261)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(73)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(56)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_block
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_block
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__simple_statements
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__simple_statements
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_if_statement_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(61)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(316)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__simple_statements
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__simple_statements
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(68)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(68)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(80)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(80)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(623)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(636)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(100)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(90)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(90)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_except_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(66)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(66)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(48)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(48)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(76)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(76)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(33)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(33)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_elif_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(44)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_elif_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(44)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_if_statement_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(41)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_if_statement_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(41)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(84)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(84)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_elif_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(31)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_elif_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(31)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_while_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(47)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_while_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(47)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(79)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(79)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_while_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(32)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_while_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(32)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_else_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(33)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_else_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(33)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_concatenated_string_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_concatenated_string_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_concatenated_string_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(758)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_concatenated_string
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_concatenated_string
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_else_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(48)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_else_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(48)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(62)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(62)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__patterns
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_class_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(70)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_class_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(70)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(78)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(78)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(77)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(77)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(34)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(34)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(69)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(69)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(75)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(75)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(45)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(45)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(33)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(33)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_class_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(36)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_class_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(36)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(9)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(88)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(9)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(88)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__patterns
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_finally_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(68)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_finally_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(68)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_while_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(67)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_while_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(67)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(65)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(65)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(9)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(89)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(9)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(89)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(64)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(64)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_decorated_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(11)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_decorated_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(11)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(87)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(87)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_finally_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_finally_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(60)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(60)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(48)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_try_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(48)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(81)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(7)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(81)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(86)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(86)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_while_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(46)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_while_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(46)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(49)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(49)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(85)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(85)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(83)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(8)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(83)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_class_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(52)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_class_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(52)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_class_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(51)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_class_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(51)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(50)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_function_definition
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(50)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(42)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(42)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(921)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_string
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_string
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_string
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_string
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_parenthesized_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_parenthesized_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(27)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(27)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_tuple
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_tuple
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1041)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(120)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(533)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(534)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(535)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(536)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(533)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(212)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(997)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(539)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(541)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(542)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(543)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(535)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(510)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(526)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(525)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(524)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(523)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(526)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1037)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(522)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(521)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(520)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(519)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(524)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(504)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_generator_expression
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(28)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_generator_expression
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(28)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_call
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(10)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_call
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(10)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(27)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(27)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_set
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_set
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_set_comprehension
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(28)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_set_comprehension
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(28)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_comprehension
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(28)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_comprehension
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(28)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(27)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(27)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_argument_list
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary_comprehension
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(28)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary_comprehension
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(28)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_binary_operator
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(20)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_binary_operator
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(20)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_unary_operator
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(8)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_unary_operator
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(8)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(294)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(301)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(538)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_parameter
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(9)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(528)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(994)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(118)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(512)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(544)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(552)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(559)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(512)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(215)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1035)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(567)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(570)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(575)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(574)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(552)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(500)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_concatenated_string_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(744)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(995)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(122)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(549)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(551)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(553)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(554)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(549)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(224)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1029)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(555)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(556)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(557)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(558)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(553)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(499)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(563)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(532)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(514)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_concatenated_string_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(733)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(545)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_splat_pattern
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(4)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(310)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_splat_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(648)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(645)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(282)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_primary_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_splat_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(524)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1037)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(524)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(504)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_comparison_operator
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_comparison_operator
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(535)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(997)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(535)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(510)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__patterns_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__patterns_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(445)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(552)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1035)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(552)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(500)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(840)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary_splat_pattern
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(4)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary_splat_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_tuple_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_pattern
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(114)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(553)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1029)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(553)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_comparison_operator_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(499)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(113)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(249)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(103)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(107)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(952)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(424)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(485)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(302)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(547)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(278)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(220)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(299)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_boolean_operator
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(20)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_boolean_operator
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(20)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(319)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_await
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_await
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(830)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(954)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__parameters
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__parameters
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(631)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_item
	*(*Int16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 4)) = int16(-1)
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(6)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(115)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(436)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(277)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1043)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(434)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(289)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(284)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(298)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(115)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(255)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__collection_elements
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_conditional_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(276)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(292)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_not_operator
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(5)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_not_operator
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(5)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_lambda
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(38)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_lambda
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(38)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_conditional_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_lambda
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(16)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_lambda
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(16)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_named_expression
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(17)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_named_expression
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(17)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(438)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(606)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(139)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(577)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(622)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(132)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(458)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(138)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__comprehension_clauses
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(318)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__expression_within_for_in_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__comprehension_clauses_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__comprehension_clauses_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(318)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__comprehension_clauses_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1043)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__comprehension_clauses_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(434)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__comprehension_clauses
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(74)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(144)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(59)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(151)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(253)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_if_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_yield
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(156)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(320)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(313)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_for_in_clause_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_for_in_clause_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(198)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(82)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(126)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1083)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1079)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1068)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_assert_statement_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(311)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(184)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_raise_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1040)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1074)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1069)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(73)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(128)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(280)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(735)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 4)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(735)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(572)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__collection_elements_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(189)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_expression_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(781)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(866)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(965)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(307)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_exec_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(7)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__right_hand_side
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(170)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(459)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_return_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_delete_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(746)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(746)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(593)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(431)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_string_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(280)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_string_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(735)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_string_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(735)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_string_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(881)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_type
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(274)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(285)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(293)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_assert_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_item
	*(*Int16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 4)) = int16(-1)
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(6)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(436)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_yield
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(204)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_print_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(5)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_lambda_within_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(16)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(723)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(723)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(517)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(600)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(160)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(618)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pair
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(39)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_lambda_within_for_in_clause
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(38)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(163)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(586)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(802)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(795)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(940)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(734)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(734)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(432)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(187)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(186)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(185)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_list_splat
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(188)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(117)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(173)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(615)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(736)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(736)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(909)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(770)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(834)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1022)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_subscript_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(55)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(257)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(52)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dotted_name
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1032)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dotted_name
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_chevron
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(155)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_assert_statement_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(300)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_typed_default_parameter
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(71)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_dotted_name_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_dotted_name_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1032)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(259)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(82)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(49)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(72)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(207)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1005)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_print_statement_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(5)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(60)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_dotted_name_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1005)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_dictionary_splat
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_default_parameter
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(17)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_decorated_definition_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_decorated_definition_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(515)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(51)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_assert_statement_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(307)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(231)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1050)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_interpolation
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_interpolation
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(183)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(232)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1049)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_raise_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(15)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(119)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_raise_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(30)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(324)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_format_specifier
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(807)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_slice
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__collection_elements_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(158)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_format_specifier
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(817)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_interpolation
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_interpolation
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(846)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_interpolation
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_interpolation
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__import_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(3)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_format_specifier_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(324)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_format_specifier_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_format_specifier_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(817)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__import_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(12)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(816)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1011)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__import_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(3)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_keyword_argument
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(54)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_keyword_argument
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(17)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_argument_list_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__patterns
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(373)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(304)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_exec_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(7)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(271)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(68)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(69)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_parameter
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(243)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(270)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__import_list_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(22)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(886)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_parenthesized_list_splat
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_import_prefix
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(844)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(200)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(818)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__import_list
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(12)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_print_statement_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(29)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(317)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_print_statement_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(29)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1039)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_global_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(770)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_decorator
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__import_list_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(23)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(887)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__import_list_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(23)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_nonlocal_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_global_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_import_prefix_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_import_prefix_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(844)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_nonlocal_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(84)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(58)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(286)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(79)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(275)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_parenthesized_list_splat
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(27)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(62)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(203)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_print_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(262)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(59)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_typed_parameter
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(37)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(291)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_global_statement_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1039)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_global_statement_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_with_clause_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_with_clause_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(227)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_assert_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(213)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_print_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(14)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(214)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_print_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(13)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(61)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(858)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(993)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(356)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(227)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(223)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(225)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(236)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(90)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(956)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(233)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(839)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(87)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(240)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1048)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(853)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_format_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_format_expression
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__parameters
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(669)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(833)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__import_list_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(23)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(898)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_subscript_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(56)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(191)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_subscript_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(56)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(89)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_argument_list_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(153)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(124)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(71)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_relative_import
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(176)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(141)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(192)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(129)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(143)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(625)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(145)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(668)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(167)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(667)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(178)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(169)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(159)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(136)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(86)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(457)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(137)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_dictionary_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(177)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_dictionary_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__simple_statements_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(92)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__simple_statements_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(109)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_assignment
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(18)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__parameters_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(671)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__parameters_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_item
	*(*Int16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 4)) = int16(-1)
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(35)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym__parameters_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(674)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(91)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(601)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(150)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(131)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(248)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(130)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(808)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(181)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(54)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_aliased_import
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(24)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(290)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_exec_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(7)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(234)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(666)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(1026)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(88)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(238)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_parameters
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(665)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pass_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_break_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_continue_statement
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_future_import_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(25)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_wildcard_import
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_import_from_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(26)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_import_from_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(58)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(77)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(244)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(64)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(239)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(6)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_future_import_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(57)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(53)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(229)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(50)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(246)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_argument_list_repeat1
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(27)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_augmented_assignment
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(20)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(5)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_assignment
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(53)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_import_statement
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(2)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_parameters
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_assignment
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(19)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(974)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(174)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(620)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(599)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(545)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(621)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(608)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(578)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(598)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(627)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(629)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(806)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(460)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(454)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(813)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(456)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(945)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(975)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(969)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(649)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(596)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(48)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_relative_import
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(449)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(726)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(811)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(67)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(589)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(610)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(312)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(563)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(75)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(810)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(266)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(630)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(532)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(70)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(514)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(633)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(872)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(121)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(74)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(428)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(989)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(81)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(595)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_with_clause
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(66)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(78)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(76)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(957)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(452)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(85)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(83)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(57)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(55)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(258)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(222)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(441)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeAccept
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(65)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(444)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(897)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(944)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(650)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(845)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(838)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(970)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(80)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(584)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(269)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_lambda_parameters
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(966)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(964)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(63)
	return r
}()} /* parser.c:49664:27 */

func Xtree_sitter_python(tls *libc.TLS) uintptr { /* parser.c:50796:25: */
	return uintptr(unsafe.Pointer(&language))
}

var language = TSLanguage{Version: Uint32_t(LANGUAGE_VERSION), Symbol_count: Uint32_t(SYMBOL_COUNT), Token_count: Uint32_t(TOKEN_COUNT), External_token_count: Uint32_t(EXTERNAL_TOKEN_COUNT), State_count: Uint32_t(STATE_COUNT), Large_state_count: Uint32_t(LARGE_STATE_COUNT), Production_id_count: Uint32_t(PRODUCTION_ID_COUNT), Field_count: Uint32_t(FIELD_COUNT), Max_alias_sequence_length: Uint16_t(MAX_ALIAS_SEQUENCE_LENGTH), Parse_table: 0, Small_parse_table: 0, Small_parse_table_map: 0, Parse_actions: 0, Symbol_names: 0, Field_names: 0, Field_map_slices: 0, Field_map_entries: 0, Symbol_metadata: 0, Public_symbol_map: 0, Alias_map: 0, Alias_sequences: 0, Lex_modes: 0, Lex_fn: 0, Keyword_lex_fn: 0, Keyword_capture_token: Sym_identifier, External_scanner: struct {
	States      uintptr
	Symbol_map  uintptr
	Create      uintptr
	Destroy     uintptr
	Scan        uintptr
	Serialize   uintptr
	Deserialize uintptr
}{
	States:      0,
	Symbol_map:  0,
	Create:      0,
	Destroy:     0,
	Scan:        0,
	Serialize:   0,
	Deserialize: 0,
},
} /* parser.c:50797:21 */

//  Lexer Macros

//  Parse Table Macros

// Copyright (C) 1996-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

//	ISO C99 Standard: 7.25
//	Wide character classification and mapping utilities  <wctype.h>

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Some versions of stddef.h provide wint_t, even though neither the
//    C nor C++ standards, nor POSIX, specifies this.  We assume that
//    stddef.h will define the macro _WINT_T if and only if it provides
//    wint_t, and conversely, that it will avoid providing wint_t if
//    _WINT_T is already defined.

// Integral type unchanged by default argument promotions that can
//    hold any value corresponding to members of the extended character
//    set, as well as at least one value that does not correspond to any
//    member of the extended character set.

type Wint_t = uint32 /* wint_t.h:20:23 */

// Constant expression of type `wint_t' whose value does not correspond
//    to any member of the extended character set.

// Some definitions from this header also appear in <wchar.h> in
//    Unix98 mode.
// Copyright (C) 1996-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

//	ISO C99 Standard: 7.25
//	Wide character classification and mapping utilities  <wctype.h>

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// The definitions in this header are specified to appear in <wctype.h>
//    in ISO C99, but in <wchar.h> in Unix98.  _GNU_SOURCE follows C99.

// Scalar type that can hold values which represent locale-specific
//    character classifications.
type Wctype_t = uint64 /* wctype-wchar.h:38:27 */

// Extensible wide-character mapping functions: 7.15.3.2.

// Scalar type that can hold values which represent locale-specific
//    character mappings.
type Wctrans_t = uintptr /* wctype.h:48:25 */

// POSIX.1-2008 extended locale interface (see locale.h).
// Definition of locale_t.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Definition of struct __locale_struct and __locale_t.
//    Copyright (C) 1997-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// POSIX.1-2008: the locale_t type, representing a locale context
//    (implementation-namespace version).  This type should be treated
//    as opaque by applications; some details are exposed for the sake of
//    efficiency in e.g. ctype functions.

type S__locale_struct = struct {
	X__locales       [13]uintptr
	X__ctype_b       uintptr
	X__ctype_tolower uintptr
	X__ctype_toupper uintptr
	X__names         [13]uintptr
} /* __locale_t.h:28:1 */

type X__locale_t = uintptr /* __locale_t.h:42:32 */

type Locale_t = X__locale_t /* locale_t.h:24:20 */

type Delimiter = Uint8_t /* scanner.c:28:17 */

func delimiter_is_format(tls *libc.TLS, flags Delimiter) uint8 { /* scanner.c:30:13: */
	return (uint8(libc.Bool32((int32(flags) & Format) != 0)))
}

func delimiter_is_raw(tls *libc.TLS, flags Delimiter) uint8 { /* scanner.c:34:13: */
	return (uint8(libc.Bool32((int32(flags) & Raw) != 0)))
}

func delimiter_is_triple(tls *libc.TLS, flags Delimiter) uint8 { /* scanner.c:38:13: */
	return (uint8(libc.Bool32((int32(flags) & Triple) != 0)))
}

func delimiter_is_bytes(tls *libc.TLS, flags Delimiter) uint8 { /* scanner.c:42:13: */
	return (uint8(libc.Bool32((int32(flags) & Bytes) != 0)))
}

func delimiter_end_character(tls *libc.TLS, flags Delimiter) Int32_t { /* scanner.c:46:16: */
	if (int32(flags) & SingleQuote) != 0 {
		return '\''
	}
	if (int32(flags) & DoubleQuote) != 0 {
		return '"'
	}
	if (int32(flags) & BackQuote) != 0 {
		return '`'
	}
	return 0
}

func delimiter_set_end_character(tls *libc.TLS, flags uintptr, character Int32_t) { /* scanner.c:53:13: */
	switch character {
	case '\'':
		*(*Delimiter)(unsafe.Pointer(flags)) |= Delimiter((SingleQuote))
		break
	case '"':
		*(*Delimiter)(unsafe.Pointer(flags)) |= Delimiter((DoubleQuote))
		break
	case '`':
		*(*Delimiter)(unsafe.Pointer(flags)) |= Delimiter((BackQuote))
		break
	default:
		if 0 != 0 {
		} else {
			libc.X__assert_fail(tls, ts+2712 /* "0" */, ts+2714 /* "internal/python/..." */, uint32(65), uintptr(unsafe.Pointer(&__func__)))
		}
	}
}

var __func__ = *(*[28]int8)(unsafe.Pointer(ts + 2746 /* "delimiter_set_en..." */)) /* scanner.c:53:78 */

type SScanner = struct {
	Indent_length_stack     uintptr
	Indent_length_stack_len Size_t
	Indent_length_stack_cap Size_t
	Delimiter_stack         uintptr
	Delimiter_stack_len     Size_t
	Delimiter_stack_cap     Size_t
} /* scanner.c:69:9 */

type Scanner = SScanner /* scanner.c:77:3 */

func new_scanner(tls *libc.TLS) uintptr { /* scanner.c:79:15: */
	if uint64(unsafe.Sizeof(Delimiter(0))) == uint64(unsafe.Sizeof(int8(0))) {
	} else {
		libc.X__assert_fail(tls, ts+2774 /* "sizeof(Delimiter..." */, ts+2714 /* "internal/python/..." */, uint32(80), uintptr(unsafe.Pointer(&__func__1)))
	}
	var s uintptr = libc.Xmalloc(tls, uint64(unsafe.Sizeof(Scanner{})))
	(*Scanner)(unsafe.Pointer(s)).Indent_length_stack = uintptr(0)
	(*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len = uint64(0)
	(*Scanner)(unsafe.Pointer(s)).Indent_length_stack_cap = uint64(0)
	(*Scanner)(unsafe.Pointer(s)).Delimiter_stack = uintptr(0)
	(*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len = uint64(0)
	(*Scanner)(unsafe.Pointer(s)).Delimiter_stack_cap = uint64(0)
	scanner_deserialize(tls, s, uintptr(0), uint32(0))
	return s
}

var __func__1 = *(*[12]int8)(unsafe.Pointer(ts + 2808 /* "new_scanner" */)) /* scanner.c:79:31 */

func scanner_push_indent_length(tls *libc.TLS, s uintptr, n Uint16_t) { /* scanner.c:92:13: */
	(*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len++
	if (*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len > (*Scanner)(unsafe.Pointer(s)).Indent_length_stack_cap {
		(*Scanner)(unsafe.Pointer(s)).Indent_length_stack = libc.Xrealloc(tls, (*Scanner)(unsafe.Pointer(s)).Indent_length_stack, (uint64(unsafe.Sizeof(Uint16_t(0))) * (*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len))
		(*Scanner)(unsafe.Pointer(s)).Indent_length_stack_cap = (*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len
	}
	*(*Uint16_t)(unsafe.Pointer((*Scanner)(unsafe.Pointer(s)).Indent_length_stack + uintptr(((*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len-uint64(1)))*2)) = n
}

func scanner_push_delimiter(tls *libc.TLS, s uintptr, d Delimiter) { /* scanner.c:101:13: */
	(*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len++
	if (*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len > (*Scanner)(unsafe.Pointer(s)).Delimiter_stack_cap {
		(*Scanner)(unsafe.Pointer(s)).Delimiter_stack = libc.Xrealloc(tls, (*Scanner)(unsafe.Pointer(s)).Delimiter_stack, (uint64(unsafe.Sizeof(Delimiter(0))) * (*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len))
		(*Scanner)(unsafe.Pointer(s)).Delimiter_stack_cap = (*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len
	}
	*(*Delimiter)(unsafe.Pointer((*Scanner)(unsafe.Pointer(s)).Delimiter_stack + uintptr(((*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len - uint64(1))))) = d
}

func scanner_serialize(tls *libc.TLS, s uintptr, buffer uintptr) uint32 { /* scanner.c:110:17: */
	var i Size_t = uint64(0)

	var stack_size Size_t = (*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len
	if stack_size > (uint64(255)) {
		stack_size = uint64(255)
	}
	*(*int8)(unsafe.Pointer(buffer + uintptr(libc.PostIncUint64(&i, 1)))) = int8(stack_size)

	libc.Xmemcpy(tls, (buffer + uintptr(i)), (*Scanner)(unsafe.Pointer(s)).Delimiter_stack, stack_size)
	i = i + (stack_size)

	var iter uintptr = ((*Scanner)(unsafe.Pointer(s)).Indent_length_stack + uintptr(1)*2)
	var end uintptr = ((*Scanner)(unsafe.Pointer(s)).Indent_length_stack + uintptr((*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len)*2)

	for ; (iter != end) && (i < uint64(TREE_SITTER_SERIALIZATION_BUFFER_SIZE)); iter += 2 {
		*(*int8)(unsafe.Pointer(buffer + uintptr(libc.PostIncUint64(&i, 1)))) = int8(*(*Uint16_t)(unsafe.Pointer(iter)))
	}

	return uint32(i)
}

func scanner_deserialize(tls *libc.TLS, s uintptr, buffer uintptr, length uint32) { /* scanner.c:130:13: */
	(*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len = uint64(0)
	(*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len = uint64(0)
	scanner_push_indent_length(tls, s, uint16(0))

	if length > uint32(0) {
		var i Size_t = uint64(0)

		var delimiter_count Size_t = Size_t(Uint8_t(*(*int8)(unsafe.Pointer(buffer + uintptr(libc.PostIncUint64(&i, 1))))))
		(*Scanner)(unsafe.Pointer(s)).Delimiter_stack = libc.Xrealloc(tls, (*Scanner)(unsafe.Pointer(s)).Delimiter_stack, (uint64(unsafe.Sizeof(Delimiter(0))) * delimiter_count))
		(*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len = delimiter_count
		(*Scanner)(unsafe.Pointer(s)).Delimiter_stack_cap = delimiter_count
		libc.Xmemcpy(tls, (*Scanner)(unsafe.Pointer(s)).Delimiter_stack, (buffer + uintptr(i)), delimiter_count)
		i = i + (delimiter_count)

		for ; i < Size_t(length); i++ {
			scanner_push_indent_length(tls, s, uint16(*(*int8)(unsafe.Pointer(buffer + uintptr(i)))))
		}
	}
}

func scanner_scan(tls *libc.TLS, s uintptr, lexer uintptr, valid_symbols uintptr) uint8 { /* scanner.c:151:13: */
	bp := tls.Alloc(1)
	defer tls.Free(1)

	if ((*(*uint8)(unsafe.Pointer(valid_symbols + 4)) != 0) && !(int32(*(*uint8)(unsafe.Pointer(valid_symbols + 1))) != 0)) && ((*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len != uint64(0)) {
		var delimiter Delimiter = *(*Delimiter)(unsafe.Pointer((*Scanner)(unsafe.Pointer(s)).Delimiter_stack + uintptr(((*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len - uint64(1)))))
		var end_character Int32_t = delimiter_end_character(tls, delimiter)
		var has_content uint8 = uint8(False)
		for (*TSLexer)(unsafe.Pointer(lexer)).Lookahead != 0 {
			if ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '{') && (delimiter_is_format(tls, delimiter) != 0) {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
				(*struct {
					f func(*libc.TLS, uintptr, uint8)
				})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
				if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '{' {
					(*struct {
						f func(*libc.TLS, uintptr, uint8)
					})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
				} else {
					(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = STRING_CONTENT
					return has_content
				}
			} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\\' {
				if delimiter_is_raw(tls, delimiter) != 0 {
					(*struct {
						f func(*libc.TLS, uintptr, uint8)
					})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
				} else if delimiter_is_bytes(tls, delimiter) != 0 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
					(*struct {
						f func(*libc.TLS, uintptr, uint8)
					})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
					if (((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 'N') || ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 'u')) || ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 'U') {
						// In bytes string, \N{...}, \uXXXX and \UXXXXXXXX are not escape sequences
						// https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
						(*struct {
							f func(*libc.TLS, uintptr, uint8)
						})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
					} else {
						(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = STRING_CONTENT
						return has_content
					}
				} else {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
					(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = STRING_CONTENT
					return has_content
				}
			} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == end_character {
				if delimiter_is_triple(tls, delimiter) != 0 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
					(*struct {
						f func(*libc.TLS, uintptr, uint8)
					})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
					if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == end_character {
						(*struct {
							f func(*libc.TLS, uintptr, uint8)
						})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
						if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == end_character {
							if has_content != 0 {
								(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = STRING_CONTENT
							} else {
								(*struct {
									f func(*libc.TLS, uintptr, uint8)
								})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
								(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
								(*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len--
								(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = STRING_END
							}
							return uint8(True)
						}
					}
				} else {
					if has_content != 0 {
						(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = STRING_CONTENT
					} else {
						(*struct {
							f func(*libc.TLS, uintptr, uint8)
						})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
						(*Scanner)(unsafe.Pointer(s)).Delimiter_stack_len--
						(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = STRING_END
					}
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
					return uint8(True)
				}
			} else if (((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\n') && (has_content != 0)) && !(delimiter_is_triple(tls, delimiter) != 0) {
				return uint8(False)
			}
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
			has_content = uint8(True)
		}
	}

	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	var found_end_of_line uint8 = uint8(False)
	var indent_length Uint32_t = Uint32_t(0)
	var first_comment_indent_length Int32_t = -1
	for {
		if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\n' {
			found_end_of_line = uint8(True)
			indent_length = Uint32_t(0)
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(True))
		} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == ' ' {
			indent_length++
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(True))
		} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\r' {
			indent_length = Uint32_t(0)
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(True))
		} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\t' {
			indent_length = indent_length + (Uint32_t(8))
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(True))
		} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '#' {
			if first_comment_indent_length == -1 {
				first_comment_indent_length = Int32_t(indent_length)
			}
			for ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead != 0) && ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead != '\n') {
				(*struct {
					f func(*libc.TLS, uintptr, uint8)
				})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(True))
			}
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(True))
			indent_length = Uint32_t(0)
		} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\\' {
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(True))
			if libc.Xiswspace(tls, uint32((*TSLexer)(unsafe.Pointer(lexer)).Lookahead)) != 0 {
				(*struct {
					f func(*libc.TLS, uintptr, uint8)
				})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(True))
			} else {
				return uint8(False)
			}
		} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\f' {
			indent_length = Uint32_t(0)
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(True))
		} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 0 {
			indent_length = Uint32_t(0)
			found_end_of_line = uint8(True)
			break
		} else {
			break
		}
	}

	if found_end_of_line != 0 {
		if (*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len != uint64(0) {
			var current_indent_length Uint16_t = *(*Uint16_t)(unsafe.Pointer((*Scanner)(unsafe.Pointer(s)).Indent_length_stack + uintptr(((*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len-uint64(1)))*2))

			if (*(*uint8)(unsafe.Pointer(valid_symbols + 1)) != 0) && (indent_length > Uint32_t(current_indent_length)) {
				scanner_push_indent_length(tls, s, uint16(indent_length))
				(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = INDENT
				return uint8(True)
			}

			if ((*(*uint8)(unsafe.Pointer(valid_symbols + 2)) != 0) && (indent_length < Uint32_t(current_indent_length))) && (first_comment_indent_length < Int32_t(current_indent_length)) {
				(*Scanner)(unsafe.Pointer(s)).Indent_length_stack_len--
				(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = DEDENT
				return uint8(True)
			}
		}

		if *(*uint8)(unsafe.Pointer(valid_symbols)) != 0 {
			(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = NEWLINE
			return uint8(True)
		}
	}

	if (first_comment_indent_length == -1) && (*(*uint8)(unsafe.Pointer(valid_symbols + 3)) != 0) {
		// var delimiter Delimiter at bp, 1

		var has_flags uint8 = uint8(False)
		for (*TSLexer)(unsafe.Pointer(lexer)).Lookahead != 0 {
			if ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 'f') || ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 'F') {
				*(*Delimiter)(unsafe.Pointer(bp /* delimiter */)) |= Delimiter(Format)
			} else if ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 'r') || ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 'R') {
				*(*Delimiter)(unsafe.Pointer(bp /* delimiter */)) |= Delimiter(Raw)
			} else if ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 'b') || ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead == 'B') {
				*(*Delimiter)(unsafe.Pointer(bp /* delimiter */)) |= Delimiter(Bytes)
			} else if ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead != 'u') && ((*TSLexer)(unsafe.Pointer(lexer)).Lookahead != 'U') {
				break
			}
			has_flags = uint8(True)
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
		}

		if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '`' {
			delimiter_set_end_character(tls, bp /* &delimiter */, '`')
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
		} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\'' {
			delimiter_set_end_character(tls, bp /* &delimiter */, '\'')
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
			if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\'' {
				(*struct {
					f func(*libc.TLS, uintptr, uint8)
				})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
				if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '\'' {
					(*struct {
						f func(*libc.TLS, uintptr, uint8)
					})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
					*(*Delimiter)(unsafe.Pointer(bp /* delimiter */)) |= Delimiter(Triple)
				}
			}
		} else if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '"' {
			delimiter_set_end_character(tls, bp /* &delimiter */, '"')
			(*struct {
				f func(*libc.TLS, uintptr, uint8)
			})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
			if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '"' {
				(*struct {
					f func(*libc.TLS, uintptr, uint8)
				})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
				if (*TSLexer)(unsafe.Pointer(lexer)).Lookahead == '"' {
					(*struct {
						f func(*libc.TLS, uintptr, uint8)
					})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, uint8(False))
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)
					*(*Delimiter)(unsafe.Pointer(bp /* delimiter */)) |= Delimiter(Triple)
				}
			}
		}

		if delimiter_end_character(tls, *(*Delimiter)(unsafe.Pointer(bp /* delimiter */))) != 0 {
			scanner_push_delimiter(tls, s, *(*Delimiter)(unsafe.Pointer(bp /* delimiter */)))
			(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = STRING_START
			return uint8(True)
		} else if has_flags != 0 {
			return uint8(False)
		}
	}

	return uint8(False)
}

// Exports

func Xtree_sitter_python_external_scanner_create(tls *libc.TLS) uintptr { /* scanner.c:364:6: */
	return new_scanner(tls)
}

func Xtree_sitter_python_external_scanner_scan(tls *libc.TLS, payload uintptr, lexer uintptr, valid_symbols uintptr) uint8 { /* scanner.c:368:6: */
	var scanner uintptr = payload
	return scanner_scan(tls, scanner, lexer, valid_symbols)
}

func Xtree_sitter_python_external_scanner_serialize(tls *libc.TLS, payload uintptr, buffer uintptr) uint32 { /* scanner.c:374:10: */
	var scanner uintptr = payload
	return scanner_serialize(tls, scanner, buffer)
}

func Xtree_sitter_python_external_scanner_deserialize(tls *libc.TLS, payload uintptr, buffer uintptr, length uint32) { /* scanner.c:379:6: */
	var scanner uintptr = payload
	scanner_deserialize(tls, scanner, buffer, length)
}

func Xtree_sitter_python_external_scanner_destroy(tls *libc.TLS, payload uintptr) { /* scanner.c:384:6: */
	var scanner uintptr = payload
	if (*Scanner)(unsafe.Pointer(scanner)).Delimiter_stack != (uintptr(0)) {
		libc.Xfree(tls, (*Scanner)(unsafe.Pointer(scanner)).Delimiter_stack)
	}
	if (*Scanner)(unsafe.Pointer(scanner)).Indent_length_stack != (uintptr(0)) {
		libc.Xfree(tls, (*Scanner)(unsafe.Pointer(scanner)).Indent_length_stack)
	}
	libc.Xfree(tls, scanner)
}

func init() {
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 40 /* .parse_table */)) = uintptr(uintptr(unsafe.Pointer(&ts_parse_table)))                                   // parser.c:50808:20:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 48 /* .small_parse_table */)) = uintptr(uintptr(unsafe.Pointer(&ts_small_parse_table)))                       // parser.c:50809:26:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 56 /* .small_parse_table_map */)) = uintptr(uintptr(unsafe.Pointer(&ts_small_parse_table_map)))               // parser.c:50810:30:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 64 /* .parse_actions */)) = uintptr(unsafe.Pointer(&ts_parse_actions))                                        // parser.c:50811:22:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 72 /* .symbol_names */)) = uintptr(unsafe.Pointer(&ts_symbol_names))                                          // parser.c:50812:21:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 80 /* .field_names */)) = uintptr(unsafe.Pointer(&ts_field_names))                                            // parser.c:50813:20:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 88 /* .field_map_slices */)) = uintptr(uintptr(unsafe.Pointer(&ts_field_map_slices)))                         // parser.c:50814:25:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 96 /* .field_map_entries */)) = uintptr(uintptr(unsafe.Pointer(&ts_field_map_entries)))                       // parser.c:50815:26:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 104 /* .symbol_metadata */)) = uintptr(unsafe.Pointer(&ts_symbol_metadata))                                   // parser.c:50816:24:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 112 /* .public_symbol_map */)) = uintptr(unsafe.Pointer(&ts_symbol_map))                                      // parser.c:50817:26:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 120 /* .alias_map */)) = uintptr(unsafe.Pointer(&ts_non_terminal_alias_map))                                  // parser.c:50818:18:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 128 /* .alias_sequences */)) = uintptr(uintptr(unsafe.Pointer(&ts_alias_sequences)))                          // parser.c:50819:24:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 136 /* .lex_modes */)) = uintptr(unsafe.Pointer(&ts_lex_modes))                                               // parser.c:50820:18:
	*(*func(*libc.TLS, uintptr, TSStateId) uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 144 /* .lex_fn */)) = ts_lex                                                // parser.c:50821:15:
	*(*func(*libc.TLS, uintptr, TSStateId) uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 152 /* .keyword_lex_fn */)) = ts_lex_keywords                               // parser.c:50822:23:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 168 /* .states */)) = uintptr(uintptr(unsafe.Pointer(&ts_external_scanner_states)))                           // parser.c:50825:7:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 176 /* .symbol_map */)) = uintptr(unsafe.Pointer(&ts_external_scanner_symbol_map))                            // parser.c:50826:7:
	*(*func(*libc.TLS) uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 184 /* .create */)) = Xtree_sitter_python_external_scanner_create                             // parser.c:50827:7:
	*(*func(*libc.TLS, uintptr))(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 192 /* .destroy */)) = Xtree_sitter_python_external_scanner_destroy                          // parser.c:50828:7:
	*(*func(*libc.TLS, uintptr, uintptr, uintptr) uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 200 /* .scan */)) = Xtree_sitter_python_external_scanner_scan        // parser.c:50829:7:
	*(*func(*libc.TLS, uintptr, uintptr) uint32)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 208 /* .serialize */)) = Xtree_sitter_python_external_scanner_serialize      // parser.c:50830:7:
	*(*func(*libc.TLS, uintptr, uintptr, uint32))(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 216 /* .deserialize */)) = Xtree_sitter_python_external_scanner_deserialize // parser.c:50831:7:
}

var ts1 = "end\x00identifier\x00import\x00.\x00from\x00__future__\x00(\x00)\x00,\x00as\x00*\x00print\x00>>\x00assert\x00:=\x00return\x00del\x00raise\x00pass\x00break\x00continue\x00if\x00:\x00elif\x00else\x00async\x00for\x00in\x00while\x00try\x00except\x00finally\x00with\x00def\x00->\x00**\x00global\x00nonlocal\x00exec\x00class\x00@\x00[\x00]\x00=\x00not\x00and\x00or\x00+\x00-\x00/\x00%\x00//\x00|\x00&\x00^\x00<<\x00~\x00<\x00<=\x00==\x00!=\x00>=\x00>\x00<>\x00is\x00lambda\x00+=\x00-=\x00*=\x00/=\x00@=\x00//=\x00%=\x00**=\x00>>=\x00<<=\x00&=\x00^=\x00|=\x00yield\x00ellipsis\x00{\x00}\x00escape_sequence\x00_not_escape_sequence\x00format_specifier_token1\x00type_conversion\x00integer\x00float\x00await\x00true\x00false\x00none\x00comment\x00_semicolon\x00_newline\x00_indent\x00_dedent\x00\"\x00_string_content\x00module\x00_statement\x00_simple_statements\x00import_statement\x00import_prefix\x00relative_import\x00future_import_statement\x00import_from_statement\x00_import_list\x00aliased_import\x00wildcard_import\x00print_statement\x00chevron\x00assert_statement\x00expression_statement\x00named_expression\x00return_statement\x00delete_statement\x00raise_statement\x00pass_statement\x00break_statement\x00continue_statement\x00if_statement\x00elif_clause\x00else_clause\x00for_statement\x00while_statement\x00try_statement\x00except_clause\x00finally_clause\x00with_statement\x00with_clause\x00with_item\x00function_definition\x00parameters\x00lambda_parameters\x00list_splat\x00dictionary_splat\x00global_statement\x00nonlocal_statement\x00exec_statement\x00class_definition\x00parenthesized_list_splat\x00argument_list\x00decorated_definition\x00decorator\x00block\x00expression_list\x00dotted_name\x00_parameters\x00_patterns\x00parameter\x00pattern\x00tuple_pattern\x00list_pattern\x00default_parameter\x00typed_default_parameter\x00list_splat_pattern\x00dictionary_splat_pattern\x00_expression_within_for_in_clause\x00expression\x00primary_expression\x00not_operator\x00boolean_operator\x00binary_operator\x00unary_operator\x00comparison_operator\x00assignment\x00augmented_assignment\x00pattern_list\x00_right_hand_side\x00attribute\x00subscript\x00slice\x00call\x00typed_parameter\x00type\x00keyword_argument\x00list\x00set\x00tuple\x00dictionary\x00pair\x00list_comprehension\x00dictionary_comprehension\x00set_comprehension\x00generator_expression\x00_comprehension_clauses\x00parenthesized_expression\x00_collection_elements\x00for_in_clause\x00if_clause\x00conditional_expression\x00concatenated_string\x00string\x00interpolation\x00format_specifier\x00format_expression\x00module_repeat1\x00_simple_statements_repeat1\x00import_prefix_repeat1\x00_import_list_repeat1\x00print_statement_repeat1\x00assert_statement_repeat1\x00if_statement_repeat1\x00try_statement_repeat1\x00with_clause_repeat1\x00global_statement_repeat1\x00argument_list_repeat1\x00decorated_definition_repeat1\x00dotted_name_repeat1\x00_parameters_repeat1\x00_patterns_repeat1\x00comparison_operator_repeat1\x00subscript_repeat1\x00dictionary_repeat1\x00_comprehension_clauses_repeat1\x00_collection_elements_repeat1\x00for_in_clause_repeat1\x00concatenated_string_repeat1\x00string_repeat1\x00format_specifier_repeat1\x00alias\x00alternative\x00argument\x00arguments\x00body\x00cause\x00code\x00condition\x00consequence\x00definition\x00function\x00key\x00left\x00module_name\x00name\x00object\x00operator\x00return_type\x00right\x00superclasses\x00value\x000\x00internal/python/patch/scanner.c\x00delimiter_set_end_character\x00sizeof(Delimiter) == sizeof(char)\x00new_scanner\x00"
var ts = (*reflect.StringHeader)(unsafe.Pointer(&ts1)).Data
