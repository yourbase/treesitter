// Code generated by 'ccgo -pkgname=json -export-defines "" -export-enums "" -export-externs X -export-structs S -export-fields "" -export-typedefs "" -trace-translation-units -o internal/json/json_linux_amd64.go -I ./internal/lib -I upstream/tree-sitter/lib/include upstream/tree-sitter-json/src/parser.c', DO NOT EDIT.

package json

import (
	"math"
	"reflect"
	"sync/atomic"
	"unsafe"

	"modernc.org/libc"
	"modernc.org/libc/sys/types"
)

var _ = math.Pi
var _ reflect.Kind
var _ atomic.Value
var _ unsafe.Pointer
var _ types.Size_t

const (
	ALIAS_COUNT                           = 0
	BIG_ENDIAN                            = 4321
	BYTE_ORDER                            = 1234
	EXIT_FAILURE                          = 1
	EXIT_SUCCESS                          = 0
	EXTERNAL_TOKEN_COUNT                  = 0
	FD_SETSIZE                            = 1024
	FIELD_COUNT                           = 2
	INT16_MAX                             = 32767
	INT16_MIN                             = -32768
	INT32_MAX                             = 2147483647
	INT32_MIN                             = -2147483648
	INT64_MAX                             = 9223372036854775807
	INT64_MIN                             = -9223372036854775808
	INT8_MAX                              = 127
	INT8_MIN                              = -128
	INTMAX_MAX                            = 9223372036854775807
	INTMAX_MIN                            = -9223372036854775808
	INTPTR_MAX                            = 9223372036854775807
	INTPTR_MIN                            = -9223372036854775808
	INT_FAST16_MAX                        = 9223372036854775807
	INT_FAST16_MIN                        = -9223372036854775808
	INT_FAST32_MAX                        = 9223372036854775807
	INT_FAST32_MIN                        = -9223372036854775808
	INT_FAST64_MAX                        = 9223372036854775807
	INT_FAST64_MIN                        = -9223372036854775808
	INT_FAST8_MAX                         = 127
	INT_FAST8_MIN                         = -128
	INT_LEAST16_MAX                       = 32767
	INT_LEAST16_MIN                       = -32768
	INT_LEAST32_MAX                       = 2147483647
	INT_LEAST32_MIN                       = -2147483648
	INT_LEAST64_MAX                       = 9223372036854775807
	INT_LEAST64_MIN                       = -9223372036854775808
	INT_LEAST8_MAX                        = 127
	INT_LEAST8_MIN                        = -128
	LANGUAGE_VERSION                      = 13
	LARGE_STATE_COUNT                     = 2
	LITTLE_ENDIAN                         = 1234
	MAX_ALIAS_SEQUENCE_LENGTH             = 4
	PDP_ENDIAN                            = 3412
	PRODUCTION_ID_COUNT                   = 2
	PTRDIFF_MAX                           = 9223372036854775807
	PTRDIFF_MIN                           = -9223372036854775808
	RAND_MAX                              = 2147483647
	SIG_ATOMIC_MAX                        = 2147483647
	SIG_ATOMIC_MIN                        = -2147483648
	SIZE_MAX                              = 18446744073709551615
	STATE_COUNT                           = 32
	SYMBOL_COUNT                          = 24
	TOKEN_COUNT                           = 14
	TREE_SITTER_PARSER_H_                 = 0
	TREE_SITTER_SERIALIZATION_BUFFER_SIZE = 1024
	UINT16_MAX                            = 65535
	UINT32_MAX                            = 4294967295
	UINT64_MAX                            = 18446744073709551615
	UINT8_MAX                             = 255
	UINTMAX_MAX                           = 18446744073709551615
	UINTPTR_MAX                           = 18446744073709551615
	UINT_FAST16_MAX                       = 18446744073709551615
	UINT_FAST32_MAX                       = 18446744073709551615
	UINT_FAST64_MAX                       = 18446744073709551615
	UINT_FAST8_MAX                        = 255
	UINT_LEAST16_MAX                      = 65535
	UINT_LEAST32_MAX                      = 4294967295
	UINT_LEAST64_MAX                      = 18446744073709551615
	UINT_LEAST8_MAX                       = 255
	WCHAR_MAX                             = 2147483647
	WCHAR_MIN                             = -2147483648
	WCONTINUED                            = 8
	WEXITED                               = 4
	WINT_MAX                              = 4294967295
	WINT_MIN                              = 0
	WNOHANG                               = 1
	WNOWAIT                               = 0x01000000
	WSTOPPED                              = 2
	WUNTRACED                             = 2
	X_ALLOCA_H                            = 1
	X_ATFILE_SOURCE                       = 1
	X_BITS_BYTESWAP_H                     = 1
	X_BITS_FLOATN_COMMON_H                = 0
	X_BITS_FLOATN_H                       = 0
	X_BITS_PTHREADTYPES_ARCH_H            = 1
	X_BITS_PTHREADTYPES_COMMON_H          = 1
	X_BITS_STDINT_INTN_H                  = 1
	X_BITS_STDINT_UINTN_H                 = 1
	X_BITS_SYSMACROS_H                    = 1
	X_BITS_TYPESIZES_H                    = 1
	X_BITS_TYPES_H                        = 1
	X_BITS_UINTN_IDENTITY_H               = 1
	X_BITS_WCHAR_H                        = 1
	X_BSD_SIZE_T_                         = 0
	X_BSD_SIZE_T_DEFINED_                 = 0
	X_DEFAULT_SOURCE                      = 1
	X_ENDIAN_H                            = 1
	X_FEATURES_H                          = 1
	X_FILE_OFFSET_BITS                    = 64
	X_GCC_SIZE_T                          = 0
	X_GCC_WCHAR_T                         = 0
	X_GCC_WRAP_STDINT_H                   = 0
	X_LP64                                = 1
	X_POSIX_C_SOURCE                      = 200809
	X_POSIX_SOURCE                        = 1
	X_SIZET_                              = 0
	X_SIZE_T                              = 0
	X_SIZE_T_                             = 0
	X_SIZE_T_DECLARED                     = 0
	X_SIZE_T_DEFINED                      = 0
	X_SIZE_T_DEFINED_                     = 0
	X_STDBOOL_H                           = 0
	X_STDC_PREDEF_H                       = 1
	X_STDINT_H                            = 1
	X_STDLIB_H                            = 1
	X_STRUCT_TIMESPEC                     = 1
	X_SYS_CDEFS_H                         = 1
	X_SYS_SELECT_H                        = 1
	X_SYS_SIZE_T_H                        = 0
	X_SYS_SYSMACROS_H                     = 1
	X_SYS_TYPES_H                         = 1
	X_THREAD_SHARED_TYPES_H               = 1
	X_T_SIZE                              = 0
	X_T_SIZE_                             = 0
	X_T_WCHAR                             = 0
	X_T_WCHAR_                            = 0
	X_WCHAR_T                             = 0
	X_WCHAR_T_                            = 0
	X_WCHAR_T_DECLARED                    = 0
	X_WCHAR_T_DEFINED                     = 0
	X_WCHAR_T_DEFINED_                    = 0
	X_WCHAR_T_H                           = 0
	False                                 = 0
	Linux                                 = 1
	True                                  = 1
	Ts_builtin_sym_end                    = 0
	Unix                                  = 1
)

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//     are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// XPG requires a few symbols from <sys/wait.h> being defined.
// Definitions of flag bits for `waitpid' et al.
//    Copyright (C) 1992-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Bits in the third argument to `waitpid'.

// Bits in the fourth argument to `waitid'.

// The following values are used by the `waitid' function.

// The Linux kernel defines these bare, rather than an enum,
//    which causes a conflict if the include order is reversed.

const ( /* waitflags.h:52:1: */
	P_ALL  = 0 // Wait for any child.
	P_PID  = 1 // Wait for specified process.
	P_PGID = 2
)

const ( /* parser.c:199:1: */
	Field_key   = 1
	Field_value = 2
)

//  Lexer Macros

//  Parse Table Macros

const ( /* parser.c:19:1: */
	Anon_sym_LBRACE                = 1
	Anon_sym_COMMA                 = 2
	Anon_sym_RBRACE                = 3
	Anon_sym_COLON                 = 4
	Anon_sym_LBRACK                = 5
	Anon_sym_RBRACK                = 6
	Anon_sym_DQUOTE                = 7
	Aux_sym_string_content_token1  = 8
	Sym_escape_sequence            = 9
	Sym_number                     = 10
	Sym_true                       = 11
	Sym_false                      = 12
	Sym_null                       = 13
	Sym_document                   = 14
	Sym__value                     = 15
	Sym_object                     = 16
	Sym_pair                       = 17
	Sym_array                      = 18
	Sym_string                     = 19
	Sym_string_content             = 20
	Aux_sym_object_repeat1         = 21
	Aux_sym_array_repeat1          = 22
	Aux_sym_string_content_repeat1 = 23
)

const ( /* parser.h:53:1: */
	TSParseActionTypeShift   = 0
	TSParseActionTypeReduce  = 1
	TSParseActionTypeAccept  = 2
	TSParseActionTypeRecover = 3
)

type Ptrdiff_t = int64 /* <builtin>:3:26 */

type Size_t = uint64 /* <builtin>:9:23 */

type Wchar_t = int32 /* <builtin>:15:24 */

type X__int128_t = struct {
	Lo int64
	Hi int64
} /* <builtin>:21:43 */ // must match modernc.org/mathutil.Int128
type X__uint128_t = struct {
	Lo uint64
	Hi uint64
} /* <builtin>:22:44 */ // must match modernc.org/mathutil.Int128

type X__builtin_va_list = uintptr /* <builtin>:46:14 */
type X__float128 = float64        /* <builtin>:47:21 */

// Copyright (C) 1998-2017 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.16  Boolean type and values  <stdbool.h>

// Signal that all the definitions are present.

// Copyright (C) 1997-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

//	ISO C99: 7.18 Integer types <stdint.h>

// Handle feature test macros at the start of a header.
//    Copyright (C) 2016-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// This header is internal to glibc and should not be included outside
//    of glibc headers.  Headers including it must define
//    __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION first.  This header
//    cannot have multiple include guards because ISO C feature test
//    macros depend on the definition of the macro when an affected
//    header is included, not when the first system header is
//    included.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// These are defined by the user (or the compiler)
//    to specify the desired environment:
//
//    __STRICT_ANSI__	ISO Standard C.
//    _ISOC99_SOURCE	Extensions to ISO C89 from ISO C99.
//    _ISOC11_SOURCE	Extensions to ISO C99 from ISO C11.
//    __STDC_WANT_LIB_EXT2__
// 			Extensions to ISO C99 from TR 27431-2:2010.
//    __STDC_WANT_IEC_60559_BFP_EXT__
// 			Extensions to ISO C11 from TS 18661-1:2014.
//    __STDC_WANT_IEC_60559_FUNCS_EXT__
// 			Extensions to ISO C11 from TS 18661-4:2015.
//    __STDC_WANT_IEC_60559_TYPES_EXT__
// 			Extensions to ISO C11 from TS 18661-3:2015.
//
//    _POSIX_SOURCE	IEEE Std 1003.1.
//    _POSIX_C_SOURCE	If ==1, like _POSIX_SOURCE; if >=2 add IEEE Std 1003.2;
// 			if >=199309L, add IEEE Std 1003.1b-1993;
// 			if >=199506L, add IEEE Std 1003.1c-1995;
// 			if >=200112L, all of IEEE 1003.1-2004
// 			if >=200809L, all of IEEE 1003.1-2008
//    _XOPEN_SOURCE	Includes POSIX and XPG things.  Set to 500 if
// 			Single Unix conformance is wanted, to 600 for the
// 			sixth revision, to 700 for the seventh revision.
//    _XOPEN_SOURCE_EXTENDED XPG things and X/Open Unix extensions.
//    _LARGEFILE_SOURCE	Some more functions for correct standard I/O.
//    _LARGEFILE64_SOURCE	Additional functionality from LFS for large files.
//    _FILE_OFFSET_BITS=N	Select default filesystem interface.
//    _ATFILE_SOURCE	Additional *at interfaces.
//    _GNU_SOURCE		All of the above, plus GNU extensions.
//    _DEFAULT_SOURCE	The default set of features (taking precedence over
// 			__STRICT_ANSI__).
//
//    _FORTIFY_SOURCE	Add security hardening to many library functions.
// 			Set to 1 or 2; 2 performs stricter checks than 1.
//
//    _REENTRANT, _THREAD_SAFE
// 			Obsolete; equivalent to _POSIX_C_SOURCE=199506L.
//
//    The `-ansi' switch to the GNU C compiler, and standards conformance
//    options such as `-std=c99', define __STRICT_ANSI__.  If none of
//    these are defined, or if _DEFAULT_SOURCE is defined, the default is
//    to have _POSIX_SOURCE set to one and _POSIX_C_SOURCE set to
//    200809L, as well as enabling miscellaneous functions from BSD and
//    SVID.  If more than one of these are defined, they accumulate.  For
//    example __STRICT_ANSI__, _POSIX_SOURCE and _POSIX_C_SOURCE together
//    give you ISO C, 1003.1, and 1003.2, but nothing else.
//
//    These are defined by this file and are used by the
//    header files to decide what to declare or define:
//
//    __GLIBC_USE (F)	Define things from feature set F.  This is defined
// 			to 1 or 0; the subsequent macros are either defined
// 			or undefined, and those tests should be moved to
// 			__GLIBC_USE.
//    __USE_ISOC11		Define ISO C11 things.
//    __USE_ISOC99		Define ISO C99 things.
//    __USE_ISOC95		Define ISO C90 AMD1 (C95) things.
//    __USE_ISOCXX11	Define ISO C++11 things.
//    __USE_POSIX		Define IEEE Std 1003.1 things.
//    __USE_POSIX2		Define IEEE Std 1003.2 things.
//    __USE_POSIX199309	Define IEEE Std 1003.1, and .1b things.
//    __USE_POSIX199506	Define IEEE Std 1003.1, .1b, .1c and .1i things.
//    __USE_XOPEN		Define XPG things.
//    __USE_XOPEN_EXTENDED	Define X/Open Unix things.
//    __USE_UNIX98		Define Single Unix V2 things.
//    __USE_XOPEN2K        Define XPG6 things.
//    __USE_XOPEN2KXSI     Define XPG6 XSI things.
//    __USE_XOPEN2K8       Define XPG7 things.
//    __USE_XOPEN2K8XSI    Define XPG7 XSI things.
//    __USE_LARGEFILE	Define correct standard I/O things.
//    __USE_LARGEFILE64	Define LFS things with separate names.
//    __USE_FILE_OFFSET64	Define 64bit interface as default.
//    __USE_MISC		Define things from 4.3BSD or System V Unix.
//    __USE_ATFILE		Define *at interfaces and AT_* constants for them.
//    __USE_GNU		Define GNU extensions.
//    __USE_FORTIFY_LEVEL	Additional security measures used, according to level.
//
//    The macros `__GNU_LIBRARY__', `__GLIBC__', and `__GLIBC_MINOR__' are
//    defined by this file unconditionally.  `__GNU_LIBRARY__' is provided
//    only for compatibility.  All new code should use the other symbols
//    to test for features.
//
//    All macros listed above as possibly being defined by this file are
//    explicitly undefined if they are not explicitly defined.
//    Feature-test macros that are not defined by the user or compiler
//    but are implied by the other feature-test macros defined (or by the
//    lack of any definitions) are defined by the file.
//
//    ISO C feature test macros depend on the definition of the macro
//    when an affected header is included, not when the first system
//    header is included, and so they are handled in
//    <bits/libc-header-start.h>, which does not have a multiple include
//    guard.  Feature test macros that can be handled from the first
//    system header included are handled here.

// Undefine everything, so we get a clean slate.

// Suppress kernel-name space pollution unless user expressedly asks
//    for it.

// Convenience macro to test the version of gcc.
//    Use like this:
//    #if __GNUC_PREREQ (2,8)
//    ... code requiring gcc 2.8 or later ...
//    #endif
//    Note: only works for GCC 2.0 and later, because __GNUC_MINOR__ was
//    added in 2.0.

// Similarly for clang.  Features added to GCC after version 4.2 may
//    or may not also be available in clang, and clang's definitions of
//    __GNUC(_MINOR)__ are fixed at 4 and 2 respectively.  Not all such
//    features can be queried via __has_extension/__has_feature.

// Whether to use feature set F.

// _BSD_SOURCE and _SVID_SOURCE are deprecated aliases for
//    _DEFAULT_SOURCE.  If _DEFAULT_SOURCE is present we do not
//    issue a warning; the expectation is that the source is being
//    transitioned to use the new macro.

// If _GNU_SOURCE was defined by the user, turn on all the other features.

// If nothing (other than _GNU_SOURCE and _DEFAULT_SOURCE) is defined,
//    define _DEFAULT_SOURCE.

// This is to enable the ISO C11 extension.

// This is to enable the ISO C99 extension.

// This is to enable the ISO C90 Amendment 1:1995 extension.

// If none of the ANSI/POSIX macros are defined, or if _DEFAULT_SOURCE
//    is defined, use POSIX.1-2008 (or another version depending on
//    _XOPEN_SOURCE).

// Some C libraries once required _REENTRANT and/or _THREAD_SAFE to be
//    defined in all multithreaded code.  GNU libc has not required this
//    for many years.  We now treat them as compatibility synonyms for
//    _POSIX_C_SOURCE=199506L, which is the earliest level of POSIX with
//    comprehensive support for multithreaded code.  Using them never
//    lowers the selected level of POSIX conformance, only raises it.

// The function 'gets' existed in C89, but is impossible to use
//    safely.  It has been removed from ISO C11 and ISO C++14.  Note: for
//    compatibility with various implementations of <cstdio>, this test
//    must consider only the value of __cplusplus when compiling C++.

// Get definitions of __STDC_* predefined macros, if the compiler has
//    not preincluded this header automatically.
// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// This macro indicates that the installed library is the GNU C Library.
//    For historic reasons the value now is 6 and this will stay from now
//    on.  The use of this variable is deprecated.  Use __GLIBC__ and
//    __GLIBC_MINOR__ now (see below) when you want to test for a specific
//    GNU C library version and use the values in <gnu/lib-names.h> to get
//    the sonames of the shared libraries.

// Major and minor version number of the GNU C library package.  Use
//    these macros to test for features in specific releases.

// This is here only because every header file already includes this one.
// Copyright (C) 1992-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// We are almost always included from features.h.

// The GNU libc does not support any K&R compilers or the traditional mode
//    of ISO C compilers anymore.  Check for some of the combinations not
//    anymore supported.

// Some user header file might have defined this before.

// All functions, except those with callbacks or those that
//    synchronize memory, are leaf functions.

// GCC can always grok prototypes.  For C++ programs we add throw()
//    to help it optimize the function calls.  But this works only with
//    gcc 2.8.x and egcs.  For gcc 3.2 and up we even mark C functions
//    as non-throwing using a function attribute since programs can use
//    the -fexceptions options for C code as well.

// Compilers that are not clang may object to
//        #if defined __clang__ && __has_extension(...)
//    even though they do not need to evaluate the right-hand side of the &&.

// These two macros are not used in glibc anymore.  They are kept here
//    only because some other projects expect the macros to be defined.

// For these things, GCC behaves the ANSI way normally,
//    and the non-ANSI way under -traditional.

// This is not a typedef so `const __ptr_t' does the right thing.

// C++ needs to know that types and declarations are C, not C++.

// Fortify support.

// Support for flexible arrays.
//    Headers that should use flexible arrays only if they're "real"
//    (e.g. only if they won't affect sizeof()) should test
//    #if __glibc_c99_flexarr_available.

// __asm__ ("xyz") is used throughout the headers to rename functions
//    at the assembly language level.  This is wrapped by the __REDIRECT
//    macro, in order to support compilers that can do this some other
//    way.  When compilers don't support asm-names at all, we have to do
//    preprocessor tricks instead (which don't have exactly the right
//    semantics, but it's the best we can do).
//
//    Example:
//    int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid);

//
// #elif __SOME_OTHER_COMPILER__
//
// # define __REDIRECT(name, proto, alias) name proto; 	_Pragma("let " #name " = " #alias)

// GCC has various useful declarations that can be made with the
//    `__attribute__' syntax.  All of the ways we use this do fine if
//    they are omitted for compilers that don't understand it.

// At some point during the gcc 2.96 development the `malloc' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.

// Tell the compiler which arguments to an allocation function
//    indicate the size of the allocation.

// At some point during the gcc 2.96 development the `pure' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.

// This declaration tells the compiler that the value is constant.

// At some point during the gcc 3.1 development the `used' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.

// Since version 3.2, gcc allows marking deprecated functions.

// Since version 4.5, gcc also allows one to specify the message printed
//    when a deprecated function is used.  clang claims to be gcc 4.2, but
//    may also support this feature.

// At some point during the gcc 2.8 development the `format_arg' attribute
//    for functions was introduced.  We don't want to use it unconditionally
//    (although this would be possible) since it generates warnings.
//    If several `format_arg' attributes are given for the same function, in
//    gcc-3.0 and older, all but the last one are ignored.  In newer gccs,
//    all designated arguments are considered.

// At some point during the gcc 2.97 development the `strfmon' format
//    attribute for functions was introduced.  We don't want to use it
//    unconditionally (although this would be possible) since it
//    generates warnings.

// The nonull function attribute allows to mark pointer parameters which
//    must not be NULL.

// If fortification mode, we warn about unused results of certain
//    function calls which can lead to problems.

// Forces a function to be always inlined.
// The Linux kernel defines __always_inline in stddef.h (283d7573), and
//    it conflicts with this definition.  Therefore undefine it first to
//    allow either header to be included first.

// Associate error messages with the source location of the call site rather
//    than with the source location inside the function.

// GCC 4.3 and above with -std=c99 or -std=gnu99 implements ISO C99
//    inline semantics, unless -fgnu89-inline is used.  Using __GNUC_STDC_INLINE__
//    or __GNUC_GNU_INLINE is not a good enough check for gcc because gcc versions
//    older than 4.3 may define these macros and still not guarantee GNU inlining
//    semantics.
//
//    clang++ identifies itself as gcc-4.2, but has support for GNU inlining
//    semantics, that can be checked fot by using the __GNUC_STDC_INLINE_ and
//    __GNUC_GNU_INLINE__ macro definitions.

// GCC 4.3 and above allow passing all anonymous arguments of an
//    __extern_always_inline function to some other vararg function.

// It is possible to compile containing GCC extensions even if GCC is
//    run in pedantic mode if the uses are carefully marked using the
//    `__extension__' keyword.  But this is not generally available before
//    version 2.8.

// __restrict is known in EGCS 1.2 and above.

// ISO C99 also allows to declare arrays as non-overlapping.  The syntax is
//      array_name[restrict]
//    GCC 3.1 supports this.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.
// Properties of long double type.  ldbl-96 version.
//    Copyright (C) 2016-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License  published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// long double is distinct from double, so there is nothing to
//    define here.

// __glibc_macro_warning (MESSAGE) issues warning MESSAGE.  This is
//    intended for use in preprocessor macros.
//
//    Note: MESSAGE must be a _single_ string; concatenation of string
//    literals is not supported.

// Generic selection (ISO C11) is a C-only feature, available in GCC
//    since version 4.9.  Previous versions do not provide generic
//    selection, even though they might set __STDC_VERSION__ to 201112L,
//    when in -std=c11 mode.  Thus, we must check for !defined __GNUC__
//    when testing __STDC_VERSION__ for generic selection support.
//    On the other hand, Clang also defines __GNUC__, so a clang-specific
//    check is required to enable the use of generic selection.

// If we don't have __REDIRECT, prototypes will be missing if
//    __USE_FILE_OFFSET64 but not __USE_LARGEFILE[64].

// Decide whether we can define 'extern inline' functions in headers.

// This is here only because every header file already includes this one.
//    Get the definitions of all the appropriate `__stub_FUNCTION' symbols.
//    <gnu/stubs.h> contains `#define __stub_FUNCTION' when FUNCTION is a stub
//    that will always return failure (and set errno to ENOSYS).
// This file is automatically generated.
//    This file selects the right generated file of `__stub_FUNCTION' macros
//    based on the architecture being compiled for.

// This file is automatically generated.
//    It defines a symbol `__stub_FUNCTION' for each function
//    in the C library which is a stub, meaning it will fail
//    every time called, usually setting errno to ENOSYS.

// ISO/IEC TR 24731-2:2010 defines the __STDC_WANT_LIB_EXT2__
//    macro.

// ISO/IEC TS 18661-1:2014 defines the __STDC_WANT_IEC_60559_BFP_EXT__
//    macro.

// ISO/IEC TS 18661-4:2015 defines the
//    __STDC_WANT_IEC_60559_FUNCS_EXT__ macro.

// ISO/IEC TS 18661-3:2015 defines the
//    __STDC_WANT_IEC_60559_TYPES_EXT__ macro.
// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Convenience types.
type X__u_char = uint8   /* types.h:30:23 */
type X__u_short = uint16 /* types.h:31:28 */
type X__u_int = uint32   /* types.h:32:22 */
type X__u_long = uint64  /* types.h:33:27 */

// Fixed-size types, underlying types depend on word size and compiler.
type X__int8_t = int8     /* types.h:36:21 */
type X__uint8_t = uint8   /* types.h:37:23 */
type X__int16_t = int16   /* types.h:38:26 */
type X__uint16_t = uint16 /* types.h:39:28 */
type X__int32_t = int32   /* types.h:40:20 */
type X__uint32_t = uint32 /* types.h:41:22 */
type X__int64_t = int64   /* types.h:43:25 */
type X__uint64_t = uint64 /* types.h:44:27 */

// quad_t is also 64 bits.
type X__quad_t = int64    /* types.h:52:18 */
type X__u_quad_t = uint64 /* types.h:53:27 */

// Largest integral types.
type X__intmax_t = int64   /* types.h:61:18 */
type X__uintmax_t = uint64 /* types.h:62:27 */

// The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
//    macros for each of the OS types we define below.  The definitions
//    of those macros must use the following macros for underlying types.
//    We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsigned
//    variants of each of the following integer types on this machine.
//
// 	16		-- "natural" 16-bit type (always short)
// 	32		-- "natural" 32-bit type (always int)
// 	64		-- "natural" 64-bit type (long or long long)
// 	LONG32		-- 32-bit type, traditionally long
// 	QUAD		-- 64-bit type, always long long
// 	WORD		-- natural type of __WORDSIZE bits (int or long)
// 	LONGWORD	-- type of __WORDSIZE bits, traditionally long
//
//    We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
//    conventional uses of `long' or `long long' type modifiers match the
//    types we define, even when a less-adorned type would be the same size.
//    This matters for (somewhat) portably writing printf/scanf formats for
//    these types, where using the appropriate l or ll format modifiers can
//    make the typedefs and the formats match up across all GNU platforms.  If
//    we used `long' when it's 64 bits where `long long' is expected, then the
//    compiler would warn about the formats not matching the argument types,
//    and the programmer changing them to shut up the compiler would break the
//    program's portability.
//
//    Here we assume what is presently the case in all the GCC configurations
//    we support: long long is always 64 bits, long is always word/address size,
//    and int is always 32 bits.

// No need to mark the typedef with __extension__.
// bits/typesizes.h -- underlying types for *_t.  Linux/x86-64 version.
//    Copyright (C) 2012-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// See <bits/types.h> for the meaning of these macros.  This file exists so
//    that <bits/types.h> need not vary across different GNU platforms.

// X32 kernel interface is 64-bit.

// Tell the libc code that off_t and off64_t are actually the same type
//    for all ABI purposes, even if possibly expressed as different base types
//    for C type-checking purposes.

// Same for ino_t and ino64_t.

// And for __rlim_t and __rlim64_t.

// Number of descriptors that can fit in an `fd_set'.

type X__dev_t = uint64                     /* types.h:133:25 */ // Type of device numbers.
type X__uid_t = uint32                     /* types.h:134:25 */ // Type of user identifications.
type X__gid_t = uint32                     /* types.h:135:25 */ // Type of group identifications.
type X__ino_t = uint64                     /* types.h:136:25 */ // Type of file serial numbers.
type X__ino64_t = uint64                   /* types.h:137:27 */ // Type of file serial numbers (LFS).
type X__mode_t = uint32                    /* types.h:138:26 */ // Type of file attribute bitmasks.
type X__nlink_t = uint64                   /* types.h:139:27 */ // Type of file link counts.
type X__off_t = int64                      /* types.h:140:25 */ // Type of file sizes and offsets.
type X__off64_t = int64                    /* types.h:141:27 */ // Type of file sizes and offsets (LFS).
type X__pid_t = int32                      /* types.h:142:25 */ // Type of process identifications.
type X__fsid_t = struct{ X__val [2]int32 } /* types.h:143:26 */ // Type of file system IDs.
type X__clock_t = int64                    /* types.h:144:27 */ // Type of CPU usage counts.
type X__rlim_t = uint64                    /* types.h:145:26 */ // Type for resource measurement.
type X__rlim64_t = uint64                  /* types.h:146:28 */ // Type for resource measurement (LFS).
type X__id_t = uint32                      /* types.h:147:24 */ // General type for IDs.
type X__time_t = int64                     /* types.h:148:26 */ // Seconds since the Epoch.
type X__useconds_t = uint32                /* types.h:149:30 */ // Count of microseconds.
type X__suseconds_t = int64                /* types.h:150:31 */ // Signed count of microseconds.

type X__daddr_t = int32 /* types.h:152:27 */ // The type of a disk address.
type X__key_t = int32   /* types.h:153:25 */ // Type of an IPC key.

// Clock ID used in clock and timer functions.
type X__clockid_t = int32 /* types.h:156:29 */

// Timer ID returned by `timer_create'.
type X__timer_t = uintptr /* types.h:159:12 */

// Type to represent block size.
type X__blksize_t = int64 /* types.h:162:29 */

// Types from the Large File Support interface.

// Type to count number of disk blocks.
type X__blkcnt_t = int64   /* types.h:167:28 */
type X__blkcnt64_t = int64 /* types.h:168:30 */

// Type to count file system blocks.
type X__fsblkcnt_t = uint64   /* types.h:171:30 */
type X__fsblkcnt64_t = uint64 /* types.h:172:32 */

// Type to count file system nodes.
type X__fsfilcnt_t = uint64   /* types.h:175:30 */
type X__fsfilcnt64_t = uint64 /* types.h:176:32 */

// Type of miscellaneous file system fields.
type X__fsword_t = int64 /* types.h:179:28 */

type X__ssize_t = int64 /* types.h:181:27 */ // Type of a byte count, or error.

// Signed long type used in system calls.
type X__syscall_slong_t = int64 /* types.h:184:33 */
// Unsigned long type used in system calls.
type X__syscall_ulong_t = uint64 /* types.h:186:33 */

// These few don't really vary by system, they always correspond
//    to one of the other defined types.
type X__loff_t = X__off64_t /* types.h:190:19 */ // Type of file sizes and offsets (LFS).
type X__caddr_t = uintptr   /* types.h:191:14 */

// Duplicates info from stdint.h but this is used in unistd.h.
type X__intptr_t = int64 /* types.h:194:25 */

// Duplicate info from sys/socket.h.
type X__socklen_t = uint32 /* types.h:197:23 */

// C99: An integer type that can be accessed as an atomic entity,
//    even in the presence of asynchronous interrupts.
//    It is not currently necessary for this to be machine-specific.
type X__sig_atomic_t = int32 /* types.h:202:13 */

// wchar_t type related definitions.
//    Copyright (C) 2000-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// The fallback definitions, for when __WCHAR_MAX__ or __WCHAR_MIN__
//    are not defined, give the right value and type as long as both int
//    and wchar_t are 32-bit types.  Adding L'\0' to a constant value
//    ensures that the type is correct; it is necessary to use (L'\0' +
//    0) rather than just L'\0' so that the type in C++ is the promoted
//    version of wchar_t rather than the distinct wchar_t type itself.
//    Because wchar_t in preprocessor #if expressions is treated as
//    intmax_t or uintmax_t, the expression (L'\0' - 1) would have the
//    wrong value for WCHAR_MAX in such expressions and so cannot be used
//    to define __WCHAR_MAX in the unsigned case.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Exact integral types.

// Signed.
// Define intN_t types.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

type Int8_t = X__int8_t   /* stdint-intn.h:24:18 */
type Int16_t = X__int16_t /* stdint-intn.h:25:19 */
type Int32_t = X__int32_t /* stdint-intn.h:26:19 */
type Int64_t = X__int64_t /* stdint-intn.h:27:19 */

// Unsigned.
// Define uintN_t types.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

type Uint8_t = X__uint8_t   /* stdint-uintn.h:24:19 */
type Uint16_t = X__uint16_t /* stdint-uintn.h:25:20 */
type Uint32_t = X__uint32_t /* stdint-uintn.h:26:20 */
type Uint64_t = X__uint64_t /* stdint-uintn.h:27:20 */

// Small types.

// Signed.
type Int_least8_t = int8   /* stdint.h:43:22 */
type Int_least16_t = int16 /* stdint.h:44:20 */
type Int_least32_t = int32 /* stdint.h:45:15 */
type Int_least64_t = int64 /* stdint.h:47:19 */

// Unsigned.
type Uint_least8_t = uint8   /* stdint.h:54:24 */
type Uint_least16_t = uint16 /* stdint.h:55:28 */
type Uint_least32_t = uint32 /* stdint.h:56:23 */
type Uint_least64_t = uint64 /* stdint.h:58:27 */

// Fast types.

// Signed.
type Int_fast8_t = int8   /* stdint.h:68:22 */
type Int_fast16_t = int64 /* stdint.h:70:19 */
type Int_fast32_t = int64 /* stdint.h:71:19 */
type Int_fast64_t = int64 /* stdint.h:72:19 */

// Unsigned.
type Uint_fast8_t = uint8   /* stdint.h:81:24 */
type Uint_fast16_t = uint64 /* stdint.h:83:27 */
type Uint_fast32_t = uint64 /* stdint.h:84:27 */
type Uint_fast64_t = uint64 /* stdint.h:85:27 */

// Types for `void *' pointers.
type Intptr_t = int64   /* stdint.h:97:19 */
type Uintptr_t = uint64 /* stdint.h:100:27 */

// Largest integral types.
type Intmax_t = X__intmax_t   /* stdint.h:111:21 */
type Uintmax_t = X__uintmax_t /* stdint.h:112:22 */

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//     are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// XPG requires a few symbols from <sys/wait.h> being defined.
// Definitions of flag bits for `waitpid' et al.
//    Copyright (C) 1992-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Bits in the third argument to `waitpid'.

// Bits in the fourth argument to `waitid'.

// The following values are used by the `waitid' function.

// The Linux kernel defines these bare, rather than an enum,
//    which causes a conflict if the include order is reversed.

type Idtype_t = uint32 /* waitflags.h:57:3 */
// Definitions of status bits for `wait' et al.
//    Copyright (C) 1992-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Everything extant so far uses these same bits.

// If WIFEXITED(STATUS), the low-order 8 bits of the status.

// If WIFSIGNALED(STATUS), the terminating signal.

// If WIFSTOPPED(STATUS), the signal that stopped the child.

// Nonzero if STATUS indicates normal termination.

// Nonzero if STATUS indicates termination by a signal.

// Nonzero if STATUS indicates the child is stopped.

// Nonzero if STATUS indicates the child continued after a stop.  We only
//    define this if <bits/waitflags.h> provides the WCONTINUED flag bit.

// Nonzero if STATUS indicates the child dumped core.

// Macros for constructing status values.

// Define the macros <sys/wait.h> also would define this way.

// _FloatN API tests for enablement.
// Macros to control TS 18661-3 glibc features on x86.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Defined to 1 if the current compiler invocation provides a
//    floating-point type with the IEEE 754 binary128 format, and this
//    glibc includes corresponding *f128 interfaces for it.  The required
//    libgcc support was added some time after the basic compiler
//    support, for x86_64 and x86.

// Defined to 1 if __HAVE_FLOAT128 is 1 and the type is ABI-distinct
//    from the default float, double and long double types in this glibc.

// Defined to 1 if the current compiler invocation provides a
//    floating-point type with the right format for _Float64x, and this
//    glibc includes corresponding *f64x interfaces for it.

// Defined to 1 if __HAVE_FLOAT64X is 1 and _Float64x has the format
//    of long double.  Otherwise, if __HAVE_FLOAT64X is 1, _Float64x has
//    the format of _Float128, which must be different from that of long
//    double.

// Defined to concatenate the literal suffix to be used with _Float128
//    types, if __HAVE_FLOAT128 is 1.

// Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.

// The remaining of this file provides support for older compilers.

// The type _Float128 exists only since GCC 7.0.

// __builtin_huge_valf128 doesn't exist before GCC 7.0.

// Older GCC has only a subset of built-in functions for _Float128 on
//    x86, and __builtin_infq is not usable in static initializers.
//    Converting a narrower sNaN to _Float128 produces a quiet NaN, so
//    attempts to use _Float128 sNaNs will not work properly with older
//    compilers.

// In math/math.h, __MATH_TG will expand signbit to __builtin_signbit*,
//    e.g.: __builtin_signbitf128, before GCC 6.  However, there has never
//    been a __builtin_signbitf128 in GCC and the type-generic builtin is
//    only available since GCC 6.

// Macros to control TS 18661-3 glibc features where the same
//    definitions are appropriate for all platforms.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Properties of long double type.  ldbl-96 version.
//    Copyright (C) 2016-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License  published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// long double is distinct from double, so there is nothing to
//    define here.

// This header should be included at the bottom of each bits/floatn.h.
//    It defines the following macros for each _FloatN and _FloatNx type,
//    where the same definitions, or definitions based only on the macros
//    in bits/floatn.h, are appropriate for all glibc configurations.

// Defined to 1 if the current compiler invocation provides a
//    floating-point type with the right format for this type, and this
//    glibc includes corresponding *fN or *fNx interfaces for it.

// Defined to 1 if the corresponding __HAVE_<type> macro is 1 and the
//    type is the first with its format in the sequence of (the default
//    choices for) float, double, long double, _Float16, _Float32,
//    _Float64, _Float128, _Float32x, _Float64x, _Float128x for this
//    glibc; that is, if functions present once per floating-point format
//    rather than once per type are present for this type.
//
//    All configurations supported by glibc have _Float32 the same format
//    as float, _Float64 and _Float32x the same format as double, the
//    _Float64x the same format as either long double or _Float128.  No
//    configurations support _Float128x or, as of GCC 7, have compiler
//    support for a type meeting the requirements for _Float128x.

// Defined to 1 if any _FloatN or _FloatNx types that are not
//    ABI-distinct are however distinct types at the C language level (so
//    for the purposes of __builtin_types_compatible_p and _Generic).

// Defined to concatenate the literal suffix to be used with _FloatN
//    or _FloatNx types, if __HAVE_<type> is 1.  The corresponding
//    literal suffixes exist since GCC 7, for C only.

// Defined to a complex type if __HAVE_<type> is 1.

// The remaining of this file provides support for older compilers.

// If double, long double and _Float64 all have the same set of
//    values, TS 18661-3 requires the usual arithmetic conversions on
//    long double and _Float64 to produce _Float64.  For this to be the
//    case when building with a compiler without a distinct _Float64
//    type, _Float64 must be a typedef for long double, not for
//    double.

// Returned by `div'.
type Div_t = struct {
	Quot int32
	Rem  int32
} /* stdlib.h:62:5 */

// Returned by `ldiv'.
type Ldiv_t = struct {
	Quot int64
	Rem  int64
} /* stdlib.h:70:5 */

// Returned by `lldiv'.
type Lldiv_t = struct {
	Quot int64
	Rem  int64
} /* stdlib.h:80:5 */

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

//	POSIX Standard: 2.6 Primitive System Data Types	<sys/types.h>

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

type U_char = X__u_char     /* types.h:33:18 */
type U_short = X__u_short   /* types.h:34:19 */
type U_int = X__u_int       /* types.h:35:17 */
type U_long = X__u_long     /* types.h:36:18 */
type Quad_t = X__quad_t     /* types.h:37:18 */
type U_quad_t = X__u_quad_t /* types.h:38:20 */
type Fsid_t = X__fsid_t     /* types.h:39:18 */

type Loff_t = X__loff_t /* types.h:44:18 */

type Ino_t = X__ino64_t /* types.h:50:19 */

type Dev_t = X__dev_t /* types.h:60:17 */

type Gid_t = X__gid_t /* types.h:65:17 */

type Mode_t = X__mode_t /* types.h:70:18 */

type Nlink_t = X__nlink_t /* types.h:75:19 */

type Uid_t = X__uid_t /* types.h:80:17 */

type Off_t = X__off64_t /* types.h:88:19 */

type Pid_t = X__pid_t /* types.h:98:17 */

type Id_t = X__id_t /* types.h:104:16 */

type Ssize_t = X__ssize_t /* types.h:109:19 */

type Daddr_t = X__daddr_t /* types.h:115:19 */
type Caddr_t = X__caddr_t /* types.h:116:19 */

type Key_t = X__key_t /* types.h:122:17 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Returned by `clock'.
type Clock_t = X__clock_t /* clock_t.h:7:19 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Clock ID used in clock and timer functions.
type Clockid_t = X__clockid_t /* clockid_t.h:7:21 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Returned by `time'.
type Time_t = X__time_t /* time_t.h:7:18 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Timer ID returned by `timer_create'.
type Timer_t = X__timer_t /* timer_t.h:7:19 */

// Copyright (C) 1989-2017 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//    wants us just to define one data type.  So don't define
//    the symbols that indicate this file's entire job has been done.

// This avoids lossage on SunOS but only if stdtypes.h comes first.
//    There's no way to win with the other order!  Sun lossage.

// On 4.3bsd-net2, make sure ansi.h is included, so we have
//    one less case to deal with in the following.
// On FreeBSD 5, machine/ansi.h does not exist anymore...

// In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
//    defined if the corresponding type is *not* defined.
//    FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
//    NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//    Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//    _TYPE_size_t which will typedef size_t.  fixincludes patched the
//    vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//    not defined, and so that defining this macro defines _GCC_SIZE_T.
//    If we find that the macros are still defined at this point, we must
//    invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//    GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//    __WCHAR_TYPE__ have reasonable values.  This can happen if the
//    parts of GCC is compiled by an older compiler, that actually
//    include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Wide character type.
//    Locale-writers should change this as necessary to
//    be big enough to hold unique values not between 0 and 127,
//    and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//     are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// Old compatibility names for C types.
type Ulong = uint64  /* types.h:149:27 */
type Ushort = uint16 /* types.h:150:28 */
type Uint = uint32   /* types.h:151:22 */

// These size-specific names are used by some of the inet code.

// Define intN_t types.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// For GCC 2.7 and later, we can use specific type-size attributes.

type U_int8_t = uint32  /* types.h:178:1 */
type U_int16_t = uint32 /* types.h:179:1 */
type U_int32_t = uint32 /* types.h:180:1 */
type U_int64_t = uint32 /* types.h:181:1 */

type Register_t = int32 /* types.h:183:13 */

// It also defines `fd_set' and the FD_* macros for `select'.
// `fd_set' type and related macros, and `select'/`pselect' declarations.
//    Copyright (C) 1996-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

//	POSIX 1003.1g: 6.2 Select from File Descriptor Sets <sys/select.h>

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Get definition of needed basic types.
// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Get __FD_* definitions.
// Copyright (C) 1997-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Get sigset_t.

type X__sigset_t = struct{ X__val [16]uint64 } /* __sigset_t.h:8:3 */

// A set of signals to be blocked, unblocked, or waited for.
type Sigset_t = X__sigset_t /* sigset_t.h:7:20 */

// Get definition of timer specification structures.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// A time value that is accurate to the nearest
//    microsecond but also has a range of years.
type Stimeval = struct {
	Tv_sec  X__time_t
	Tv_usec X__suseconds_t
} /* struct_timeval.h:8:1 */

// NB: Include guard matches what <linux/time.h> uses.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// POSIX.1b structure for a time value.  This is like a `struct timeval' but
//    has nanoseconds instead of microseconds.
type Stimespec = struct {
	Tv_sec  X__time_t
	Tv_nsec X__syscall_slong_t
} /* struct_timespec.h:9:1 */

type Suseconds_t = X__suseconds_t /* select.h:43:23 */

// The fd_set member is required to be an array of longs.
type X__fd_mask = int64 /* select.h:49:18 */

// Some versions of <linux/posix_types.h> define this macros.
// It's easier to assume 8-bit bytes than to get CHAR_BIT.

// fd_set for select and pselect.
type Fd_set = struct{ X__fds_bits [16]X__fd_mask } /* select.h:70:5 */

// Maximum number of file descriptors in `fd_set'.

// Sometimes the fd_set member is assumed to have this type.
type Fd_mask = X__fd_mask /* select.h:77:19 */

type Blksize_t = X__blksize_t /* types.h:212:21 */

// Types from the Large File Support interface.
type Blkcnt_t = X__blkcnt64_t     /* types.h:232:22 */ // Type to count number of disk blocks.
type Fsblkcnt_t = X__fsblkcnt64_t /* types.h:236:24 */ // Type to count file system blocks.
type Fsfilcnt_t = X__fsfilcnt64_t /* types.h:240:24 */ // Type to count file system inodes.

// Now add the thread types.
// Declaration of common pthread types for all architectures.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// For internal mutex and condition variable definitions.
// Common threading primitives definitions for both POSIX and C11.
//    Copyright (C) 2017-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Arch-specific definitions.  Each architecture must define the following
//    macros to define the expected sizes of pthread data types:
//
//    __SIZEOF_PTHREAD_ATTR_T        - size of pthread_attr_t.
//    __SIZEOF_PTHREAD_MUTEX_T       - size of pthread_mutex_t.
//    __SIZEOF_PTHREAD_MUTEXATTR_T   - size of pthread_mutexattr_t.
//    __SIZEOF_PTHREAD_COND_T        - size of pthread_cond_t.
//    __SIZEOF_PTHREAD_CONDATTR_T    - size of pthread_condattr_t.
//    __SIZEOF_PTHREAD_RWLOCK_T      - size of pthread_rwlock_t.
//    __SIZEOF_PTHREAD_RWLOCKATTR_T  - size of pthread_rwlockattr_t.
//    __SIZEOF_PTHREAD_BARRIER_T     - size of pthread_barrier_t.
//    __SIZEOF_PTHREAD_BARRIERATTR_T - size of pthread_barrierattr_t.
//
//    Also, the following macros must be define for internal pthread_mutex_t
//    struct definitions (struct __pthread_mutex_s):
//
//    __PTHREAD_COMPAT_PADDING_MID   - any additional members after 'kind'
// 				    and before '__spin' (for 64 bits) or
// 				    '__nusers' (for 32 bits).
//    __PTHREAD_COMPAT_PADDING_END   - any additional members at the end of
// 				    the internal structure.
//    __PTHREAD_MUTEX_LOCK_ELISION   - 1 if the architecture supports lock
// 				    elision or 0 otherwise.
//    __PTHREAD_MUTEX_NUSERS_AFTER_KIND - control where to put __nusers.  The
// 				       preferred value for new architectures
// 				       is 0.
//    __PTHREAD_MUTEX_USE_UNION      - control whether internal __spins and
// 				    __list will be place inside a union for
// 				    linuxthreads compatibility.
// 				    The preferred value for new architectures
// 				    is 0.
//
//    For a new port the preferred values for the required defines are:
//
//    #define __PTHREAD_COMPAT_PADDING_MID
//    #define __PTHREAD_COMPAT_PADDING_END
//    #define __PTHREAD_MUTEX_LOCK_ELISION         0
//    #define __PTHREAD_MUTEX_NUSERS_AFTER_KIND    0
//    #define __PTHREAD_MUTEX_USE_UNION            0
//
//    __PTHREAD_MUTEX_LOCK_ELISION can be set to 1 if the hardware plans to
//    eventually support lock elision using transactional memory.
//
//    The additional macro defines any constraint for the lock alignment
//    inside the thread structures:
//
//    __LOCK_ALIGNMENT - for internal lock/futex usage.
//
//    Same idea but for the once locking primitive:
//
//    __ONCE_ALIGNMENT - for pthread_once_t/once_flag definition.
//
//    And finally the internal pthread_rwlock_t (struct __pthread_rwlock_arch_t)
//    must be defined.
//
// Copyright (C) 2002-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Definitions for internal mutex struct.

type S__pthread_rwlock_arch_t = struct {
	X__readers       uint32
	X__writers       uint32
	X__wrphase_futex uint32
	X__writers_futex uint32
	X__pad3          uint32
	X__pad4          uint32
	X__cur_writer    int32
	X__shared        int32
	X__rwelision     int8
	X__pad1          [7]uint8
	X__pad2          uint64
	X__flags         uint32
	__ccgo_pad1      [4]byte
} /* pthreadtypes-arch.h:65:1 */

// Common definition of pthread_mutex_t.

type S__pthread_internal_list = struct {
	X__prev uintptr
	X__next uintptr
} /* thread-shared-types.h:82:9 */

// Common definition of pthread_mutex_t.

type X__pthread_list_t = S__pthread_internal_list /* thread-shared-types.h:86:3 */

// Lock elision support.

type S__pthread_mutex_s = struct {
	X__lock    int32
	X__count   uint32
	X__owner   int32
	X__nusers  uint32
	X__kind    int32
	X__spins   int16
	X__elision int16
	X__list    X__pthread_list_t
} /* thread-shared-types.h:118:1 */

// Common definition of pthread_cond_t.

type S__pthread_cond_s = struct {
	X__0            struct{ X__wseq uint64 }
	X__8            struct{ X__g1_start uint64 }
	X__g_refs       [2]uint32
	X__g_size       [2]uint32
	X__g1_orig_size uint32
	X__wrefs        uint32
	X__g_signals    [2]uint32
} /* thread-shared-types.h:171:1 */

// Thread identifiers.  The structure of the attribute type is not
//    exposed on purpose.
type Pthread_t = uint64 /* pthreadtypes.h:27:27 */

// Data structures for mutex handling.  The structure of the attribute
//    type is not exposed on purpose.
type Pthread_mutexattr_t = struct {
	_       [0]uint32
	X__size [4]int8
} /* pthreadtypes.h:36:3 */

// Data structure for condition variable handling.  The structure of
//    the attribute type is not exposed on purpose.
type Pthread_condattr_t = struct {
	_       [0]uint32
	X__size [4]int8
} /* pthreadtypes.h:45:3 */

// Keys for thread-specific data
type Pthread_key_t = uint32 /* pthreadtypes.h:49:22 */

// Once-only execution
type Pthread_once_t = int32 /* pthreadtypes.h:53:30 */

type Spthread_attr_t = struct {
	_       [0]uint64
	X__size [56]int8
} /* pthreadtypes.h:56:1 */

type Pthread_attr_t = Spthread_attr_t /* pthreadtypes.h:62:30 */

type Pthread_mutex_t = struct{ X__data S__pthread_mutex_s } /* pthreadtypes.h:72:3 */

type Pthread_cond_t = struct{ X__data S__pthread_cond_s } /* pthreadtypes.h:80:3 */

// Data structure for reader-writer lock variable handling.  The
//    structure of the attribute type is deliberately not exposed.
type Pthread_rwlock_t = struct{ X__data S__pthread_rwlock_arch_t } /* pthreadtypes.h:91:3 */

type Pthread_rwlockattr_t = struct {
	_       [0]uint64
	X__size [8]int8
} /* pthreadtypes.h:97:3 */

// POSIX spinlock data type.
type Pthread_spinlock_t = int32 /* pthreadtypes.h:103:22 */

// POSIX barriers data type.  The structure of the type is
//    deliberately not exposed.
type Pthread_barrier_t = struct {
	_       [0]uint64
	X__size [32]int8
} /* pthreadtypes.h:112:3 */

type Pthread_barrierattr_t = struct {
	_       [0]uint32
	X__size [4]int8
} /* pthreadtypes.h:118:3 */

// Reentrant versions of the `random' family of functions.
//    These functions all use the following data structure to contain
//    state, rather than global state variables.

type Srandom_data = struct {
	Fptr        uintptr
	Rptr        uintptr
	State       uintptr
	Rand_type   int32
	Rand_deg    int32
	Rand_sep    int32
	__ccgo_pad1 [4]byte
	End_ptr     uintptr
} /* stdlib.h:423:1 */

// Data structure for communication with thread safe versions.  This
//    type is to be regarded as opaque.  It's only exported because users
//    have to allocate objects of this type.
type Sdrand48_data = struct {
	X__x     [3]uint16
	X__old_x [3]uint16
	X__c     uint16
	X__init  uint16
	X__a     uint64
} /* stdlib.h:490:1 */

// Shorthand for type of comparison functions.
type X__compar_fn_t = uintptr /* stdlib.h:805:13 */

// Floating-point inline functions for stdlib.h.
//    Copyright (C) 2012-2018 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// Define some macros helping to catch buffer overflows.

type TSStateId = Uint16_t /* parser.h:16:18 */

type TSSymbol = Uint16_t  /* parser.h:19:18 */
type TSFieldId = Uint16_t /* parser.h:20:18 */
type STSLanguage = struct {
	Version                   Uint32_t
	Symbol_count              Uint32_t
	Alias_count               Uint32_t
	Token_count               Uint32_t
	External_token_count      Uint32_t
	State_count               Uint32_t
	Large_state_count         Uint32_t
	Production_id_count       Uint32_t
	Field_count               Uint32_t
	Max_alias_sequence_length Uint16_t
	__ccgo_pad1               [2]byte
	Parse_table               uintptr
	Small_parse_table         uintptr
	Small_parse_table_map     uintptr
	Parse_actions             uintptr
	Symbol_names              uintptr
	Field_names               uintptr
	Field_map_slices          uintptr
	Field_map_entries         uintptr
	Symbol_metadata           uintptr
	Public_symbol_map         uintptr
	Alias_map                 uintptr
	Alias_sequences           uintptr
	Lex_modes                 uintptr
	Lex_fn                    uintptr
	Keyword_lex_fn            uintptr
	Keyword_capture_token     TSSymbol
	__ccgo_pad2               [6]byte
	External_scanner          struct {
		States      uintptr
		Symbol_map  uintptr
		Create      uintptr
		Destroy     uintptr
		Scan        uintptr
		Serialize   uintptr
		Deserialize uintptr
	}
} /* parser.h:21:9 */

type TSLanguage = STSLanguage /* parser.h:21:27 */

type TSFieldMapEntry = struct {
	Field_id    TSFieldId
	Child_index Uint8_t
	Inherited   uint8
} /* parser.h:28:3 */

type TSFieldMapSlice = struct {
	Index  Uint16_t
	Length Uint16_t
} /* parser.h:33:3 */

type TSSymbolMetadata = struct {
	Visible   uint8
	Named     uint8
	Supertype uint8
} /* parser.h:39:3 */

type STSLexer = struct {
	Lookahead                  Int32_t
	Result_symbol              TSSymbol
	__ccgo_pad1                [2]byte
	Advance                    uintptr
	Mark_end                   uintptr
	Get_column                 uintptr
	Is_at_included_range_start uintptr
	Eof                        uintptr
} /* parser.h:41:9 */

type TSLexer = STSLexer /* parser.h:41:24 */

type TSParseActionType = uint32 /* parser.h:58:3 */

type TSParseAction = struct {
	Shift struct {
		Type        Uint8_t
		__ccgo_pad1 [1]byte
		State       TSStateId
		Extra       uint8
		Repetition  uint8
	}
	_ [2]byte
} /* parser.h:75:3 */

type TSLexMode = struct {
	Lex_state          Uint16_t
	External_lex_state Uint16_t
} /* parser.h:80:3 */

type TSParseActionEntry = struct{ Action TSParseAction } /* parser.h:88:3 */

var ts_symbol_names = [24]uintptr{ts /* "end" */, ts + 4 /* "{" */, ts + 6 /* "," */, ts + 8 /* "}" */, ts + 10 /* ":" */, ts + 12 /* "[" */, ts + 14 /* "]" */, ts + 16 /* "\"" */, ts + 18 /* "string_content_t..." */, ts + 40 /* "escape_sequence" */, ts + 56 /* "number" */, ts + 63 /* "true" */, ts + 68 /* "false" */, ts + 74 /* "null" */, ts + 79 /* "document" */, ts + 88 /* "_value" */, ts + 95 /* "object" */, ts + 102 /* "pair" */, ts + 107 /* "array" */, ts + 113 /* "string" */, ts + 120 /* "string_content" */, ts + 135 /* "object_repeat1" */, ts + 150 /* "array_repeat1" */, ts + 164 /* "string_content_r..." */} /* parser.c:45:19 */

var ts_symbol_map = [24]TSSymbol{TSSymbol(Ts_builtin_sym_end), Anon_sym_LBRACE, Anon_sym_COMMA, Anon_sym_RBRACE, Anon_sym_COLON, Anon_sym_LBRACK, Anon_sym_RBRACK, Anon_sym_DQUOTE, Aux_sym_string_content_token1, Sym_escape_sequence, Sym_number, Sym_true, Sym_false, Sym_null, Sym_document, Sym__value, Sym_object, Sym_pair, Sym_array, Sym_string, Sym_string_content, Aux_sym_object_repeat1, Aux_sym_array_repeat1, Aux_sym_string_content_repeat1} /* parser.c:72:17 */

var ts_symbol_metadata = [24]TSSymbolMetadata{{Named: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {Visible: uint8(True)}, {}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Named: uint8(True), Supertype: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {Visible: uint8(True), Named: uint8(True)}, {}, {}, {},
} /* parser.c:99:31 */

var ts_field_names = [3]uintptr{uintptr(0), ts + 187 /* "key" */, ts + 191 /* "value" */} /* parser.c:204:19 */

var ts_field_map_slices = [2]TSFieldMapSlice{1: {Length: Uint16_t(2)}} /* parser.c:210:30 */

var ts_field_map_entries = [2]TSFieldMapEntry{
	{Field_id: Field_key},
	{Field_id: Field_value, Child_index: Uint8_t(2)},
} /* parser.c:214:30 */

var ts_alias_sequences = [2][4]TSSymbol{0: {0: TSSymbol(0)}} /* parser.c:220:17 */

var ts_non_terminal_alias_map = [1]Uint16_t{
	Uint16_t(0),
} /* parser.c:224:17 */

func ts_lex(tls *libc.TLS, lexer uintptr, state TSStateId) uint8 { /* parser.c:228:13: */
	var result uint8
	var skip uint8
	var eof uint8
	var lookahead Int32_t
	result = uint8(False)
	skip = uint8(False)
	eof = uint8(False)
	goto start
next_state:
	(*struct {
		f func(*libc.TLS, uintptr, uint8)
	})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Advance})).f(tls, lexer, skip)
start:
	skip = uint8(False)
	lookahead = (*TSLexer)(unsafe.Pointer(lexer)).Lookahead

	eof = (*struct {
		f func(*libc.TLS, uintptr) uint8
	})(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Eof})).f(tls, lexer)
	switch int32(state) {
	case 0:
		goto __2
	case 1:
		goto __3
	case 2:
		goto __4
	case 3:
		goto __5
	case 4:
		goto __6
	case 5:
		goto __7
	case 6:
		goto __8
	case 7:
		goto __9
	case 8:
		goto __10
	case 9:
		goto __11
	case 10:
		goto __12
	case 11:
		goto __13
	case 12:
		goto __14
	case 13:
		goto __15
	case 14:
		goto __16
	case 15:
		goto __17
	case 16:
		goto __18
	case 17:
		goto __19
	case 18:
		goto __20
	case 19:
		goto __21
	case 20:
		goto __22
	case 21:
		goto __23
	case 22:
		goto __24
	case 23:
		goto __25
	case 24:
		goto __26
	case 25:
		goto __27
	case 26:
		goto __28
	case 27:
		goto __29
	case 28:
		goto __30
	case 29:
		goto __31
	case 30:
		goto __32
	case 31:
		goto __33
	case 32:
		goto __34
	case 33:
		goto __35
	case 34:
		goto __36
	case 35:
		goto __37
	case 36:
		goto __38
	case 37:
		goto __39
	case 38:
		goto __40
	case 39:
		goto __41
	case 40:
		goto __42
	case 41:
		goto __43
	case 42:
		goto __44
	case 43:
		goto __45
	default:
		goto __46
	}
	goto __1
__2:
	if !(eof != 0) {
		goto __47
	}
	state = TSStateId(22)
	goto next_state
__47:
	;

	if !(lookahead == '"') {
		goto __48
	}
	state = TSStateId(29)
	goto next_state
__48:
	;

	if !((lookahead == '+') || (lookahead == '-')) {
		goto __49
	}
	state = TSStateId(3)
	goto next_state
__49:
	;

	if !(lookahead == ',') {
		goto __50
	}
	state = TSStateId(24)
	goto next_state
__50:
	;

	if !(lookahead == '.') {
		goto __51
	}
	state = TSStateId(18)
	goto next_state
__51:
	;

	if !(lookahead == '0') {
		goto __52
	}
	state = TSStateId(33)
	goto next_state
__52:
	;

	if !(lookahead == ':') {
		goto __53
	}
	state = TSStateId(26)
	goto next_state
__53:
	;

	if !(lookahead == '[') {
		goto __54
	}
	state = TSStateId(27)
	goto next_state
__54:
	;

	if !(lookahead == '\\') {
		goto __55
	}
	state = TSStateId(16)
	goto next_state
__55:
	;

	if !(lookahead == ']') {
		goto __56
	}
	state = TSStateId(28)
	goto next_state
__56:
	;

	if !(lookahead == 'f') {
		goto __57
	}
	state = TSStateId(4)
	goto next_state
__57:
	;

	if !(lookahead == 'n') {
		goto __58
	}
	state = TSStateId(13)
	goto next_state
__58:
	;

	if !(lookahead == 't') {
		goto __59
	}
	state = TSStateId(10)
	goto next_state
__59:
	;

	if !(lookahead == '{') {
		goto __60
	}
	state = TSStateId(23)
	goto next_state
__60:
	;

	if !(lookahead == '}') {
		goto __61
	}
	state = TSStateId(25)
	goto next_state
__61:
	;

	if !((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\r')) || (lookahead == ' ')) {
		goto __62
	}
	skip = uint8(True)
	state = TSStateId(21)
	goto next_state
__62:
	;
	if !(('1' <= lookahead) && (lookahead <= '9')) {
		goto __63
	}
	state = TSStateId(35)
	goto next_state
__63:
	;

	return result

__3:
	if !(lookahead == '\n') {
		goto __64
	}
	skip = uint8(True)
	state = TSStateId(2)
	goto next_state
__64:
	;
	if !(lookahead == '"') {
		goto __65
	}
	state = TSStateId(29)
	goto next_state
__65:
	;

	if !(lookahead == '\\') {
		goto __66
	}
	state = TSStateId(16)
	goto next_state
__66:
	;

	if !(((lookahead == '\t') || (lookahead == '\r')) || (lookahead == ' ')) {
		goto __67
	}
	state = TSStateId(30)
	goto next_state
__67:
	;

	if !(lookahead != 0) {
		goto __68
	}
	state = TSStateId(31)
	goto next_state
__68:
	;

	return result

__4:
	if !(lookahead == '"') {
		goto __69
	}
	state = TSStateId(29)
	goto next_state
__69:
	;

	if !((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\r')) || (lookahead == ' ')) {
		goto __70
	}
	skip = uint8(True)
	state = TSStateId(2)
	goto next_state
__70:
	;
	return result

__5:
	if !(lookahead == '0') {
		goto __71
	}
	state = TSStateId(34)
	goto next_state
__71:
	;

	if !(('1' <= lookahead) && (lookahead <= '9')) {
		goto __72
	}
	state = TSStateId(35)
	goto next_state
__72:
	;

	return result

__6:
	if !(lookahead == 'a') {
		goto __73
	}
	state = TSStateId(7)
	goto next_state
__73:
	;

	return result

__7:
	if !(lookahead == 'e') {
		goto __74
	}
	state = TSStateId(41)
	goto next_state
__74:
	;

	return result

__8:
	if !(lookahead == 'e') {
		goto __75
	}
	state = TSStateId(42)
	goto next_state
__75:
	;

	return result

__9:
	if !(lookahead == 'l') {
		goto __76
	}
	state = TSStateId(11)
	goto next_state
__76:
	;

	return result

__10:
	if !(lookahead == 'l') {
		goto __77
	}
	state = TSStateId(43)
	goto next_state
__77:
	;

	return result

__11:
	if !(lookahead == 'l') {
		goto __78
	}
	state = TSStateId(8)
	goto next_state
__78:
	;

	return result

__12:
	if !(lookahead == 'r') {
		goto __79
	}
	state = TSStateId(12)
	goto next_state
__79:
	;

	return result

__13:
	if !(lookahead == 's') {
		goto __80
	}
	state = TSStateId(6)
	goto next_state
__80:
	;

	return result

__14:
	if !(lookahead == 'u') {
		goto __81
	}
	state = TSStateId(5)
	goto next_state
__81:
	;

	return result

__15:
	if !(lookahead == 'u') {
		goto __82
	}
	state = TSStateId(9)
	goto next_state
__82:
	;

	return result

__16:
	if !((lookahead == '+') || (lookahead == '-')) {
		goto __83
	}
	state = TSStateId(19)
	goto next_state
__83:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __84
	}
	state = TSStateId(39)
	goto next_state
__84:
	;

	return result

__17:
	if !((lookahead == '0') || (lookahead == '1')) {
		goto __85
	}
	state = TSStateId(37)
	goto next_state
__85:
	;

	return result

__18:
	if !((((((((lookahead == '"') || (lookahead == '/')) || (lookahead == '\\')) || (lookahead == 'b')) || (lookahead == 'n')) || (lookahead == 'r')) || (lookahead == 't')) || (lookahead == 'u')) {
		goto __86
	}
	state = TSStateId(32)
	goto next_state
__86:
	;

	return result

__19:
	if !(('0' <= lookahead) && (lookahead <= '7')) {
		goto __87
	}
	state = TSStateId(38)
	goto next_state
__87:
	;

	return result

__20:
	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __88
	}
	state = TSStateId(36)
	goto next_state
__88:
	;

	return result

__21:
	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __89
	}
	state = TSStateId(39)
	goto next_state
__89:
	;

	return result

__22:
	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __90
	}
	state = TSStateId(40)
	goto next_state
__90:
	;

	return result

__23:
	if !(eof != 0) {
		goto __91
	}
	state = TSStateId(22)
	goto next_state
__91:
	;

	if !(lookahead == '"') {
		goto __92
	}
	state = TSStateId(29)
	goto next_state
__92:
	;

	if !((lookahead == '+') || (lookahead == '-')) {
		goto __93
	}
	state = TSStateId(3)
	goto next_state
__93:
	;

	if !(lookahead == ',') {
		goto __94
	}
	state = TSStateId(24)
	goto next_state
__94:
	;

	if !(lookahead == '.') {
		goto __95
	}
	state = TSStateId(18)
	goto next_state
__95:
	;

	if !(lookahead == '0') {
		goto __96
	}
	state = TSStateId(33)
	goto next_state
__96:
	;

	if !(lookahead == ':') {
		goto __97
	}
	state = TSStateId(26)
	goto next_state
__97:
	;

	if !(lookahead == '[') {
		goto __98
	}
	state = TSStateId(27)
	goto next_state
__98:
	;

	if !(lookahead == ']') {
		goto __99
	}
	state = TSStateId(28)
	goto next_state
__99:
	;

	if !(lookahead == 'f') {
		goto __100
	}
	state = TSStateId(4)
	goto next_state
__100:
	;

	if !(lookahead == 'n') {
		goto __101
	}
	state = TSStateId(13)
	goto next_state
__101:
	;

	if !(lookahead == 't') {
		goto __102
	}
	state = TSStateId(10)
	goto next_state
__102:
	;

	if !(lookahead == '{') {
		goto __103
	}
	state = TSStateId(23)
	goto next_state
__103:
	;

	if !(lookahead == '}') {
		goto __104
	}
	state = TSStateId(25)
	goto next_state
__104:
	;

	if !((((lookahead == '\t') || (lookahead == '\n')) || (lookahead == '\r')) || (lookahead == ' ')) {
		goto __105
	}
	skip = uint8(True)
	state = TSStateId(21)
	goto next_state
__105:
	;
	if !(('1' <= lookahead) && (lookahead <= '9')) {
		goto __106
	}
	state = TSStateId(35)
	goto next_state
__106:
	;

	return result

__24:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = TSSymbol(Ts_builtin_sym_end)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__25:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LBRACE
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__26:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_COMMA
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__27:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_RBRACE
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__28:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_COLON
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__29:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_LBRACK
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__30:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_RBRACK
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__31:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Anon_sym_DQUOTE
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__32:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Aux_sym_string_content_token1
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(((lookahead == '\t') || (lookahead == '\r')) || (lookahead == ' ')) {
		goto __107
	}
	state = TSStateId(30)
	goto next_state
__107:
	;

	if !((((lookahead != 0) && (lookahead != '\n')) && (lookahead != '"')) && (lookahead != '\\')) {
		goto __108
	}
	state = TSStateId(31)
	goto next_state
__108:
	;

	return result

__33:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Aux_sym_string_content_token1
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !((((lookahead != 0) && (lookahead != '\n')) && (lookahead != '"')) && (lookahead != '\\')) {
		goto __109
	}
	state = TSStateId(31)
	goto next_state
__109:
	;

	return result

__34:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_escape_sequence
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__35:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_number
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '.') {
		goto __110
	}
	state = TSStateId(36)
	goto next_state
__110:
	;

	if !((lookahead == 'B') || (lookahead == 'b')) {
		goto __111
	}
	state = TSStateId(15)
	goto next_state
__111:
	;

	if !((lookahead == 'E') || (lookahead == 'e')) {
		goto __112
	}
	state = TSStateId(14)
	goto next_state
__112:
	;

	if !((lookahead == 'O') || (lookahead == 'o')) {
		goto __113
	}
	state = TSStateId(17)
	goto next_state
__113:
	;

	if !((lookahead == 'X') || (lookahead == 'x')) {
		goto __114
	}
	state = TSStateId(20)
	goto next_state
__114:
	;

	return result

__36:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_number
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '.') {
		goto __115
	}
	state = TSStateId(36)
	goto next_state
__115:
	;

	if !((lookahead == 'E') || (lookahead == 'e')) {
		goto __116
	}
	state = TSStateId(14)
	goto next_state
__116:
	;

	return result

__37:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_number
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(lookahead == '.') {
		goto __117
	}
	state = TSStateId(36)
	goto next_state
__117:
	;

	if !((lookahead == 'E') || (lookahead == 'e')) {
		goto __118
	}
	state = TSStateId(14)
	goto next_state
__118:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __119
	}
	state = TSStateId(35)
	goto next_state
__119:
	;

	return result

__38:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_number
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !((lookahead == 'E') || (lookahead == 'e')) {
		goto __120
	}
	state = TSStateId(14)
	goto next_state
__120:
	;

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __121
	}
	state = TSStateId(36)
	goto next_state
__121:
	;

	return result

__39:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_number
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !((lookahead == '0') || (lookahead == '1')) {
		goto __122
	}
	state = TSStateId(37)
	goto next_state
__122:
	;

	return result

__40:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_number
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(('0' <= lookahead) && (lookahead <= '7')) {
		goto __123
	}
	state = TSStateId(38)
	goto next_state
__123:
	;

	return result

__41:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_number
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(('0' <= lookahead) && (lookahead <= '9')) {
		goto __124
	}
	state = TSStateId(39)
	goto next_state
__124:
	;

	return result

__42:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_number
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	if !(((('0' <= lookahead) && (lookahead <= '9')) || (('A' <= lookahead) && (lookahead <= 'F'))) || (('a' <= lookahead) && (lookahead <= 'f'))) {
		goto __125
	}
	state = TSStateId(40)
	goto next_state
__125:
	;

	return result

__43:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_true
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__44:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_false
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__45:
	result = uint8(True)
	(*TSLexer)(unsafe.Pointer(lexer)).Result_symbol = Sym_null
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TSLexer)(unsafe.Pointer(lexer)).Mark_end})).f(tls, lexer)

	return result

__46:
	return uint8(False)
__1:
	;
	return uint8(0)
}

var ts_lex_modes = [32]TSLexMode{{}, {}, {}, {}, {}, {}, {}, {Lex_state: Uint16_t(1)}, {}, {}, {}, {Lex_state: Uint16_t(1)}, {}, {}, {}, {}, {}, {Lex_state: Uint16_t(1)}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}} /* parser.c:468:18 */

var ts_parse_table = [2][24]Uint16_t{{0: Uint16_t(1), 1: Uint16_t(1), 2: Uint16_t(1), 3: Uint16_t(1), 4: Uint16_t(1), 5: Uint16_t(1), 6: Uint16_t(1), 7: Uint16_t(1), 9: Uint16_t(1), 10: Uint16_t(1), 11: Uint16_t(1), 12: Uint16_t(1), 13: Uint16_t(1)}, {1: Uint16_t(3), 5: Uint16_t(5), 7: Uint16_t(7), 10: Uint16_t(9), 11: Uint16_t(9), 12: Uint16_t(9), 13: Uint16_t(9), 14: Uint16_t(28), 15: Uint16_t(31), 16: Uint16_t(12), 18: Uint16_t(12), 19: Uint16_t(12)}} /* parser.c:503:17 */

var ts_small_parse_table = [296]Uint16_t{Uint16_t(7),
	Uint16_t(3), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(5), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(7), Uint16_t(1),
	Anon_sym_DQUOTE,
	Uint16_t(11), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(21), Uint16_t(1),
	Sym__value,
	Uint16_t(12), Uint16_t(3),
	Sym_object,
	Sym_array,
	Sym_string,
	Uint16_t(9), Uint16_t(4),
	Sym_number,
	Sym_true,
	Sym_false,
	Sym_null, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(5), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(7), Uint16_t(1),
	Anon_sym_DQUOTE,
	Uint16_t(27), Uint16_t(1),
	Sym__value,
	Uint16_t(12), Uint16_t(3),
	Sym_object,
	Sym_array,
	Sym_string,
	Uint16_t(9), Uint16_t(4),
	Sym_number,
	Sym_true,
	Sym_false,
	Sym_null, Uint16_t(6),
	Uint16_t(3), Uint16_t(1),
	Anon_sym_LBRACE,
	Uint16_t(5), Uint16_t(1),
	Anon_sym_LBRACK,
	Uint16_t(7), Uint16_t(1),
	Anon_sym_DQUOTE,
	Uint16_t(25), Uint16_t(1),
	Sym__value,
	Uint16_t(12), Uint16_t(3),
	Sym_object,
	Sym_array,
	Sym_string,
	Uint16_t(9), Uint16_t(4),
	Sym_number,
	Sym_true,
	Sym_false,
	Sym_null, Uint16_t(1),
	Uint16_t(13), Uint16_t(5),
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_COMMA,
	Anon_sym_RBRACE,
	Anon_sym_COLON,
	Anon_sym_RBRACK, Uint16_t(5),
	Uint16_t(7), Uint16_t(1),
	Anon_sym_DQUOTE,
	Uint16_t(15), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(17), Uint16_t(1),
	Sym_number,
	Uint16_t(20), Uint16_t(1),
	Sym_pair,
	Uint16_t(29), Uint16_t(1),
	Sym_string, Uint16_t(4),
	Uint16_t(19), Uint16_t(1),
	Anon_sym_DQUOTE,
	Uint16_t(11), Uint16_t(1),
	Aux_sym_string_content_repeat1,
	Uint16_t(30), Uint16_t(1),
	Sym_string_content,
	Uint16_t(21), Uint16_t(2),
	Aux_sym_string_content_token1,
	Sym_escape_sequence, Uint16_t(1),
	Uint16_t(23), Uint16_t(5),
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_COMMA,
	Anon_sym_RBRACE,
	Anon_sym_COLON,
	Anon_sym_RBRACK, Uint16_t(1),
	Uint16_t(25), Uint16_t(4),
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_COMMA,
	Anon_sym_RBRACE,
	Anon_sym_RBRACK, Uint16_t(1),
	Uint16_t(27), Uint16_t(4),
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_COMMA,
	Anon_sym_RBRACE,
	Anon_sym_RBRACK, Uint16_t(3),
	Uint16_t(29), Uint16_t(1),
	Anon_sym_DQUOTE,
	Uint16_t(17), Uint16_t(1),
	Aux_sym_string_content_repeat1,
	Uint16_t(31), Uint16_t(2),
	Aux_sym_string_content_token1,
	Sym_escape_sequence, Uint16_t(1),
	Uint16_t(33), Uint16_t(4),
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_COMMA,
	Anon_sym_RBRACE,
	Anon_sym_RBRACK, Uint16_t(4),
	Uint16_t(7), Uint16_t(1),
	Anon_sym_DQUOTE,
	Uint16_t(17), Uint16_t(1),
	Sym_number,
	Uint16_t(26), Uint16_t(1),
	Sym_pair,
	Uint16_t(29), Uint16_t(1),
	Sym_string, Uint16_t(1),
	Uint16_t(35), Uint16_t(4),
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_COMMA,
	Anon_sym_RBRACE,
	Anon_sym_RBRACK, Uint16_t(1),
	Uint16_t(37), Uint16_t(4),
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_COMMA,
	Anon_sym_RBRACE,
	Anon_sym_RBRACK, Uint16_t(1),
	Uint16_t(39), Uint16_t(4),
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_COMMA,
	Anon_sym_RBRACE,
	Anon_sym_RBRACK, Uint16_t(3),
	Uint16_t(41), Uint16_t(1),
	Anon_sym_DQUOTE,
	Uint16_t(17), Uint16_t(1),
	Aux_sym_string_content_repeat1,
	Uint16_t(43), Uint16_t(2),
	Aux_sym_string_content_token1,
	Sym_escape_sequence, Uint16_t(1),
	Uint16_t(46), Uint16_t(4),
	Uint16_t(Ts_builtin_sym_end),
	Anon_sym_COMMA,
	Anon_sym_RBRACE,
	Anon_sym_RBRACK, Uint16_t(3),
	Uint16_t(48), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(51), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(19), Uint16_t(1),
	Aux_sym_object_repeat1, Uint16_t(3),
	Uint16_t(53), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(55), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(23), Uint16_t(1),
	Aux_sym_object_repeat1, Uint16_t(3),
	Uint16_t(57), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(59), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(24), Uint16_t(1),
	Aux_sym_array_repeat1, Uint16_t(3),
	Uint16_t(61), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(64), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(22), Uint16_t(1),
	Aux_sym_array_repeat1, Uint16_t(3),
	Uint16_t(53), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(66), Uint16_t(1),
	Anon_sym_RBRACE,
	Uint16_t(19), Uint16_t(1),
	Aux_sym_object_repeat1, Uint16_t(3),
	Uint16_t(57), Uint16_t(1),
	Anon_sym_COMMA,
	Uint16_t(68), Uint16_t(1),
	Anon_sym_RBRACK,
	Uint16_t(22), Uint16_t(1),
	Aux_sym_array_repeat1, Uint16_t(1),
	Uint16_t(70), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACE, Uint16_t(1),
	Uint16_t(51), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACE, Uint16_t(1),
	Uint16_t(64), Uint16_t(2),
	Anon_sym_COMMA,
	Anon_sym_RBRACK, Uint16_t(1),
	Uint16_t(72), Uint16_t(1),
	Uint16_t(Ts_builtin_sym_end), Uint16_t(1),
	Uint16_t(74), Uint16_t(1),
	Anon_sym_COLON, Uint16_t(1),
	Uint16_t(76), Uint16_t(1),
	Anon_sym_DQUOTE, Uint16_t(1),
	Uint16_t(78), Uint16_t(1),
	Uint16_t(Ts_builtin_sym_end),
} /* parser.c:535:17 */

var ts_small_parse_table_map = [30]Uint32_t{Uint32_t(0), Uint32_t(27), Uint32_t(51), Uint32_t(75), Uint32_t(83), Uint32_t(99), Uint32_t(113), Uint32_t(121), Uint32_t(128), Uint32_t(135), Uint32_t(146), Uint32_t(153), Uint32_t(166), Uint32_t(173), Uint32_t(180), Uint32_t(187), Uint32_t(198), Uint32_t(205), Uint32_t(215), Uint32_t(225), Uint32_t(235), Uint32_t(245), Uint32_t(255), Uint32_t(265), Uint32_t(270), Uint32_t(275), Uint32_t(280), Uint32_t(284), Uint32_t(288), Uint32_t(292)} /* parser.c:762:17 */

var ts_parse_actions = [80]TSParseActionEntry{{}, func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeRecover
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(6)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(2)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(7)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(12)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(10)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_string
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(9)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(29)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(5)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(11)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_string
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_object
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_array
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_string_content
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(17)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym__value
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_object
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_array
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_array
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(False)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_string_content_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_string_content_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(17)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(4)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_object
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_object_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(13)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_object_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(13)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(14)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(3)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(16)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(2)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_array_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(3)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 5)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(2)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Aux_sym_array_repeat1
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(18)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(15)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(3)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_pair
	*(*Uint16_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 6)) = Uint16_t(1)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeAccept
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(4)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeShift
	*(*TSStateId)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = TSStateId(8)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = Uint8_t(1)
	*(*uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = uint8(True)
	return r
}(), func() (r TSParseActionEntry) {
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 0)) = TSParseActionTypeReduce
	*(*Uint8_t)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 1)) = Uint8_t(1)
	*(*TSSymbol)(unsafe.Pointer(uintptr(unsafe.Pointer(&r)) + 2)) = Sym_document
	return r
}()} /* parser.c:795:27 */

func Xtree_sitter_json(tls *libc.TLS) uintptr { /* parser.c:844:25: */
	return uintptr(unsafe.Pointer(&language))
}

var language = TSLanguage{Version: Uint32_t(LANGUAGE_VERSION), Symbol_count: Uint32_t(SYMBOL_COUNT), Token_count: Uint32_t(TOKEN_COUNT), State_count: Uint32_t(STATE_COUNT), Large_state_count: Uint32_t(LARGE_STATE_COUNT), Production_id_count: Uint32_t(PRODUCTION_ID_COUNT), Field_count: Uint32_t(FIELD_COUNT), Max_alias_sequence_length: Uint16_t(MAX_ALIAS_SEQUENCE_LENGTH), Parse_table: 0, Small_parse_table: 0, Small_parse_table_map: 0, Parse_actions: 0, Symbol_names: 0, Field_names: 0, Field_map_slices: 0, Field_map_entries: 0, Symbol_metadata: 0, Public_symbol_map: 0, Alias_map: 0, Alias_sequences: 0, Lex_modes: 0, Lex_fn: 0} /* parser.c:845:21 */

func init() {
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 40 /* .parse_table */)) = uintptr(uintptr(unsafe.Pointer(&ts_parse_table)))                     // parser.c:856:20:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 48 /* .small_parse_table */)) = uintptr(uintptr(unsafe.Pointer(&ts_small_parse_table)))         // parser.c:857:26:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 56 /* .small_parse_table_map */)) = uintptr(uintptr(unsafe.Pointer(&ts_small_parse_table_map))) // parser.c:858:30:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 64 /* .parse_actions */)) = uintptr(unsafe.Pointer(&ts_parse_actions))                          // parser.c:859:22:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 72 /* .symbol_names */)) = uintptr(unsafe.Pointer(&ts_symbol_names))                            // parser.c:860:21:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 80 /* .field_names */)) = uintptr(unsafe.Pointer(&ts_field_names))                              // parser.c:861:20:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 88 /* .field_map_slices */)) = uintptr(uintptr(unsafe.Pointer(&ts_field_map_slices)))           // parser.c:862:25:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 96 /* .field_map_entries */)) = uintptr(uintptr(unsafe.Pointer(&ts_field_map_entries)))         // parser.c:863:26:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 104 /* .symbol_metadata */)) = uintptr(unsafe.Pointer(&ts_symbol_metadata))                     // parser.c:864:24:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 112 /* .public_symbol_map */)) = uintptr(unsafe.Pointer(&ts_symbol_map))                        // parser.c:865:26:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 120 /* .alias_map */)) = uintptr(unsafe.Pointer(&ts_non_terminal_alias_map))                    // parser.c:866:18:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 128 /* .alias_sequences */)) = uintptr(uintptr(unsafe.Pointer(&ts_alias_sequences)))            // parser.c:867:24:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 136 /* .lex_modes */)) = uintptr(unsafe.Pointer(&ts_lex_modes))                                 // parser.c:868:18:
	*(*func(*libc.TLS, uintptr, TSStateId) uint8)(unsafe.Pointer(uintptr(unsafe.Pointer(&language)) + 144 /* .lex_fn */)) = ts_lex                                  // parser.c:869:15:
}

var ts1 = "end\x00{\x00,\x00}\x00:\x00[\x00]\x00\"\x00string_content_token1\x00escape_sequence\x00number\x00true\x00false\x00null\x00document\x00_value\x00object\x00pair\x00array\x00string\x00string_content\x00object_repeat1\x00array_repeat1\x00string_content_repeat1\x00key\x00value\x00"
var ts = (*reflect.StringHeader)(unsafe.Pointer(&ts1)).Data
